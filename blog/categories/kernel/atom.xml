<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kernel | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/kernel/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-07-26T20:49:44+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fix: Qemu X86_64下gdb Debug kernel出現Remote &#39;g' Packet Reply Is Too Long:]]></title>
    <link href="http://wen00072.github.io/blog/2017/06/04/qemu-x86-64-with-gdb/"/>
    <updated>2017-06-04T16:11:15+08:00</updated>
    <id>http://wen00072.github.io/blog/2017/06/04/qemu-x86-64-with-gdb</id>
    <content type="html"><![CDATA[<h2>問題描述</h2>

<p>本篇文章主要是解決使用gdb 設Qemu x86_64 模擬執行x86_64 buildroot kernel開機的中斷點時遇到下面的錯誤訊息</p>

<p><strong><font color="red">Remote &#39;g&#8217; packet reply is too long:</font></strong></p>

<p>詳細訊息如下
<code>
0x0000000000000000 in irq_stack_union ()
(gdb) b x86_64_start_kernel
Breakpoint 1 at 0xffffffff8188429b: file arch/x86/kernel/head64.c, line 134.
(gdb) c
Continuing.
Remote 'g' packet reply is too long: 9b428881ffffffff0000000000000000010100c000000000ffffffff00000000804001000000000080400100000000000000000000000000f03f8081ffffffff00a080010000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000009b428881ffffffff4600000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000
</code></p>

<h2>目錄</h2>

<ul>
<li><a href="#qxg-env">測試環境</a></li>
<li><a href="#qxg-prepare">buildroot 事先準備</a></li>
<li><a href="#qxg-fix">gdb 錯誤訊息解法</a></li>
<li><a href="#qxg-pkg">懶人包</a>

<ul>
<li><a href="#qxg-tty">讓qemu-system-x86_64 在console 可以登入</a></li>
</ul>
</li>
<li><a href="#qxg-ref">參考資料</a></li>
</ul>


<p><a name="qxg-env"></a></p>

<h2>測試環境</h2>

<ul>
<li><a href="https://git.buildroot.net/buildroot">Buildroot</a>

<ul>
<li>Commit: <code>bfc90a5621c680000f8b19e8afea944da5c2a469</code></li>
</ul>
</li>
<li>Target kernel 版本</li>
</ul>


<pre><code># uname -a
Linux buildroot 4.9.6 #2 SMP Sun Jun 4 18:46:27 CST 2017 x86_64 GNU/Linux
</code></pre>

<ul>
<li>Qemu 執行指令</li>
</ul>


<pre><code>$ qemu-system-x86_64 -M pc -kernel output/images/bzImage                        \
                     -drive file=output/images/rootfs.ext2,if=virtio,format=raw \
                     -append "root=/dev/vda console=ttyS0"                      \
                     -net nic,model=virtio -net user -nographic -S -s
</code></pre>

<p>基本上是從<a href="https://git.buildroot.net/buildroot/tree/board/qemu/x86_64/readme.txt">這邊</a>衍生出來的，挑幾個重點</p>

<ul>
<li><code>-append "root=/dev/vda console=ttyS0"</code>

<ul>
<li>指定serial port console，如此一來就可以在terminal 直接顯示Qemu 的執行文字，不過你需要<a href="#qxg-tty">修改</a>rootfs 的<code>/etc/inittab</code>才能在terminal login</li>
</ul>
</li>
<li><code>-S -s</code>

<ul>
<li>開機的時候就停下來，並開啟port 1234讓gdb從遠端連入除錯</li>
</ul>
</li>
<li><code>-nographic</code>

<ul>
<li>懶得跳一個視窗，直接terminal當console使用</li>
</ul>
</li>
</ul>


<p><a name="qxg-prepare"></a></p>

<h2>buildroot 事先準備</h2>

<ol>
<li>下載buildroot

<ul>
<li><code>git clone https://git.buildroot.net/buildroot</code></li>
</ul>
</li>
<li>設定預設config

<ul>
<li><code>make qemu_x86_64_defconfig</code></li>
</ul>
</li>
<li>手動設定buildroot config如gcc版本，客製化rootfs套件等

<ul>
<li><code>make menuconfig</code></li>
</ul>
</li>
<li>設定Linux kernel 選項，主要是打開debug symbol

<ul>
<li><code>make linux-menuconfig</code></li>
</ul>
</li>
<li>編譯rootfs及kernel

<ul>
<li><code>make</code></li>
</ul>
</li>
<li><a href="#qxg-tty">設定可以從console 登入</a></li>
</ol>


<p><a name="qxg-fix"></a></p>

<h2>gdb 錯誤訊息解法</h2>

<p>從<a href="http://wiki.osdev.org/QEMU_and_GDB_in_long_mode">OSDev: QEMU and GDB in long mode</a>可以看到可以使用下面指令頂著先（workaround）</p>

<ul>
<li><code>disconnect</code></li>
<li><code>set arch i386:x86-64</code></li>
<li><code>target remote 127.0.0.1:1234</code></li>
</ul>


<p>然而作為組裝工，信奉偷懶就是美德，每次要打這麼多指令實在很麻煩。因此我將這些麻煩的方式使用下面的指令自動化</p>

<pre><code>gdb ./vmlinux  -ex "target remote localhost:1234"       \
               -ex "break x86_64_start_kernel"          \
               -ex "continue"                           \
               -ex "disconnect"                         \
               -ex "set architecture i386:x86-64:intel" \
               -ex "target remote localhost:1234"
</code></pre>

<p>執行後畫面輸出部份節錄如下
<code>
Reading symbols from ./vmlinux...done.
Remote debugging using localhost:1234
0x0000000000000000 in irq_stack_union ()
Breakpoint 1 at 0xffffffff8188429b: file arch/x86/kernel/head64.c, line 134.
Continuing.
Remote 'g' packet reply is too long: 9b428881ffffffff0000000000000000010100c000000000ffffffff00000000804001000000000080400100000000000000000000000000f03f8081ffffffff00a080010000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000009b428881ffffffff4600000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000
Ending remote debugging.
The target architecture is assumed to be i386:x86-64:intel
Remote debugging using localhost:1234
x86_64_start_kernel (real_mode_data=0x14080 &lt;cpu_tss+6848&gt; &lt;error: Cannot access memory at address 0x14080&gt;) at arch/x86/kernel/head64.c:134
134 {
(gdb) n
151     cr4_init_shadow();
</code></p>

<p>由於gdb command file 遇到錯誤就會停下來，所以把上面的指令放到一個檔案中，執行gdb時將會停在<code>continue</code>這邊，目前懶的找解法了。有興趣的朋友可以自行研究。</p>

<p><a name="qxg-pkg"></a></p>

<h2>懶人包</h2>

<ul>
<li><p>Buildroot
<code>
git clone https://git.buildroot.net/buildroot
cd buildroot
make qemu_x86_64_defconfig
make menuconfig
make linux-menuconfig
make
</code></p></li>
<li><p>啟動Qemu
假設在buildroot top directory下
<code>
qemu-system-x86_64 -M pc -kernel output/images/bzImage                          \
                   -drive file=output/images/rootfs.ext2,if=virtio,format=raw \
                   -append "root=/dev/vda console=ttyS0"                      \
                   -net nic,model=virtio -net user -nographic -S -s
</code></p></li>
<li><p>gdb
假設在buildroot top directory下
<code>
cd output/build/linux-4.9.6
gdb ./vmlinux  -ex "target remote localhost:1234"       \
             -ex "break x86_64_start_kernel"          \
             -ex "continue"                           \
             -ex "disconnect"                         \
             -ex "set architecture i386:x86-64:intel" \
             -ex "target remote localhost:1234"
</code></p></li>
</ul>


<p><a name="qxg-tty"></a></p>

<h3>讓qemu-system-x86_64 在console 可以登入</h3>

<p>在<code>/etc/inittab</code>加入下面這行<code>ttyS0::respawn:/sbin/getty -L  ttyS0 0 vt100 # GENERIC_SERIAL</code></p>

<pre><code class="text /etc/inittab"> # Put a getty on the serial port
 tty1::respawn:/sbin/getty -L  tty1 0 vt100 # GENERIC_SERIAL
+ttyS0::respawn:/sbin/getty -L  ttyS0 0 vt100 # GENERIC_SERIAL
</code></pre>

<p><a name="qxg-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://wiki.osdev.org/QEMU_and_GDB_in_long_mode">OSDev: QEMU and GDB in long mode</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
