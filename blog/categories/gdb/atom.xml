<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gdb | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/gdb/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-07-26T20:49:44+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[從gdb Dump Process 記憶體資料]]></title>
    <link href="http://wen00072.github.io/blog/2019/03/20/dump-process-memory-block-via-gdb/"/>
    <updated>2019-03-20T22:29:54+08:00</updated>
    <id>http://wen00072.github.io/blog/2019/03/20/dump-process-memory-block-via-gdb</id>
    <content type="html"><![CDATA[<p>無聊在trace <a href="http://man7.org/linux/man-pages/man7/vdso.7.html">vdso</a> 找到的技巧。整理如下</p>

<h2>方法說明</h2>

<ul>
<li><code>gdb 你要的程式</code></li>
<li><code>gdb</code> 設常用的 <code>system call</code> 如 <code>open</code></li>
<li>執行程式</li>
<li>中斷後

<ul>
<li><code>info proc mappings</code></li>
<li><code>dump memory 檔名 開始位址 結束位址</code></li>
<li>離開</li>
</ul>
</li>
<li>剩下看你拿要dump 的檔案做啥了</li>
</ul>


<h2>範例： dump process中的vdso記憶體區塊，觀察vdso symbol</h2>

<ul>
<li><p><code>gdb 你要的程式</code>
<code>
$ gdb /bin/ls
GNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git
...
Reading symbols from /bin/ls...(no debugging symbols found)...done.
(gdb)
</code></p></li>
<li><p><code>gdb</code> 設常用的 <code>system call</code> 如 <code>open</code></p></li>
</ul>


<pre><code>(gdb) b open
Breakpoint 1 at 0x3d30
</code></pre>

<ul>
<li>執行程式</li>
</ul>


<pre><code>(gdb) r
Starting program: /bin/ls 

Breakpoint 1, __libc_open64 (file=file@entry=0x7ffff7df6428 "/etc/ld.so.cache", oflag=oflag@entry=524288)
    at ../sysdeps/unix/sysv/linux/open64.c:39
39  ../sysdeps/unix/sysv/linux/open64.c: No such file or directory.
</code></pre>

<ul>
<li><code>info proc mapings</code></li>
</ul>


<pre><code>(gdb) info proc mappings 
process 30094
Mapped address spaces:

          Start Addr           End Addr       Size     Offset objfile
      0x555555554000     0x555555573000    0x1f000        0x0 /bin/ls
      0x555555772000     0x555555775000     0x3000    0x1e000 /bin/ls
      0x555555775000     0x555555776000     0x1000        0x0 [heap]
      0x7ffff7dd5000     0x7ffff7dfc000    0x27000        0x0 /lib/x86_64-linux-gnu/ld-2.27.so
      0x7ffff7ff7000     0x7ffff7ffa000     0x3000        0x0 [vvar]
      0x7ffff7ffa000     0x7ffff7ffc000     0x2000        0x0 [vdso]
      0x7ffff7ffc000     0x7ffff7ffe000     0x2000    0x27000 /lib/x86_64-linux-gnu/ld-2.27.so
      0x7ffff7ffe000     0x7ffff7fff000     0x1000        0x0 
      0x7ffffffde000     0x7ffffffff000    0x21000        0x0 [stack]
  0xffffffffff600000 0xffffffffff601000     0x1000        0x0 [vsyscall]
</code></pre>

<ul>
<li><code>dump memory 檔名 開始位址 結束位址</code></li>
</ul>


<pre><code>(gdb) dump memory vdso 0x7ffff7ffa000  0x7ffff7ffc000
(gdb) quit
A debugging session is active.

    Inferior 1 [process 30094] will be killed.

Quit anyway? (y or n) y
</code></pre>

<ul>
<li>看dump 檔案 symbol</li>
</ul>


<pre><code>$ file vdso 
vdso: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=cef5ed3c3dc2b39082ae093560c168a8b427ebb6, stripped
$ nm -D vdso 
0000000000000a30 W clock_gettime
0000000000000f30 W getcpu
0000000000000d40 W gettimeofday
0000000000000000 A LINUX_2.6
0000000000000f10 W time
0000000000000a30 T __vdso_clock_gettime
0000000000000f30 T __vdso_getcpu
0000000000000d40 T __vdso_gettimeofday
0000000000000f10 T __vdso_time
</code></pre>

<h2>加碼，觀察ASLR</h2>

<p>懶的說明ASLR，請自行參考<a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">連結</a>。
另外請自行比較下面兩個 <code>cat</code> 的記憶體區塊位址。</p>

<pre><code>$ cat /proc/self/maps
5601e5311000-5601e5319000 r-xp 00000000 103:02 13631603                  /bin/cat
...
5601e6814000-5601e6835000 rw-p 00000000 00:00 0                          [heap]
...
7ffe6edcf000-7ffe6edf0000 rw-p 00000000 00:00 0                          [stack]
7ffe6edfb000-7ffe6edfe000 r--p 00000000 00:00 0                          [vvar]
7ffe6edfe000-7ffe6ee00000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]


$ cat /proc/self/maps
556ef8185000-556ef818d000 r-xp 00000000 103:02 13631603                  /bin/cat
...
556ef91df000-556ef9200000 rw-p 00000000 00:00 0                          [heap]
...
7ffc83c55000-7ffc83c76000 rw-p 00000000 00:00 0                          [stack]
7ffc83d4a000-7ffc83d4d000 r--p 00000000 00:00 0                          [vvar]
7ffc83d4d000-7ffc83d4f000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix: Qemu X86_64下gdb Debug kernel出現Remote &#39;g' Packet Reply Is Too Long:]]></title>
    <link href="http://wen00072.github.io/blog/2017/06/04/qemu-x86-64-with-gdb/"/>
    <updated>2017-06-04T16:11:15+08:00</updated>
    <id>http://wen00072.github.io/blog/2017/06/04/qemu-x86-64-with-gdb</id>
    <content type="html"><![CDATA[<h2>問題描述</h2>

<p>本篇文章主要是解決使用gdb 設Qemu x86_64 模擬執行x86_64 buildroot kernel開機的中斷點時遇到下面的錯誤訊息</p>

<p><strong><font color="red">Remote &#39;g&#8217; packet reply is too long:</font></strong></p>

<p>詳細訊息如下
<code>
0x0000000000000000 in irq_stack_union ()
(gdb) b x86_64_start_kernel
Breakpoint 1 at 0xffffffff8188429b: file arch/x86/kernel/head64.c, line 134.
(gdb) c
Continuing.
Remote 'g' packet reply is too long: 9b428881ffffffff0000000000000000010100c000000000ffffffff00000000804001000000000080400100000000000000000000000000f03f8081ffffffff00a080010000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000009b428881ffffffff4600000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000
</code></p>

<h2>目錄</h2>

<ul>
<li><a href="#qxg-env">測試環境</a></li>
<li><a href="#qxg-prepare">buildroot 事先準備</a></li>
<li><a href="#qxg-fix">gdb 錯誤訊息解法</a></li>
<li><a href="#qxg-pkg">懶人包</a>

<ul>
<li><a href="#qxg-tty">讓qemu-system-x86_64 在console 可以登入</a></li>
</ul>
</li>
<li><a href="#qxg-ref">參考資料</a></li>
</ul>


<p><a name="qxg-env"></a></p>

<h2>測試環境</h2>

<ul>
<li><a href="https://git.buildroot.net/buildroot">Buildroot</a>

<ul>
<li>Commit: <code>bfc90a5621c680000f8b19e8afea944da5c2a469</code></li>
</ul>
</li>
<li>Target kernel 版本</li>
</ul>


<pre><code># uname -a
Linux buildroot 4.9.6 #2 SMP Sun Jun 4 18:46:27 CST 2017 x86_64 GNU/Linux
</code></pre>

<ul>
<li>Qemu 執行指令</li>
</ul>


<pre><code>$ qemu-system-x86_64 -M pc -kernel output/images/bzImage                        \
                     -drive file=output/images/rootfs.ext2,if=virtio,format=raw \
                     -append "root=/dev/vda console=ttyS0"                      \
                     -net nic,model=virtio -net user -nographic -S -s
</code></pre>

<p>基本上是從<a href="https://git.buildroot.net/buildroot/tree/board/qemu/x86_64/readme.txt">這邊</a>衍生出來的，挑幾個重點</p>

<ul>
<li><code>-append "root=/dev/vda console=ttyS0"</code>

<ul>
<li>指定serial port console，如此一來就可以在terminal 直接顯示Qemu 的執行文字，不過你需要<a href="#qxg-tty">修改</a>rootfs 的<code>/etc/inittab</code>才能在terminal login</li>
</ul>
</li>
<li><code>-S -s</code>

<ul>
<li>開機的時候就停下來，並開啟port 1234讓gdb從遠端連入除錯</li>
</ul>
</li>
<li><code>-nographic</code>

<ul>
<li>懶得跳一個視窗，直接terminal當console使用</li>
</ul>
</li>
</ul>


<p><a name="qxg-prepare"></a></p>

<h2>buildroot 事先準備</h2>

<ol>
<li>下載buildroot

<ul>
<li><code>git clone https://git.buildroot.net/buildroot</code></li>
</ul>
</li>
<li>設定預設config

<ul>
<li><code>make qemu_x86_64_defconfig</code></li>
</ul>
</li>
<li>手動設定buildroot config如gcc版本，客製化rootfs套件等

<ul>
<li><code>make menuconfig</code></li>
</ul>
</li>
<li>設定Linux kernel 選項，主要是打開debug symbol

<ul>
<li><code>make linux-menuconfig</code></li>
</ul>
</li>
<li>編譯rootfs及kernel

<ul>
<li><code>make</code></li>
</ul>
</li>
<li><a href="#qxg-tty">設定可以從console 登入</a></li>
</ol>


<p><a name="qxg-fix"></a></p>

<h2>gdb 錯誤訊息解法</h2>

<p>從<a href="http://wiki.osdev.org/QEMU_and_GDB_in_long_mode">OSDev: QEMU and GDB in long mode</a>可以看到可以使用下面指令頂著先（workaround）</p>

<ul>
<li><code>disconnect</code></li>
<li><code>set arch i386:x86-64</code></li>
<li><code>target remote 127.0.0.1:1234</code></li>
</ul>


<p>然而作為組裝工，信奉偷懶就是美德，每次要打這麼多指令實在很麻煩。因此我將這些麻煩的方式使用下面的指令自動化</p>

<pre><code>gdb ./vmlinux  -ex "target remote localhost:1234"       \
               -ex "break x86_64_start_kernel"          \
               -ex "continue"                           \
               -ex "disconnect"                         \
               -ex "set architecture i386:x86-64:intel" \
               -ex "target remote localhost:1234"
</code></pre>

<p>執行後畫面輸出部份節錄如下
<code>
Reading symbols from ./vmlinux...done.
Remote debugging using localhost:1234
0x0000000000000000 in irq_stack_union ()
Breakpoint 1 at 0xffffffff8188429b: file arch/x86/kernel/head64.c, line 134.
Continuing.
Remote 'g' packet reply is too long: 9b428881ffffffff0000000000000000010100c000000000ffffffff00000000804001000000000080400100000000000000000000000000f03f8081ffffffff00a080010000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000009b428881ffffffff4600000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000
Ending remote debugging.
The target architecture is assumed to be i386:x86-64:intel
Remote debugging using localhost:1234
x86_64_start_kernel (real_mode_data=0x14080 &lt;cpu_tss+6848&gt; &lt;error: Cannot access memory at address 0x14080&gt;) at arch/x86/kernel/head64.c:134
134 {
(gdb) n
151     cr4_init_shadow();
</code></p>

<p>由於gdb command file 遇到錯誤就會停下來，所以把上面的指令放到一個檔案中，執行gdb時將會停在<code>continue</code>這邊，目前懶的找解法了。有興趣的朋友可以自行研究。</p>

<p><a name="qxg-pkg"></a></p>

<h2>懶人包</h2>

<ul>
<li><p>Buildroot
<code>
git clone https://git.buildroot.net/buildroot
cd buildroot
make qemu_x86_64_defconfig
make menuconfig
make linux-menuconfig
make
</code></p></li>
<li><p>啟動Qemu
假設在buildroot top directory下
<code>
qemu-system-x86_64 -M pc -kernel output/images/bzImage                          \
                   -drive file=output/images/rootfs.ext2,if=virtio,format=raw \
                   -append "root=/dev/vda console=ttyS0"                      \
                   -net nic,model=virtio -net user -nographic -S -s
</code></p></li>
<li><p>gdb
假設在buildroot top directory下
<code>
cd output/build/linux-4.9.6
gdb ./vmlinux  -ex "target remote localhost:1234"       \
             -ex "break x86_64_start_kernel"          \
             -ex "continue"                           \
             -ex "disconnect"                         \
             -ex "set architecture i386:x86-64:intel" \
             -ex "target remote localhost:1234"
</code></p></li>
</ul>


<p><a name="qxg-tty"></a></p>

<h3>讓qemu-system-x86_64 在console 可以登入</h3>

<p>在<code>/etc/inittab</code>加入下面這行<code>ttyS0::respawn:/sbin/getty -L  ttyS0 0 vt100 # GENERIC_SERIAL</code></p>

<pre><code class="text /etc/inittab"> # Put a getty on the serial port
 tty1::respawn:/sbin/getty -L  tty1 0 vt100 # GENERIC_SERIAL
+ttyS0::respawn:/sbin/getty -L  ttyS0 0 vt100 # GENERIC_SERIAL
</code></pre>

<p><a name="qxg-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://wiki.osdev.org/QEMU_and_GDB_in_long_mode">OSDev: QEMU and GDB in long mode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel Pratice 0.5: 使用gdb 加 Qemu Trace Linux Kernel Runtime 行為]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/31/trace-linux-kernel-via-qemu-and-gdb/"/>
    <updated>2016-10-31T19:46:25+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/31/trace-linux-kernel-via-qemu-and-gdb</id>
    <content type="html"><![CDATA[<h2>目錄</h2>

<ul>
<li><a href="#lk0_5_env">測試環境</a></li>
<li><a href="#lk0_5_kr">Linux kernel環境設定</a></li>
<li><a href="#lk0_5_test">測試</a>

<ul>
<li><a href="#lk0_5_test_qemu">Qemu</a></li>
<li><a href="#lk0_5_test_gdb">gdb</a></li>
</ul>
</li>
<li><a href="#lk0_5_ref">參考資料</a></li>
<li><a href="#lk0_5_add">補充</a></li>
</ul>


<p><a name="lk0_5_env"></a></p>

<h2>測試環境</h2>

<h3>Host</h3>

<ul>
<li>Host OS</li>
</ul>


<pre><code class="sh">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</code></pre>

<ul>
<li>Qemu</li>
</ul>


<pre><code class="sh">$ qemu-system-arm --version
QEMU emulator version 2.0.0 (Debian 2.0.0+dfsg-2ubuntu1.27), Copyright (c) 2003-2008 Fabrice Bellard
</code></pre>

<ul>
<li>gdb</li>
</ul>


<pre><code class="text">$ arm-none-eabi-gdb --version
GNU gdb (GNU Tools for ARM Embedded Processors) 7.10.1.20160923-cvs
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl
...
</code></pre>

<ul>
<li>buildroot 版本

<ul>
<li>commit hash: <code>14b24726a81b719b35fee70c8ba8be2d682a7313</code></li>
</ul>
</li>
</ul>


<h3>Target</h3>

<ul>
<li>Linux kernerl 版本

<ul>
<li>4.4.2</li>
</ul>
</li>
<li>模擬平台

<ul>
<li>Vexpress</li>
</ul>
</li>
</ul>


<p><a name="lk0_5_kr"></a></p>

<h2>Linux kernel環境設定</h2>

<p>我目前只打開加入debug資訊的選項。接下來重編，編譯的方式請參考<a href="/blog/2016/10/01/linux-kernel-pratice-0-buildroot-2-customized-kernel/">這邊</a></p>

<ul>
<li>Kernel hacking -> Compile-time checks and compiler options ->

<ul>
<li>Compile the kernel with debug info</li>
</ul>
</li>
</ul>


<p><a name="lk0_5_test"></a></p>

<h2>測試</h2>

<p>依照下面兩個步驟執行</p>

<ol>
<li>執行qemu，並且加入支援gdb以及開始馬上freeze CPU的參數</li>
<li>執行gdb，載入symbol並聯到qemu除錯</li>
</ol>


<p><a name="lk0_5_test_qemu"></a></p>

<h3>Qemu</h3>

<p>基本上就是原本的指令加入兩個選項</p>

<ul>
<li><code>-S</code>

<ul>
<li>qemu一開始立即Freeze CPU</li>
</ul>
</li>
<li><code>-s</code>

<ul>
<li><code>-gdb tcp::1234</code>的縮寫，也就是說gdb可以透過port 1234和連到Qemu除錯</li>
</ul>
</li>
</ul>


<p>假設你在buildroot最上層，就可以使用下面指令執行qemu 並使用gdb 除錯</p>

<pre><code class="text">qemu-system-arm -M vexpress-a9 -smp 1 -m 256 \
                -kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage  \
                -dtb /tmp/kernel/linux-stable/vexpress-v2p-ca9.dtb     \
                -drive file=output/images/rootfs.ext2,if=sd,format=raw \
                -append "console=ttyAMA0,115200 root=/dev/mmcblk0"     \
                -serial stdio -net nic,model=lan9118 -net user -s -S
</code></pre>

<p><a name="lk0_5_test_gdb"></a></p>

<h3>gdb</h3>

<p>這邊有點瑣碎，先講一下步驟</p>

<ol>
<li>載入Linux kernel symbol

<ul>
<li>假設你在kernel最上層目錄有三種方式載入

<ul>
<li>直接<code>arm-none-eabi-gdb ./vmlinux</code></li>
<li><code>arm-none-eabi-gdb -ex "file ./vmlinux"</code></li>
<li>進入gdb後打<code>file ./vmlinux</code>指令</li>
</ul>
</li>
</ul>
</li>
<li>連上qemu

<ul>
<li>一樣兩種方式

<ul>
<li><code>arm-none-eabi-gdb -ex "target remote :1234"</code></li>
<li>進入gdb後打<code>target remote :1234</code>指令</li>
</ul>
</li>
</ul>
</li>
<li>設定breakpoint等你要觀察的資訊

<ul>
<li>如<code>b printk</code></li>
</ul>
</li>
<li>告訴qemu開始執行

<ul>
<li><code>continue</code></li>
</ul>
</li>
</ol>


<p>1和2可以一起使用如下</p>

<pre><code class="text 懶人包">arm-none-eabi-gdb -ex "file ./vmlinux"  -ex "target remote :1234"
</code></pre>

<p>現在看一下操作範例</p>

<pre><code class="text">$ arm-none-eabi-gdb -ex "file ./vmlinux"  -ex "target remote :1234"
GNU gdb (GNU Tools for ARM Embedded Processors) 7.10.1.20160923-cvs
...
Reading symbols from ./vmlinux...done.
Remote debugging using :1234
0x60000000 in ?? ()
(gdb) b printk
Breakpoint 1 at 0x800a2260: file kernel/printk/printk.c, line 1900.
(gdb) c
Continuing.

Breakpoint 1, printk (fmt=0x0 &lt;__vectors_start&gt;) at kernel/printk/printk.c:1900
1900    {
(gdb) bt
#0  printk (fmt=0x0 &lt;__vectors_start&gt;) at kernel/printk/printk.c:1900
#1  0x806178e0 in start_kernel () at init/main.c:508
#2  0x6000807c in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
</code></pre>

<p>另外如果有興趣使用Linux kernel提供的指令，在kernel config設定打開gdb script後，可以使用下面的方式在啟動gdb時載入，只要把下面的描述加到你的<code>~/.gdbinit</code>即可</p>

<pre><code>add-auto-load-safe-path /tmp/kernel/scripts/gdb/vmlinux-gdb.py
</code></pre>

<p>那麼你就可以使用Linux kernel提供的gdb script，詳細的設定和指令說明在<a href="http://lxr.free-electrons.com/source/Documentation/gdb-kernel-debugging.txt?v=4.4">這邊</a>。</p>

<p><a name="lk0_5_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel">Linux Magazine: Qemu and the Kernel</a></li>
<li><a href="http://lxr.free-electrons.com/source/Documentation/gdb-kernel-debugging.txt?v=4.4">Linux kernel document (4.4): Debugging kernel and modules via gdb</a>

<ul>
<li>感謝學弟ajmachine 回報，原本<a href="https://www.kernel.org/doc/Documentation/gdb-kernel-debugging.txt">官方網站連結</a>失效，找一個代替。</li>
</ul>
</li>
<li><a href="http://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu">stackoverflow: How to debug the Linux kernel with GDB and QEMU?</a></li>
</ul>


<p><a name="lk0_5_add"></a></p>

<h2>補充</h2>

<p>當初犯了蠢事載入不正確的kernel image導致一堆不必要的除錯。不過多學到一個gdb Python script除錯指令，當Python script發生exception時可以用下面的指令印出Python錯誤call stack</p>

<ul>
<li>gdb內：<code>set python print-stack full</code></li>
<li>啟動gdb時加入參數： <code>-ex "set python print-stack full"</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用gdb 靜態分析C 語言名稱和參數相同函數的原始檔位置]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/03/locate-function-source-code-via-gdb/"/>
    <updated>2016-10-03T14:36:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/03/locate-function-source-code-via-gdb</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>感謝<a href="http://scottt.tw/">Scott</a>大大的資訊。</p>

<p>忘記那邊看過的名言：「手上有了新玩具，就會想要馬上拿來用。」</p>

<h2>動機</h2>

<p>組裝軟體的時候，有一件事很讓我困擾。那就是當整包SDK有兩個以上名稱和參數相同的函數的時候。當這種情況發生時，trace code就很麻煩，你必須要花時間釐清到底最後會使用到那一個函數。而這些config可能用下面兩種方式切換這些名稱和參數相同的函數：</p>

<ol>
<li>巨集

<ul>
<li><code>#if</code></li>
<li><code>#ifdef</code></li>
</ul>
</li>
<li>Makefile

<ul>
<li>在檔案中根據不同變數編譯不同的檔案</li>
</ul>
</li>
</ol>


<p>我以前會視情況用下面兩種方法找到該函數編譯實際使用的原始檔位置</p>

<ol>
<li>下毒藥，只要相同名字的函數都塞入<code>#error 可以辨別的字串</code>。編譯時根據錯誤訊息判斷使用哪個函數</li>
<li>gdb設斷點，runtime透過中斷函數的方式取得函數的檔案和行號</li>
</ol>


<p>不過<a href="http://scottt.tw/">Scott</a>大大的今天給的資訊讓我可以更省力的處理這個問題了。</p>

<p>如果只想要知道用法，看完下面指令就可以收工回家了。</p>

<pre><code class="sh">gdb -ex 'file 你的執行檔或是shared library檔' -ex 'info line 要查的函數' -ex 'quit'
</code></pre>

<p>當然用<code>gdb</code>編譯時不要忘記加debug option。</p>

<h2>目錄</h2>

<ul>
<li><a href="#gds_env">測試環境</a></li>
<li><a href="#gds_files">測試檔案</a>

<ul>
<li><a href="#gds_files_1">test_same_func.c</a></li>
<li><a href="#gds_files_2">same_func1.c</a></li>
<li><a href="#gds_files_3">same_func2.c</a></li>
<li><a href="#gds_files_mk">Makefile</a></li>
</ul>
</li>
<li><a href="#gds_test">測試結果</a></li>
<li><a href="#gds_ref">延伸資料</a></li>
</ul>


<p><a name="gds_env"></a></p>

<h2>測試環境</h2>

<pre><code class="text">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</code></pre>

<p><a name="gds_files"></a></p>

<h2>測試檔案</h2>

<p>簡單來說，就是實作切換兩種方式同樣名稱和參數的函數：</p>

<ol>
<li>巨集</li>
<li>Makefile</li>
</ol>


<p>所以我們會有</p>

<ol>
<li><a href="#gds_files_1">測試檔案進入點</a></li>
<li><a href="#gds_files_2">測試檔一</a>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和測試檔二完全一模一樣</li>
</ul>
</li>
<li><a href="#gds_files_3">測試檔二</a>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和測試檔一完全一模一樣</li>
</ul>
</li>
<li><a href="#gds_files_mk">Makefile</a>

<ul>
<li>除了編譯以外，還提供兩個變數，由command line傳入

<ul>
<li>USE_FILE=1

<ul>
<li>沒傳入時預設編譯<font color="red"><strong>測試檔二</strong></font>，當該參數傳入<code>USE_FILE=1</code>時會變成編譯<font color="red"><strong>測試檔一</strong></font></li>
</ul>
</li>
<li>EN_OP1=1

<ul>
<li>當該參數傳入時才會開啟<code>OP1</code>巨集</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>


<p><a name="gds_files_1"></a></p>

<h3>test_same_func.c</h3>

<ul>
<li>測試檔案進入點，呼叫func1()。func1()在compile time才被決定</li>
</ul>


<pre><code class="c test_same_func.c">#include &lt;stdio.h&gt;
extern void func1(void);

int main()
{
    printf("Hello World\n");
    func1();

    return 0;
}
</code></pre>

<p><a name="gds_files_2"></a></p>

<h3>same_func1.c</h3>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和<a href="#gds_files_2">same_func2</a>完全一模一樣</li>
</ul>


<pre><code class="c same_func1.c">#include &lt;stdio.h&gt;

#if OP1
void func1(void)
{
    printf("%s: %s_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#else
void func1(void)
{
    printf("%s: %s_NOT_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#endif
</code></pre>

<p><a name="gds_files_3"></a></p>

<h3>same_func2.c</h3>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和<a href="#gds_files_1">same_func1</a>完全一模一樣</li>
</ul>


<pre><code class="c same_func2.c">#include &lt;stdio.h&gt;

#if OP1
void func1(void)
{
    printf("%s: %s_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#else
void func1(void)
{
    printf("%s: %s_NOT_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#endif
</code></pre>

<p><a name="gds_files_mk"></a></p>

<h3>Makefile</h3>

<p>提供兩個變數，由command line傳入</p>

<ul>
<li>USE_FILE=1

<ul>
<li>沒傳入時預設編譯<font color="red"><strong>測試檔二</strong></font>，當該參數傳入<code>USE_FILE=1</code>時會變成編譯<font color="red"><strong>測試檔一</strong></font></li>
</ul>
</li>
<li>EN_OP1=1

<ul>
<li>當該參數傳入時才會開啟<code>OP1</code>巨集</li>
</ul>
</li>
</ul>


<pre><code class="makefile">CFLAGS+=-Wall -Werror -g3
TARGET=test_same_func
SRCS=test_same_func.c

ifeq ($(USE_FILE), 1)
    SRCS += same_func1.c
else
    SRCS += same_func2.c
endif

ifeq ($(EN_OP1), 1)
    CFLAGS += -DOP1=1
endif

OBJS=$(patsubst %.c, %.o, $(SRCS))

$(TARGET): $(OBJS)
    $(CC) -o $@ $^
    gdb -ex 'file $@' -ex 'info line func1' -ex 'quit'

%.o: %.c
    $(CC) $(CFLAGS) -c $^

clean:
    rm *.o *~ $(TARGET) -f
</code></pre>

<p><a name="gds_test"></a></p>

<h2>測試結果</h2>

<p>前面提過，<code>func1()</code>的實作受兩個變數影響，分別為</p>

<ol>
<li>巨集<code>OP1</code>是否有設定

<ul>
<li>只有<code>OP1</code> 被設定<strong>並且</strong>非零時才會進入<code>OP1</code>的<code>func1()</code></li>
</ul>
</li>
<li>Makefile變數<code>USE_FILE</code>是否有設定

<ul>
<li>只有<code>USE_FILE</code>為1的時候才會使用<code>same_func1.c</code>，其他情形都編譯<code>same_func2.c</code></li>
</ul>
</li>
</ol>


<p>所以我們make 指令有下面四種變化</p>

<ol>
<li><a href="">巨集<code>OP1</code>和<code>USE_FILE</code>都沒設定</a></li>
<li><a href="">設定巨集<code>OP1</code>，<code>USE_FILE</code>沒設定</a></li>
<li><a href="">巨集<code>OP1</code>沒設定，但是設定<code>USE_FILE</code></a></li>
<li><a href="">全部設定巨集<code>OP1</code>和<code>USE_FILE</code></a></li>
</ol>


<p><a name=""></a></p>

<h3>巨集<code>OP1</code>和<code>USE_FILE</code>都沒設定</h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func2.c</code></li>
<li>使用非<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean 
default settings: OP1 disable and use same_func1.c
rm *.o *~ test_same_func -f

$ make
cc -Wall -Werror -g3 -c test_same_func.c
cc -Wall -Werror -g3 -c same_func2.c
cc -o test_same_func test_same_func.o same_func2.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 11 of "same_func2.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func2.c: func1_NOT_OP1
</code></pre>

<p><a name=""></a></p>

<h3>設定巨集<code>OP1</code>，<code>USE_FILE</code>沒設定</h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func2.c</code></li>
<li>使用<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make EN_OP1=1
cc -Wall -Werror -g3 -DOP1=1 -c test_same_func.c
cc -Wall -Werror -g3 -DOP1=1 -c same_func2.c
cc -o test_same_func test_same_func.o same_func2.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 5 of "same_func2.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func2.c: func1_OP1
</code></pre>

<p><a name=""></a></p>

<h3>巨集<code>OP1</code>沒設定，但是設定<code>USE_FILE</code></h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func1.c</code></li>
<li>使用非<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make USE_FILE=1
cc -Wall -Werror -g3 -c test_same_func.c
cc -Wall -Werror -g3 -c same_func1.c
cc -o test_same_func test_same_func.o same_func1.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 11 of "same_func1.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func1.c: func1_NOT_OP1
</code></pre>

<p><a name=""></a></p>

<h3>全部設定巨集<code>OP1</code>和<code>USE_FILE</code></h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func1.c</code></li>
<li>使用<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make EN_OP1=1 USE_FILE=1
cc -Wall -Werror -g3 -DOP1=1 -c test_same_func.c
cc -Wall -Werror -g3 -DOP1=1 -c same_func1.c
cc -o test_same_func test_same_func.o same_func1.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 5 of "same_func1.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func1.c: func1_OP1
</code></pre>

<p><a name="gds_ref"></a></p>

<h2>延伸資料</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1w1nPmCLpeRN3kEYglzHwozhWXY0ddT9oe6JCZocsPNE/edit">Using GDB to Help You Read Linux Kernel Code without Running It</a>

<ul>
<li><a href="http://scottt.tw/">Scott</a>大大的文件，描述使用gdb 靜態分析Linux kernel的技巧</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
