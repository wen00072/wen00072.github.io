<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cmake | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/cmake/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2020-02-09T16:29:47+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GNU Make, Autotools, CMake 簡介投影片上線]]></title>
    <link href="http://wen00072.github.io/blog/2014/07/09/gnu-make-autotools-and-cmake-introduction-slides-on-line/"/>
    <updated>2014-07-09T17:39:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/07/09/gnu-make-autotools-and-cmake-introduction-slides-on-line</id>
    <content type="html"><![CDATA[<ul>
<li>Slideshare</li>
</ul>


<iframe src="//www.slideshare.net/slideshow/embed_code/36801801" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/zzz00072/gnu-make-autotools-cmake" title="GNU Make, Autotools, CMake 簡介" target="_blank">GNU Make, Autotools, CMake 簡介</a> </strong> from <strong><a href="http://www.slideshare.net/zzz00072" target="_blank">Wen Liao</a></strong> </div></p>

<ul>
<li>Speaker Deck</li>
</ul>


<script async class="speakerdeck-embed" data-id="46ad0fc0e9c001313be5762c67c15dde" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMake 初探]]></title>
    <link href="http://wen00072.github.io/blog/2014/06/01/study-on-cmake/"/>
    <updated>2014-06-01T05:06:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/06/01/study-on-cmake</id>
    <content type="html"><![CDATA[<h2>目錄</h2>

<ul>
<li><a href="#ov">概論</a></li>
<li><a href="#cmx-syntax">CMakeLists.txt語法簡介</a>

<ul>
<li><a href="#cmx-syntax-str">字串和list</a></li>
<li><a href="#cmx-syntax-flow">流程控制</a></li>
<li><a href="#cmx-syntax-macro">巨集和函數</a></li>
<li><a href="#cmx-syntax-quo">Quotation</a></li>
<li><a href="#cmx-syntax-install">專案產生檔案安裝</a></li>
</ul>
</li>
<li><a href="#ex">範例: 產生執行檔和函式庫</a>

<ul>
<li><a href="#ex-prg">範例程式</a>

<ul>
<li><a href="#ex-1">第一版：單一程式沒有函數庫</a></li>
</ul>
</li>
<li><a href="#ex-2">第二版：加入編譯函式庫</a></li>
<li><a href="#ex-3">第三版：每個目錄單獨編譯</a></li>
<li><a href="#ex-4">第四版：加入安裝產生的檔案描述</a></li>
</ul>
</li>
<li><a href="#concl">總結</a></li>
<li><a href="#ref">參考資料</a></li>
</ul>


<hr />

<p><a name="ov"></a></p>

<h2>概論</h2>

<p>CMake是1999年推出的開源自由軟體計劃，目的是提供不同平台之間共同的編譯環境。他的特點有：</p>

<ul>
<li>支援不同平台。</li>
<li><strong>可以</strong>將Build和原本程式碼分開。不分開稱為in-place build，而分開的情況稱為out-place build。out-place build的附加功能就是同樣一包套件可以同時編譯成不同平台的binary並且分別放在不同的目錄中。</li>
<li>支援cache加快編譯速度。</li>
</ul>


<p>CMake的執行流程簡單來說是</p>

<ul>
<li>開發者使用CMake語法寫編譯描述，存到CMakeLists.txt。</li>
<li>使用者執行cmake，cmake首先會根據開發描述的規格產生該平台對應的編譯環境檔案如Makefile等。</li>
<li>使用者執行make或是平台上的編譯方法產生最後的結果。</li>
<li>使用者執行cmake install安裝軟體。</li>
</ul>


<p>另外一點值得注意的是cmake本身沒有提供uninstall功能。</p>

<hr />

<p><a name="cmx-syntax"></a></p>

<h2>CMakeLists.txt 語法簡介</h2>

<p>CMake語法的格式為<code>命令字串(參數)</code>，而相關規範可以分為「list和字串」、「變數」、「流程控制」、「Quotation」。分別討論如下：</p>

<hr />

<p><a name="cmx-syntax-str"></a></p>

<h3>list和字串</h3>

<p>CMake的基本單位是字串，而多個字串可以透過空白或是<code>;</code>組合成字串list。</p>

<p>有興趣的可以直接剪貼下面程式存成CMakeLists.txt後下cmake .看看結果。</p>

<pre><code class="CMake CMakeLists.txt">set(xxx a b c d)
message(${xxx})
set(xxx e;f;g;h)
message(${xxx})
</code></pre>

<hr />

<p><a name="cmx-syntax-var"></a></p>

<h3>變數</h3>

<p>變數使用<code>set</code>命令設定，格式為<code>set(變數名稱　指定的值)</code>。使用<code>${變數名稱}</code>取值。</p>

<p>有興趣的可以直接剪貼下面程式存成CMakeLists.txt後下cmake .看看結果。</p>

<pre><code class="CMake CMakeLists.txt">set(xxx a b c d)
message(${xxx})
set(xxx e;f;g;h)
message(${xxx})
</code></pre>

<p>另外<a href="http://www.cmake.org/Wiki/CMake_Useful_Variables">這邊</a>也列出了CMake內建好用的變數。</p>

<hr />

<p><a name="cmx-syntax-flow"></a></p>

<h3>流程控制</h3>

<p>流程控制又可以分成條件執行、迴圈、和巨集等情況討論：</p>

<hr />

<h4>條件執行</h4>

<p>直接看範例，這個範例單純從command line吃變數值，做字串比對。</p>

<pre><code class="CMake CMakeLists.txt">if ( NOT DEFINED test)
    message("Use: cmake -Dtest:STRING=val to test")
elseif(${test} STREQUAL yes)
    message("if: ${test}")
elseif(${test} STREQUAL test1)
    message("else if: ${test}")
else()
    message("else: ${test}")
endif()
</code></pre>

<p>有幾點需要說明：</p>

<ul>
<li><code>DEFINED</code>判斷是否該變數有被定義。</li>
<li>command透過<code>-D變數名稱：變數型態=變數值</code>來設定CMakeList.txt內部的變數。</li>
<li>條件判斷方法順序可以參考<a href="http://www.cmake.org/cmake/help/v2.8.7/cmake.html#command:if">這邊</a>。簡單翻譯一下：

<ul>
<li>先處理：EXISTS, COMMAND, DEFINED</li>
<li>再來是：EQUAL, LESS, GREATER, STRLESS, STRGREATER, STREQUAL, MATCHES</li>
<li>接下來是：NOT</li>
<li>最後才是：AND, OR</li>
</ul>
</li>
</ul>


<hr />

<h5>cache的補充</h5>

<p>我們第一次 <strong>不從command 帶參數</strong> 執行結果:
<code>
$ cmake  .
-- The C compiler identification is GNU
...
Use: cmake -Dtest:STRING=val to test
</code></p>

<p>接下來我們從command <strong>帶參數</strong> 重新執行一次：
<code>
$ cmake  . -Dtest:STRING=yes
if: yes
</code>
然後 <strong>不從command 帶參數</strong> 再執行會發現test變數變成yes了
<code>
$ cmake  .
if: yes
</code>
看一下目前目錄會發現新的檔案<code>CMakeCache.txt</code>，找一下裏面的字串<code>test</code>會看到
<code>
$ grep test CMakeCache.txt
...
test:STRING=yes
...
</code>
<strong>結論就是CMake的確有cache，而且不小心cache會影響到執行的結果。</strong>另外其實<code>set(..)</code>裏面也可以cache行為的相關參數，這邊就先跳過不談。</p>

<hr />

<h4>迴圈</h4>

<p>兩種為主，<code>foreach</code>和<code>while</code>，直接看範例。</p>

<ul>
<li><code>foreach</code>
為何有<code>cmake_minimum_required(VERSION 2.8)</code>呢？因為不打執行<code>cmake .</code>會產生警告。有興趣的可以打<code>cmake --help-policy CMP0000</code>看說明。</li>
</ul>


<pre><code class="CMake CMakeLists.txt">cmake_minimum_required(VERSION 2.8)

set(xxx e;f;g;h)

foreach(i ${xxx})
    message(${i})
endforeach()
</code></pre>

<p>執行結果如下：
<code>
$ cmake .
e
f
g
h
</code></p>

<ul>
<li>while
一個0~9的迴圈，需要透過<a href="http://www.cmake.org/cmake/help/v2.8.7/cmake.html#command:math">math command</a>做四則運算。</li>
</ul>


<pre><code class="CMake CMakeLists.txt">cmake_minimum_required(VERSION 2.8)
set(i 0)
while(i LESS 10)
    message(${i})
    math(EXPR i "${i} + 1")
endwhile()
</code></pre>

<hr />

<p><a name="cmx-syntax-macro"></a></p>

<h4>巨集和函數</h4>

<p>這兩個差別是<strong>在函數內產生的變數scope只存在函數內，而巨集是全域的。</strong>直接看範例，範例中的巨集和函數都是在內部產生變數並且印出傳進來的參數。可以仔細看輸出結果的確函數內的變數呼叫完後就消失了。</p>

<pre><code class="CMake CMakeLists.txt">cmake_minimum_required(VERSION 2.8)
macro(mac_print msg)
    set(mac "macro")
    message("${mac}: ${msg}")
endmacro(mac_print)

function(func_print msg)
    set (func "func")
    message("${func}: ${msg}")
endfunction(func_print)

mac_print("test macro")
message("check var in macro: ${mac}")
func_print("test function")
message("check var in function: ${func}")
</code></pre>

<p>執行結果如下
<code>
$ cmake .
macro: test macro
check var in macro: macro
func: test function
check var in function:
</code></p>

<hr />

<p><a name="cmx-syntax-quo"></a></p>

<h3>Quotation</h3>

<ul>
<li>字串可以用成對的<code>"</code>表示</li>
<li>支援C語言型態控制字元如<code>\n``\t</code></li>
<li>可以使用跳脫字元顯示特殊意義符號如<code>\${var}</code>印出來就是<code>${VAR}</code></li>
</ul>


<p>&ndash;
<a name="cmx-syntax-install"></a></p>

<h3>專案產生檔案安裝</h3>

<p>簡單的語法如下，詳細資料請參考<a href="http://www.cmake.org/Wiki/CMake:Install_Commands">這邊</a></p>

<ul>
<li>執行檔安裝(一般安裝目錄路徑：bin)

<ul>
<li><code>install(TARGETS 執行檔名稱 DESTINATION 安裝目錄路徑)</code></li>
</ul>
</li>
<li>函式庫安裝(一般安裝目錄路徑：lib)

<ul>
<li><code>install(TARGETS 函式庫名稱 LIBRARY DESTINATION 安裝目錄路徑)</code></li>
</ul>
</li>
<li>Header 檔安裝(一般安裝目錄路徑：include)

<ul>
<li><code>install(FILES Header檔名稱 DESTINATION 安裝目錄路徑)</code></li>
</ul>
</li>
</ul>


<p>這些安裝描述都是允許多個檔案。另外你可以在執行cmake帶<code>-DCMAKE_INSTALL_PREFIX=安裝目錄</code>指定安裝的top目錄，或是<code>make DESTDIR=安裝目錄</code>也有同樣效果。</p>

<hr />

<p><a name="ex"></a></p>

<h2>範例: 產生執行檔和函式庫</h2>

<p>前面有提到<strong>in-place</strong>和<strong>out-place</strong>的編譯方式。他們方式的差別是：</p>

<ul>
<li>in-place: 直接在CMakeLists.txt那層下<code>cmake . &amp;&amp; make</code></li>
<li>out-place: 直接在CMakeLists.txt那層下<code>mkdir build &amp;&amp; cd build &amp;&amp; cmake ../ &amp;&amp; make</code>

<ul>
<li>build是慣用名稱，不需要強制使用。</li>
</ul>
</li>
</ul>


<hr />

<p><a name="ex-prg"></a></p>

<h3>範例程式</h3>

<p><a href="http://wen00072.github.io/blog/2014/06/07/dry-test-file-template">範例程式細節在這邊</a>，檔案各別分配到<code>src</code>, <code>include</code>, <code>libs</code>這三個目錄。不想看code只要知道每個檔案都有參考到某個自訂的header file就好了。</p>

<ul>
<li>測試環境：Ubuntu 12.04</li>
</ul>


<pre><code class="text 原始測試程式樹狀架構">├── include
│   ├── liba.h
│   └── libb.h
├── libs
│   ├── liba.c
│   └── libb.c
└── src
    └── test.c
</code></pre>

<hr />

<p><a name="ex-1"></a></p>

<h3>第一版：單一程式沒有函數庫</h3>

<p>先暖身一下，只要在project最上層放一個CMakeLists.txt就好了。</p>

<p>這版本CMakeLists.txt不難理解，就做</p>

<ul>
<li>填寫project資訊描述。</li>
<li>設定project相關header file路徑。</li>
<li>指定編譯要顯示細節，這是個人偏好習慣。</li>
<li>設定共用編譯參數，CMake可以更進一步地指定release mocde或debug mode的參數，以及指定套用這些參數檔案。</li>
<li>指定要編譯哪些檔案。</li>
<li>指定要編譯成執行檔</li>
</ul>


<p>top 目錄的CMakeLists.txt如下：
<figure class='code'><figcaption><span>top 目錄的CMakeLists.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='CMake'><span class='line'><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.8</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Project</span> <span class="err">data&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">project</span><span class="p">(</span><span class="s">testcmake</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Directories&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">SRC_DIR</span> <span class="s">src</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">LIB_DIR</span> <span class="s">libs</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">INC_DIR</span> <span class="s">include</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Release</span> <span class="err">mode&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_BUILD_TYPE</span> <span class="s">Debug</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Compile</span> <span class="err">flags&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_C_FLAGS</span> <span class="s">&amp;ldquo;-Wall</span> <span class="s">-Werror&amp;rdquo;</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;I</span> <span class="err">like</span> <span class="err">verbose,</span> <span class="err">must</span> <span class="err">after</span> <span class="err">project,</span> <span class="err">do</span> <span class="err">not</span> <span class="err">know</span> <span class="err">why&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_VERBOSE_MAKEFILE</span> <span class="s">true</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Where</span> <span class="err">to</span> <span class="err">include?&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">include_directories</span><span class="p">(</span><span class="o">${</span><span class="nv">INC_DIR</span><span class="o">}</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Files</span> <span class="err">to</span> <span class="err">compile&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">test_SRCS</span> <span class="o">${</span><span class="nv">SRC_DIR</span><span class="o">}</span><span class="s">/test.c</span> <span class="o">${</span><span class="nv">LIB_DIR</span><span class="o">}</span><span class="s">/liba.c</span> <span class="o">${</span><span class="nv">LIB_DIR</span><span class="o">}</span><span class="s">/libb.c</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_executable</span><span class="p">(</span><span class="o">${</span><span class="nv">PROJECT_NAME</span><span class="o">}</span> <span class="o">${</span><span class="nv">test_SRCS</span><span class="o">}</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這邊可以看到和原本的差別只有多了CMakeLists.txt檔而已。</p>

<pre><code>├── CMakeLists.txt
├── include
│   ├── liba.h
│   └── libb.h
├── libs
│   ├── liba.c
│   └── libb.c
└── src
    └── test.c
</code></pre>

<hr />

<p><a name="ex-2"></a></p>

<h3>第二版：加入編譯函式庫</h3>

<p>要編譯函式庫，要在top目錄下的CMakeLists.txt做以下的修改</p>

<ul>
<li><code>add_library(檔案名稱 函式庫名稱)</code>告訴CMake要搬把哪些檔案編譯函式庫

<ul>
<li>改成<code>add_library(檔案名稱 SHARED 函式庫名稱)</code>就變成shared library了。</li>
</ul>
</li>
<li><code>target_link_libraries(執行檔名稱 函式庫名稱)</code>

<ul>
<li>告訴系統最後link要把函式庫一起link進來。</li>
</ul>
</li>
</ul>


<p>top 目錄的CMakeLists.txt如下：
<figure class='code'><figcaption><span>top 目錄的CMakeLists.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='CMake'><span class='line'><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.8</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Project</span> <span class="err">data&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">project</span><span class="p">(</span><span class="s">testcmake</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Directories&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">SRC_DIR</span> <span class="s">src</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">LIB_DIR</span> <span class="s">libs</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">INC_DIR</span> <span class="s">include</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Release</span> <span class="err">mode&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_BUILD_TYPE</span> <span class="s">Debug</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Compile</span> <span class="err">flags&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_C_FLAGS</span> <span class="s">&amp;ldquo;-Wall</span> <span class="s">-Werror&amp;rdquo;</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;I</span> <span class="err">like</span> <span class="err">verbose,</span> <span class="err">must</span> <span class="err">after</span> <span class="err">project,</span> <span class="err">do</span> <span class="err">not</span> <span class="err">know</span> <span class="err">why&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_VERBOSE_MAKEFILE</span> <span class="s">true</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Where</span> <span class="err">to</span> <span class="err">include?&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">include_directories</span><span class="p">(</span><span class="o">${</span><span class="nv">INC_DIR</span><span class="o">}</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Build</span> <span class="err">libraries&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">liba_SRCS</span> <span class="o">${</span><span class="nv">LIB_DIR</span><span class="o">}</span><span class="s">/liba.c</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">libb_SRCS</span> <span class="o">${</span><span class="nv">LIB_DIR</span><span class="o">}</span><span class="s">/libb.c</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">add_library</span><span class="p">(</span><span class="s">a</span> <span class="s">SHARED</span> <span class="o">${</span><span class="nv">liba_SRCS</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_library</span><span class="p">(</span><span class="s">b</span> <span class="s">SHARED</span> <span class="o">${</span><span class="nv">libb_SRCS</span><span class="o">}</span><span class="p">)</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Build</span> <span class="err">binary&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nb">set</span><span class="p">(</span><span class="s">test_SRCS</span> <span class="o">${</span><span class="nv">SRC_DIR</span><span class="o">}</span><span class="s">/test.c</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_executable</span><span class="p">(</span><span class="o">${</span><span class="nv">PROJECT_NAME</span><span class="o">}</span> <span class="o">${</span><span class="nv">test_SRCS</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">target_link_libraries</span><span class="p">(</span><span class="o">${</span><span class="nv">PROJECT_NAME</span><span class="o">}</span> <span class="s">a</span> <span class="s">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<hr />

<p><a name="ex-3"></a></p>

<h3>第三版：每個目錄單獨編譯</h3>

<p>要做的事情很簡單，就是</p>

<ul>
<li>在<code>src</code>和<code>libs</code>下面加入CMakeLists.txt，描述編譯行為</li>
<li>把根目錄的對應編譯行為搬到子目錄的CMakeLists.txt</li>
<li>使用<code>add_subdirectory(子目錄名稱)</code>把要編譯的子目錄加進去</li>
</ul>


<p>所以我們現在目錄樹狀結構會變成src和lib目錄都有CMakeLists.txt</p>

<pre><code>├── CMakeLists.txt
├── include
│   ├── liba.h
│   └── libb.h
├── libs
│   ├── CMakeLists.txt
│   ├── liba.c
│   └── libb.c
├── readme.txt
└── src
    ├── CMakeLists.txt
    └── test.c
</code></pre>

<p>每個目錄的CMakeLists.txt列出如下</p>

<ul>
<li>CMakeLists.txt</li>
</ul>


<pre><code class="CMake CMakeLists.txt">cmake_minimum_required(VERSION 2.8)
# Project data
project(testcmake)

# Directories
set(SRC_DIR src)
set(LIB_DIR libs)
set(INC_DIR include)

# Release mode
set(CMAKE_BUILD_TYPE Debug)

# Compile flags
set(CMAKE_C_FLAGS "-Wall -Werror")

# I like verbose, must after project, do not know why
set(CMAKE_VERBOSE_MAKEFILE true)

# Where to include?
include_directories(${INC_DIR})

# Build library in libs directory or not?
# Dive into libs directory
add_subdirectory(${SRC_DIR})
add_subdirectory(${LIB_DIR})
</code></pre>

<ul>
<li>libs/CMakeLists.txt</li>
</ul>


<pre><code class="CMake libs/CMakeLists.txt"># Build binary, inherit setting from parent
set(liba_SRCS liba.c)
set(libb_SRCS libb.c)

add_library(a ${liba_SRCS})
add_library(b ${libb_SRCS})
</code></pre>

<ul>
<li>src/CMakeLists.txt</li>
</ul>


<pre><code class="CMake src/CMakeLists.txt"># Build binary
set(test_SRCS test.c)
add_executable(${PROJECT_NAME} ${test_SRCS})
target_link_libraries(${PROJECT_NAME} a b)
</code></pre>

<hr />

<p><a name="ex-4"></a></p>

<h2>第四版：加入安裝產生的檔案描述</h2>

<p>這邊就是單純把前面的install()命令套用到每一個目錄下的CMakeLists.txt。由於我們也要安裝header檔，所以在include目錄下面會新增CMakeLists.txt描述安裝header的細節。</p>

<p>所以我們現在目錄樹狀結構會變成每個目錄都有CMakeLists.txt
<code>
├── CMakeLists.txt
├── include
│   ├── CMakeLists.txt
│   ├── liba.h
│   └── libb.h
├── libs
│   ├── CMakeLists.txt
│   ├── liba.c
│   └── libb.c
├── readme.txt
└── src
    ├── CMakeLists.txt
    └── test.c
</code></p>

<p>而各CMakeLists.txt新增的描述為</p>

<ul>
<li>CMakeLists.txt</li>
</ul>


<pre><code class="CMake CMakeLists.txt">add_subdirectory(${INC_DIR})
</code></pre>

<ul>
<li>libs/CMakeLists.txt</li>
</ul>


<pre><code class="CMake libs/CMakeLists.txt">install(TARGETS a b LIBRARY DESTINATION lib)
</code></pre>

<ul>
<li>src/CMakeLists.txt</li>
</ul>


<pre><code class="CMake src/CMakeLists.txt">install(TARGETS ${PROJECT_NAME} DESTINATION bin)
</code></pre>

<ul>
<li>include/CMakeLists.txt</li>
</ul>


<pre><code class="CMake include/CMakeLists.txt">install(FILES liba.h libb.h DESTINATION include)
</code></pre>

<hr />

<h4>第四版執行結果</h4>

<pre><code class="text 第四版執行結果">$ cmake  ../  -DCMAKE_INSTALL_PREFIX=`pwd`/test &amp;&amp; make &amp;&amp; make install
...
$ tree test
test/
├── bin
│   └── testcmake
├── include
│   ├── liba.h
│   └── libb.h
└── lib
    ├── liba.so
    └── libb.so
</code></pre>

<hr />

<p><a name="concl"></a></p>

<h2>結論</h2>

<p>本篇文章簡單介紹了CMake的語法，以及示範用CMake產生執行檔和函式庫。但是CMake還有太多東西值得去注意，例如把字串代換到程式碼，config.h的建立，搜尋depend 套件等。這部份以後有緣份會用到再跟各位分享。</p>

<hr />

<p><a name="ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://www.cmake.org/">CMake 官方網站</a></li>
<li><a href="https://github.com/TheErk/CMake-tutorial">CMake-tutorial 投影片，強力推荐</a></li>
<li><a href="http://www.cmake.org/cmake/help/syntax.html">CMake Syntax</a></li>
<li><a href="http://blog.linux.org.tw/~jserv/archives/001991.html">「貓也會的 CMake」簡報上線</a></li>
<li><a href="http://www.cmake.org/Wiki/CMake">cmake 官方網站 wiki</a></li>
<li><a href="http://www.cmake.org/cmake/help/cmake_tutorial.html">CMake 官方網站:Tutorial</a></li>
<li><a href="http://en.wikipedia.org/wiki/CMake">Wikipedia: CMake</a></li>
<li><a href="http://www.cs.swarthmore.edu/~adanner/tips/cmake.php">CMake Howto</a></li>
<li><a href="http://zh.wikibooks.org/zh-tw/CMake_%E5%85%A5%E9%96%80/%E9%81%8B%E7%AE%97%E5%AD%90">CMake 入門/運算子</a></li>
<li><a href="http://stackoverflow.com/questions/12896988/passing-the-argument-to-cmake-via-command-prompt">Stackoverflow: Passing the argument to CMAKE via command prompt</a></li>
<li><a href="http://www.cmake.org/Wiki/CMake_Useful_Variables">CMake: Useful variables</a></li>
<li><a href="http://www.cmake.org/Wiki/CMake:Install_Commands">CMake: Install_Commands</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
