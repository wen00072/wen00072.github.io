<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Inline | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/inline/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-08-03T18:25:56+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C99的inline Function]]></title>
    <link href="http://wen00072.github.io/blog/2014/04/30/c99-inline-function/"/>
    <updated>2014-04-30T23:02:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/04/30/c99-inline-function</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Inline_function">inline function</a>是一個keyword，提醒compiler可以將function本體直接填入呼叫該function的位置。從<a href="http://en.wikipedia.org/wiki/Inline_expansion">這邊</a>可以看到，優點為</p>

<ul>
<li>減少呼叫function的overhead，如參數傳遞、回傳值處理等。</li>
<li>切換到function會jump，也就是會有branch的行為。因為CPU的pipeline和cache的特性，會影響效能。</li>
<li>經由代換程式碼，也許可以增加最佳化的可能性。</li>
</ul>


<p>廢話少說，先來一段程式碼。
測試環境</p>

<ul>
<li>Ubuntu 12.04.4</li>
<li>GCC 4.6.3</li>
</ul>


<pre><code class="c inline_test.c">#include &lt;stdio.h&gt;

inline void hello()
{
    printf("Hello World\n");
}

int main(void)
{
    hello();

    return 0;
}
</code></pre>

<p>可以正常編譯
<code>text build.log
$ cc -g -Wall -Werror -c -o inline_test.o inline_test.c
$ cc -g -Wall -Werror -o inline_test inline_test.o
</code></p>

<p>有趣的是，換成C99就會編譯錯誤，檢查symbol的確不存在。
<code>``text build.log
cc -g -Wall -Werror -std=c99   -c -o inline_test.o inline_test.c
cc -g -Wall -Werror -std=c99 -o inline_test inline_test.o
inline_test.o: In function</code>main&#8217;:
inline_test.c:10: undefined reference to `hello&#8217;
collect2: ld returned 1 exit status
make: *** [inline_test] Error 1</p>

<p>$ nm inline_test.o
                 U hello
0000000000000000 T main
&#8220;`</p>

<p>從<a href="http://stackoverflow.com/questions/216510/extern-inline/216546#21654">這邊</a>可以看到C99的<code>inline</code>定義是和GNU C的<code>extern inline</code>相反。所以最簡單的懶人法就是在C99裏面加上<code>extern</code>收工。</p>

<pre><code class="c inline_test_c99.c">#include &lt;stdio.h&gt;

extern inline void hello()
{
    printf("Hello World\n");
}

int main(void)
{
    hello();

    return 0;
}
</code></pre>

<hr />

<h2>加碼測試</h2>

<p>不過對於組裝工而言，為何要在<code>inline</code>前面加<code>extern</code>或是<code>static</code>實在有趣，所以多測了幾下。沒興趣的就直接看<a href="#concl">結論</a>吧</p>

<h2>GNU C測試</h2>

<p>如果我們把程式碼改成</p>

<pre><code class="c test_inline.c">#include &lt;stdio.h&gt;

extern inline void hello()
{
    int i = 100;
    printf("Hello World: %d\n", i);
}

inline void hello()
{
    printf("Hello World 2\n");
}

int main(void)
{
    hello();

    return 0;
}
</code></pre>

<p>在GNU C下編譯執行會印<code>Hello World 2</code>，使用<code>objdump -S</code>反組譯可以看到</p>

<ul>
<li>main 呼叫<code>4004f4</code>位址</li>
<li><code>4004f4</code>真正的程式碼是印出<code>Hello World2</code>，也就是說<code>extern inline void hello()</code>裏面的程式碼是寫心酸的。</li>
<li>看起來這種情況GCC沒有把inline function展開。</li>
</ul>


<p>另外一點有趣的是C99下面把<code>extern inline</code>和<code>inline</code>對調會編譯失敗。</p>

<pre><code class="text inline_test.lst">00000000004004f4 &lt;hello&gt;:
    int i = 100;
    printf("Hello World: %d\n", i);
}

inline void hello()
{
  4004f4:   55                      push   %rbp
  4004f5:   48 89 e5                mov    %rsp,%rbp
    printf("Hello World 2\n");
  4004f8:   bf 0c 06 40 00          mov    $0x40060c,%edi
  4004fd:   e8 ee fe ff ff          callq  4003f0 &lt;puts@plt&gt;
}
  400502:   5d                      pop    %rbp
  400503:   c3                      retq   

0000000000400504 &lt;main&gt;:

int main(void)
{
  400504:   55                      push   %rbp
  400505:   48 89 e5                mov    %rsp,%rbp
    hello();
  400508:   b8 00 00 00 00          mov    $0x0,%eax
  40050d:   e8 e2 ff ff ff          callq  4004f4 &lt;hello&gt;

    return 0;
  400512:   b8 00 00 00 00          mov    $0x0,%eax
}
</code></pre>

<h2>結論</h2>

<ul>
<li>GNU C和C99 inline的<code>extern</code>定義相反。</li>
<li>C99下面只有<code>inline</code>只是一個宣告，不會產生symbol。要使用<code>extern</code>編譯器才會產生symbol。猜測可能單純<code>inline</code>是在header file宣告用，而<code>extern inline</code>則是在source code實作時使用。</li>
</ul>


<h2>參考資料</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Inline_function">Inline function</a></li>
<li><a href="http://en.wikipedia.org/wiki/Inline_expansion">Inline expansion</a></li>
<li><a href="http://stackoverflow.com/questions/216510/extern-inline/216546#216546">extern inline</a></li>
<li><a href="http://elinux.org/Extern_Vs_Static_Inline">Extern Vs Static Inline</a></li>
<li><a href="http://stackoverflow.com/questions/6312597/is-inline-without-static-or-extern-ever-useful-in-c99">Is 「inline」 without 「static」 or 「extern」 ever useful in C99?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
