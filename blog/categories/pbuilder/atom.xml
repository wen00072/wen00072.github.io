<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pbuilder | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/pbuilder/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-08-05T20:43:03+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Debian套件打包] Pbuilder 中如何安裝自己打包的套件]]></title>
    <link href="http://wen00072.github.io/blog/2014/11/20/package-debian-packages-using-local-debian-pbuilder-package/"/>
    <updated>2014-11-20T16:20:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/11/20/package-debian-packages-using-local-debian-pbuilder-package</id>
    <content type="html"><![CDATA[<p>標題有點難下。直接講為什麼會有這樣的需求好了，<a href="http://wen00072.github.io/blog/2014/07/31/package-debian-packages-discussion-on-pbuilder">在這邊</a>介紹了使用pbuilder驗證單獨的套件。但是如果你要打包的套件需要先安裝另外一個自行先打包的套件就GG了。原因是因為pbuilder不知道去那邊找相依的套件以致於無法編譯你的套件。</p>

<p>舉例來說，假設你現在要打包一個套件是顯示圖片的程式，我們把他叫<code>pkg_image</code>。而這個<code>pkg_image</code>套件使用了<code>lib_img</code>這套函式庫開發。不巧的是<code>lib_img</code>並不在debian官方套件中，所以你必須要先打包<code>lib_img</code>、<code>lib_img-dev</code>和<code>lib_dbg</code>這三個套件。接下來你要確定<code>lib_img-dev</code>套件安裝到你的系統中，你才能夠開始打包<code>pkg_img</code>。</p>

<p>這樣的狀況在pbuilder會有前面講到的套件相依問題。後來在Debian文件的<a href="https://wiki.debian.org/PbuilderTricks">PbuilderTricks</a>中找到解法，整理如下。</p>

<ul>
<li><a href="#prepare">複習 &amp; 事先準備</a></li>
<li><a href="#conf">修改pbuilder config檔案</a></li>
<li><a href="#test">套用並測試</a></li>
<li><a href="#ref">參考資料</a></li>
</ul>


<p><a name="prepare"></a></p>

<h2>複習 ＆ 事先準備</h2>

<p>首先我們依照Ubuntu的文件<a href="https://wiki.ubuntu.com/PbuilderHowto">PbuilderHowto</a>中的建議，安裝下面的套件。這部份應該和前面有重複。
<code>
sudo apt-get install pbuilder debootstrap devscripts
</code></p>

<p>其中devscripts提供打包debian套件所需要的script，如前面提到的debuild。而debootstrap則是可以讓你在系統中安裝並執行另外一個debian Linux。在使用時可以指定要裝debian的版本，至於debootstrap支援那些版本？你可以用下面的方式查詢： <code>ls /usr/share/debootstrap/scripts</code></p>

<p>如果你準備打包並上傳到debian官方套件管理庫，那麼你還要安裝debian 的GPG key，指令如下：
<code>
sudo apt-get install debian-archive-keyring
</code></p>

<p>接下來我們要建立一個待測Debian的基本image。我使用</p>

<pre><code>sudo pbuilder create --distribution sid \
                     --mirror http://ftp.tw.debian.org/debian \
                     --debootstrapopts \ 
                     "--keyring=/usr/share/keyrings/debian-archive-keyring.gpg --variant=buildd"
</code></pre>

<p>這個指令表示</p>

<ul>
<li>我要針對下建立基於debian sid的base.tgz檔案: <code>--distribution sid</code></li>
<li>指定mirror site: <code>--mirror http://ftp.tw.debian.org/debian</code></li>
<li>傳遞下面的參數給debootstrap: <code>--debootstrapopts</code>

<ul>
<li>使用debian archive的gpg key 來驗證下載的套件<code>--keyring=/usr/share/keyrings/debian-archive-keyring.gpg</code></li>
<li>除了基本的套件外，請幫我額外安裝編譯軟體需要的相關套件 (&ndash;variant=buildd)</li>
</ul>
</li>
</ul>


<p><a name="conf"></a></p>

<h2>修改pbuilder config檔案</h2>

<p>建立了base.tgz後。還要更改pbuilder的設定以及加入hook。請編輯/etc/pbuilderrc，或是你執行的pbuilder身份home目錄下的~/.pbuilderrc。主要是描述你的local repository放在那邊，以及hook放在那邊。local repository就是你自己打包的套件要放的地方，以前面的例子，就是要放lib_imag.deb和lib_imag-dev.deb到該目錄。而hook可以比喻成/etc/rc.d內的東西，基本上就是在該目錄寫一些script，當pbuilder啟動後就會依順序呼叫。</p>

<pre><code class="text /etc/pbuilder.c">OTHERMIRROR="deb [trusted=yes] file:///path/to/the/dir/deps ./"
BINDMOUNTS="/path/to/the/dir/deps"
HOOKDIR="/path/to/hook/dir"
EXTRAPACKAGES="apt-utils"
</code></pre>

<p>請確認內容中的每個路徑都存在，還有[trusted=yes]有被加入。沒加這個在pbuilder安裝自己local套件會因為安全條件不滿足而無法安裝。</p>

<p>寫完設定檔後，記得要告訴pbuilder你已經更新了設定。指令如下</p>

<pre><code>sudo pbuilder --update --override-config --distribution sid
</code></pre>

<p>接下來就是在HOOKDIR指定的目錄中填寫hook的內容，debian trick網頁是使用<code>D05deps</code>，我也是照抄。</p>

<pre><code class="text D05deps">#!/bin/sh
(cd /path/to/the/dir/deps; apt-ftparchive packages . &gt; Packages)
apt-get update
</code></pre>

<p>這個hook就是切換到你存放自己打包deb套件的目錄，然後產生出apt看得懂的套件列表到Packages檔案，最後就是更新apt。所以每次該目錄有新的deb套件時，都可以確保pbuilder一定可以使用。</p>

<p><a name="test"></a></p>

<h2>套用並測試</h2>

<p>完全和前面一樣，pbuilder &ndash;build 一個dsc檔。以前面的例子，我們會依照下面的順序打包</p>

<ul>
<li><code>pbuilder --build lib_img.dsc</code>打包<code>lib_img</code>，<code>lib_img-dev</code>，<code>lib_img-dbg</code>這三個套件。</li>
<li>把<code>lib_img</code>，<code>lib_img-dev</code>，<code>lib_img-dbg</code>搬到你給pbuilder吃的local repository目錄</li>
<li><code>pbuilder --build pkg_image.dsc</code>，pbuilder會自動從local repository中找出並安裝相依套件。</li>
</ul>


<p><a name="ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://wiki.debian.org/PbuilderTricks">PbuilderTricks</a></li>
<li><a href="https://wiki.ubuntu.com/PbuilderHowto">(Ubuntu) PbuilderHowto</a>

<ul>
<li>後面的提到dput之後我就沒往下看了，感覺似乎和Debian的稍微不同？</li>
</ul>
</li>
<li><a href="http://pbuilder.alioth.debian.org/">pbuilder User&rsquo;s Manual</a></li>
<li><a href="https://wiki.debian.org/Debootstrap">Debian: Bootstrap</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Debian套件打包] 使用pbuilder驗證套件]]></title>
    <link href="http://wen00072.github.io/blog/2014/07/31/package-debian-packages-discussion-on-pbuilder/"/>
    <updated>2014-07-31T03:57:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/07/31/package-debian-packages-discussion-on-pbuilder</id>
    <content type="html"><![CDATA[<p>之前的<a href="http://wen00072.github.io/blog/2014/06/12/package-debian-packages-set-after-list-of-debian-packages">文章</a>有提到使用pbuilder驗證套件。最近抽空玩了一下。整理到這邊。</p>

<p>[回收以前文章]
pbuilder透過pbuilder套件中的image以及chroot，使用乾淨的環境來產生並測是套件。如此一來可以確認是否debian目錄下面的設定是否真的可以在這些乾淨的環境被編譯和安裝。</p>

<h2>目錄：</h2>

<ul>
<li><a href="#env">環境設定並建立image</a></li>
<li><a href="#pkg">使用pbuilder打包source package</a></li>
<li><a href="#ref">參考資料</a></li>
</ul>


<hr />

<p><a name="env"></a></p>

<h2>環境設定並建立image</h2>

<ul>
<li>測試環境
<code>text lsb_release -a畫面
$ lsb_release -a
No LSB modules are available.
Distributor ID: Debian
Description:    Debian GNU/Linux unstable (sid)
Release:    unstable
Codename:   sid
</code></li>
</ul>


<p>先使用下面指令產生乾淨的Linux環境所對應的tarball，之後會用chroot切換到該環境中。</p>

<ul>
<li><code>sudo pbuilder create</code></li>
</ul>


<pre><code class="text 執行畫面">$ sudo pbuilder create
W: /root/.pbuilderrc does not exist
I: Distribution is sid.
I: Current time: Thu Jul 31 12:44:44 CST 2014
I: pbuilder-time-stamp: 1406781884
I: Building the build environment
I: running debootstrap
...
I: new cache content grep_2.18-2_amd64.deb added
I: unmounting dev/pts filesystem
I: unmounting run/shm filesystem
I: unmounting proc filesystem
I: creating base tarball [/var/cache/pbuilder/base.tgz]
I: cleaning the build env 
I: removing directory /var/cache/pbuilder/build//27394 and its subdirectories
</code></pre>

<p>從log中可以看到處理的時候會暫時放在<code>/var/cache/pbuilder/build//27394</code>中，當執行結束的時候會刪除。</p>

<p>我們可以更進一步看一下<code>/var/cache/pbuilder</code>目錄：</p>

<pre><code class="text /var/cache/pbuilder">#  tree -d /var/cache/pbuilder
.
|-- aptcache
|-- build
|-- ccache
|-- pbuildd
|-- pbuilder-mnt
|-- pbuilder-umlresult
`-- result
</code></pre>

<p>aptcache目錄可以看到裡面就是一堆deb檔案。我們可以合理的推論當測試十有需要額外安裝相依套件下載後會先存放在這邊。</p>

<p>接下來我們可以使用下面的方式玩一下</p>

<ul>
<li><code>sudo pbuilder --login</code></li>
</ul>


<pre><code class="text sudo pbuilder --login 執行畫面">$ sudo pbuilder --login
W: /root/.pbuilderrc does not exist
I: Building the build Environment
I: extracting base tarball [/var/cache/pbuilder/base.tgz]
I: creating local configuration
I: copying local configuration
I: mounting /proc filesystem
I: mounting /run/shm filesystem
I: mounting /dev/pts filesystem
I: policy-rc.d already exists
I: Obtaining the cached apt archive contents
I: entering the shell
File extracted to: /var/cache/pbuilder/build//10030

root@debian:/# 
</code></pre>

<p>重點是<code>File extracted to: /var/cache/pbuilder/build//10030</code>，所以我們可以在本機中去看<code>/var/cache/pbuilder/build/10030</code>，裡面就是一個完整的Linux root</p>

<pre><code class="text 列出目錄：/var/cache/pbuilder/build/10030">##  ls /var/cache/pbuilder/build/10030
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
</code></pre>

<p>當我們離開pbuilder shell後，可以看到該root目錄也隨之消失。如此一來，可以確保所有的資料一開始都會是從<code>/var/cache/pbuilder/base.tgz</code>解出來最乾淨的狀態。</p>

<pre><code class="text 離開pbuilder --login">root@debian:/# exit
logout
I: Copying back the cached apt archive contents
I: unmounting dev/pts filesystem
I: unmounting run/shm filesystem
I: unmounting proc filesystem
I: cleaning the build env 
I: removing directory /var/cache/pbuilder/build//10030 and its subdirectories
</code></pre>

<hr />

<p><a name="pkg"></a></p>

<h2>使用pbuilder打包驗證source package</h2>

<p>我自己的方式是先用<code>debbuild -S</code>或是<code>dpkg-buildpackage -S</code>產生dsc檔案。在同一個目錄下面下下面的指令。</p>

<ul>
<li><code>sudo pbuilder --build 你的套件.dsc</code></li>
</ul>


<p>當你原始套件debian/control的depend沒寫好，pbuilder乾淨的環境就不會安裝depend的套件而執行失敗。這時候你就要加入缺少的depend套件到debian/control。最後產生的套件會放在<code>/var/cache/pbuilder/result/</code>中</p>

<p>執行畫面如下：
<code>text sudo pbuilder --build testautotools_0-1.dsc
W: /root/.pbuilderrc does not exist
I: using fakeroot in build.
I: pbuilder: network access will be disabled during build
I: Current time: Thu Jul 31 15:28:32 CST 2014
I: pbuilder-time-stamp: 1406791712
I: Building the build Environment
...
I: Obtaining the cached apt archive contents
I: Installing the build-deps
 -&gt; Attempting to satisfy build-dependencies
 -&gt; Creating pbuilder-satisfydepends-dummy package
...
I: Extracting source
dpkg-source: warning: extracting unsigned source package (testautotools_0-1.dsc)
dpkg-source: info: extracting testautotools in testautotools-0
dpkg-source: info: unpacking testautotools_0.orig.tar.xz
dpkg-source: info: unpacking testautotools_0-1.debian.tar.xz
I: Building the package
I: Running cd tmp/buildd/*/ &amp;&amp; env PATH="/usr/sbin:/usr/bin:/sbin:/bin" dpkg-buildpackage -us -uc  -rfakeroot
...
I: Copying back the cached apt archive contents
I: unmounting dev/pts filesystem
I: unmounting run/shm filesystem
I: unmounting proc filesystem
I: cleaning the build env
I: removing directory /var/cache/pbuilder/build//18912 and its subdirectories
I: Current time: Thu Jul 31 15:29:09 CST 2014
I: pbuilder-time-stamp: 1406791749
</code></p>

<hr />

<p><a name="ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://wiki.ubuntu.com/PbuilderHowto">PbuilderHowto </a></li>
<li><a href="https://wiki.debian.org/Diaspora/Packaging/pbuilder">Debian: Pbuilder</a></li>
<li><a href="https://www.debian.org/doc/manuals/maint-guide/build.en.html">Debian New Maintainers&#8217; Guide: Chapter 6. Building the package</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
