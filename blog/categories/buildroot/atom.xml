<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Buildroot | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/buildroot/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-07-26T20:49:44+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Kernel Pratice 0: Buildroot (2/2) - 自行編譯kernel]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/31/linux-kernel-pratice-0-buildroot-2-customized-kernel/"/>
    <updated>2016-10-31T09:40:54+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/31/linux-kernel-pratice-0-buildroot-2-customized-kernel</id>
    <content type="html"><![CDATA[<h2>前情提要</h2>

<p><a href="/blog/2016/10/29/linux-kernel-pratice-0-buildroot-setup-with-qemu/">上一篇</a>提到，設定實習環境的目標有：</p>

<ol>
<li>可以使用ARM 平台。一方面追求流行，一方面我不想再開x86這個副本</li>
<li>可以方便地建立ARM平台的Linux Rootfs和kernel版本</li>
<li>可以方便地更改指定要編譯的Kernel版本</li>
<li>透過Qemu ，使用2的Rootfs和kernel開機</li>
<li>透過Qemu和搭配的工具可以分析Linux kernel的run time 行為</li>
</ol>


<p>今天就是來解決3 的項目。更細分的話，這次目標是</p>

<ol>
<li>使用官方Linux kernel 編譯Vexpress 平台kernel及產生Buildroot支援的開發版device tree</li>
<li>編譯出來的kernel binary可以在Qemu上順利載入</li>
<li>編譯出來的kernel binary可以順利的載入buildroot產生的rootfs，以及網路介面和相關設備</li>
</ol>


<h2>目錄</h2>

<ul>
<li><a href="#lk0_1_env">測試環境</a></li>
<li><a href="#lk0_1_dl">下載Linux Kernel Source</a></li>
<li><a href="#lk0_1_conf">設定和編譯</a>

<ul>
<li><a href="#lk0_1_conf_sw">切換版本</a></li>
<li><a href="#lk0_1_conf_arm_def">設定ARM Vexpress預設config</a></li>
<li><a href="#lk0_1_conf_qemu">更改Kernel Config讓Qemu使用</a></li>
<li><a href="#lk0_1_conf_build">編譯</a>

<ul>
<li><a href="#lk0_1_conf_build_broot">Buildroot</a></li>
<li><a href="#lk0_1_conf_build_lk">Linux kernel</a></li>
</ul>
</li>
<li><a href="#lk0_1_conf_dtb">產生Device tree binary</a></li>
</ul>
</li>
<li><a href="#lk0_1_test">測試</a></li>
<li><a href="#lk0_1_ref">參考資料</a></li>
<li><a href="#lk0_1_app">附錄</a>

<ul>
<li><a href="#lk0_1_app_brot">使用Buildroot 內建套件指定編譯Linux kernel 4.2.2</a></li>
</ul>
</li>
</ul>


<p><a name="lk0_1_env"></a></p>

<h2>測試環境</h2>

<p>做組裝的最重要的原則之一就是要能夠reproduce，所以交代測試環境是一定要的</p>

<pre><code class="text">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty

$ git --version
git version 2.10.0
</code></pre>

<ul>
<li>buildroot 版本

<ul>
<li>commit hash: <code>14b24726a81b719b35fee70c8ba8be2d682a7313</code></li>
</ul>
</li>
</ul>


<p><a name="lk0_1_dl"></a></p>

<h2>下載Linux Kernel Source</h2>

<p>沒啥好講的，就剪貼指令吧</p>

<pre><code class="sh">git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
</code></pre>

<p><a name="lk0_1_conf"></a></p>

<h2>設定和編譯</h2>

<p>東西下載完不是就閉著眼睛開幹，因為我們在開始編譯前需要</p>

<ol>
<li>切換到你想要研究的版本</li>
<li>如果不是x86，你需要指定平台</li>
<li>細項Kernel config設定</li>
</ol>


<p>那麼就來見招拆招吧</p>

<p><a name="lk0_1_conf_sw"></a></p>

<h3>切換版本</h3>

<p>非常簡單，先<code>git tag</code>，切過去就好。我要切到4.4.2就是</p>

<pre><code class="sh">git tag                 # 找你要的版本
git checkout v4.4.2     # 切到tag
git checkout -b v4.4.2  # 理論上會這邊改東改西，就先開branch吧
</code></pre>

<p><a name="lk0_1_conf_arm_def"></a></p>

<h3>設定ARM Vexpress預設config</h3>

<p>先講結論
<code>sh
make ARCH=arm vexpress_defconfig
</code></p>

<p>開始<del>沒人要看</del>的解釋吧。基本上也亂看找出來的，簡單講一下當初的「脈絡」</p>

<ol>
<li>我知道我們平台是vexpress，所以就<code>find | grep vexpress</code>。從一堆檔案中我看到有趣的檔案<code>./arch/arm/configs/vexpress_defconfig</code>。</li>
<li>接下來就是要找make 的時候怎麼和這個檔案勾起來。網路上找一下會發現一個變數<code>ARCH</code>，剩下就試看看<code>make ARCH=arm vexpress_defconfig</code>，能不能動，可以動所以打完收工。</li>
</ol>


<p>然後你就知道</p>

<ol>
<li>Linux kernel source中有些平台會提供default config</li>
<li>透過<code>ARCH</code>可以讓make時自動參考這些檔案產生config</li>
</ol>


<p><a name="lk0_1_conf_qemu"></a></p>

<h3>更改Kernel Config讓Qemu使用</h3>

<p><font color="red"><strong>建議不要把buildroot compile cache打開。我花了很多時間在kernel 編譯後Qemu還是沒有使用編譯後的kernel的問題，最後發現關閉buildroot compile cache問題就消失了。</strong></font></p>

<p>如果閉著眼睛開始<a href="#lk0_1_conf_build">編譯</a>，你會很高興地發現可以開機了，但是接下來就會很失望的發現出現mount完rootfs找不到<code>/dev/ttyAMA0</code>，以至於沒辦法進入login畫面。這是因為雖然serial driver偵測到設備，但是/dev下面沒有相對的device node。解法就是確認下面kernel option有開啟。想要知道真正的原因<a href="https://buildroot.org/downloads/manual/manual.html#_dev_management">手冊這邊</a>有提到，請參考<code>Dynamic using devtmpfs only</code>段落。</p>

<ul>
<li>Device Drivers -> Generic Driver Options ->

<ul>
<li>Maintain a devtmpfs filesystem to mount at /dev</li>
<li>Automount devtmpfs at /dev, after the kernel mounted the rootfs</li>
</ul>
</li>
</ul>


<p>建議順便巡一下其他kernel選項，用不到的可以關一下。比如說一堆有的沒的網卡，音效支援之類的。</p>

<p><a name="lk0_1_conf_build"></a></p>

<h3>編譯</h3>

<p><a name="lk0_1_conf_build_broot"></a></p>

<h4>Buildroot</h4>

<ol>
<li><code>make menuconfig</code>

<ul>
<li>Toolchain -> Custom kernel headers series

<ul>
<li>改成你現在Linux 版本</li>
</ul>
</li>
</ul>
</li>
<li><code>make</code></li>
</ol>


<p><a name="lk0_1_conf_build_lk"></a></p>

<h4>Linux kernel</h4>

<p>指令如下</p>

<pre><code class="sh">make CROSS_COMPILE=/tmp/buildroot/output/host/usr/bin/arm-buildroot-linux-gnueabihf- ARCH=arm V=1 bzImage
</code></pre>

<p>這其實就是<code>make bzImage</code>的囉唆版，多了</p>

<ul>
<li><code>ARCH=arm</code>

<ul>
<li>指定ARM平台</li>
</ul>
</li>
<li><code>CROSS_COMPILE=..</code>

<ul>
<li>Cross compile prefix，既然我們使用buildroot內建toolchain，就用他們來編譯kernel</li>
</ul>
</li>
<li><code>V=1</code>

<ul>
<li>身為組裝工，沒看到編譯指令訊息跳出來就會沒安全感</li>
</ul>
</li>
</ul>


<p><a name="lk0_1_conf_dtb"></a></p>

<h3>產生Device tree binary</h3>

<p>由於Kernel的演進，可以存放平台硬體相關設定讓kernel啟動時存取。此方式稱為device tree，詳細資訊可以參考這份<a href="https://events.linuxfoundation.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf">簡介(pdf投影片)</a>。</p>

<p>以論述文來說，儘量先說結論再解釋。因此懶人包如下，假設在kernel top 目錄中：</p>

<pre><code class="text">sudo apt-get install device-tree-compiler
dtc -O dtb -o vexpress-v2p-ca9.dtb arch/arm/boot/dts/vexpress-v2p-ca9.dts
</code></pre>

<p><del>沒人要看的</del>說明如下，懶得看推論的就剪貼上面就好
對於組裝工來說，我關心的是</p>

<ol>
<li>Kernel 軟體包中是否有存在已經有的device tree?</li>
<li>有的話，我要選那一個？</li>
<li>怎麼產生出最後成果？</li>
<li>Qemu怎麼使用device tree？</li>
</ol>


<p>要回上面的問題，最簡單的方式就是回顧buildroot中啟動qemu Vepress的命令參數，你就會發現有個東西似乎和我們關心的device tree有關聯</p>

<ul>
<li><code>-dtb output/images/vexpress-v2p-ca9.dtb</code></li>
</ul>


<p>這邊顯示了幾個資訊</p>

<ul>
<li>有一個檔案叫dtb</li>
<li>檔名的v2p-ca9有可能和平台有關係</li>
</ul>


<p>那麼我們在Kernel中找一下檔名中有vexpress-v2p-ca9的檔案</p>

<pre><code>user@host:/tmp/kernel/linux-stable$ find | grep vexpress-v2p-ca9
./arch/arm/boot/dts/vexpress-v2p-ca9.dts
</code></pre>

<p>這邊一樣透露了這是一個和<code>dtb</code>很類似的檔案，那麼我們進一步做一些確認</p>

<pre><code class="text">$ # dtb 是binary檔案
$ file output/images/vexpress-v2p-ca9.dtb
output/images/vexpress-v2p-ca9.dtb: data

$ # dts是文字檔
$ file ./arch/arm/boot/dts/vexpress-v2p-ca9.dts
./arch/arm/boot/dts/vexpress-v2p-ca9.dts: ASCII text

$ # cat 後會發現是一種描述檔
</code></pre>

<p>剩下就是估狗大法，發現需要編譯器才能把dts轉換成dtb檔案。
所以就用上面的方式產稱dtb檔囉。</p>

<h2>測試</h2>

<p>剩下就剪貼了</p>

<p><strong>我在buildroot top目錄執行的</strong>，你要嘛就切到buildroot目錄下，要嘛就指定<code>-drive file</code>到你自己rootfs的路徑</p>

<pre><code class="sh">qemu-system-arm -M vexpress-a9 -smp 1 -m 256 -kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage -dtb /tmp/kernel/linux-stable/vexpress-v2p-ca9.dtb  -drive file=output/images/rootfs.ext2,if=sd,format=raw -append "console=ttyAMA0,115200 root=/dev/mmcblk0" -serial stdio -net nic,model=lan9118 -net user
</code></pre>

<p>提出來兩個參數表示這是我編譯出來的kernel而不是buildroot的</p>

<ul>
<li><code>-kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage</code></li>
<li><code>-dtb /tmp/kernel/linux-stable/vexpress-v2p-ca9.dtb</code></li>
</ul>


<p>開機畫面節錄如下</p>

<pre><code class="text">Booting Linux on physical CPU 0x0
Initializing cgroup subsys cpuset
Linux version 4.4.2 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #10 SMP Sat Oct 29 15:25:36 CST 2016
CPU: ARMv7 Processor [410fc090] revision 0 (ARMv7), cr=10c5387d
CPU: PIPT / VIPT nonaliasing data cache, VIPT aliasing instruction cache
Machine model: V2P-CA9
Memory policy: Data cache writeback
CPU: All CPU(s) started in SVC mode.
PERCPU: Embedded 12 pages/cpu @8fdbd000 s18188 r8192 d22772 u49152
Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 65024
Kernel command line: console=ttyAMA0,115200 root=/dev/mmcblk0
log_buf_len individual max cpu contribution: 4096 bytes
log_buf_len total cpu_extra contributions: 12288 bytes
log_buf_len min size: 16384 bytes
log_buf_len: 32768 bytes
early log buf free: 14956(91%)
PID hash table entries: 1024 (order: 0, 4096 bytes)
Dentry cache hash table entries: 32768 (order: 5, 131072 bytes)
Inode-cache hash table entries: 16384 (order: 4, 65536 bytes)
Memory: 252732K/262144K available (4816K kernel code, 155K rwdata, 1384K rodata, 284K init, 152K bss, 9412K reserved, 0K cma-reserved)
Virtual kernel memory layout:
    vector  : 0xffff0000 - 0xffff1000   (   4 kB)
    fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)
    vmalloc : 0x90800000 - 0xff800000   (1776 MB)
    lowmem  : 0x80000000 - 0x90000000   ( 256 MB)
    modules : 0x7f000000 - 0x80000000   (  16 MB)
....
buildroot login:
</code></pre>

<p><a name="lk0_1_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://buildroot.org/downloads/manual/manual.html">Buildroot 官方手冊</a></li>
<li><a href="https://events.linuxfoundation.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf">Device Tree for Dummies! (pdf投影片)</a></li>
<li><a href="http://stackoverflow.com/questions/21670967/compiling-source-device-tree-file">Stackoverflow: COMPILING source device tree file</a></li>
</ul>


<p><a name="lk0_1_app"></a></p>

<h2>附錄</h2>

<p><a name="lk0_1_app_brot"></a></p>

<h3>使用Buildroot 內建套件指定編譯Linux kernel 4.2.2</h3>

<p>當初會去做這個主要是因為開始編譯獨立的Linux kernel前要先驗證buildroot自己編的Linux 4.4.2是否可以用qemu開機。另外的好處的就是buildroot編譯出來的kernel config (在output/build/linux-4.4.2/.config) 可以和你自己的kernel config比對。這邊只要在buildroot中make menuconfig中和kernel有關設定指定4.4.2即可，比Versatile簡單太多了故省略，如果有人遇到問題我再補上這邊說明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel Pratice 0: Buildroot (1/2)]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/29/linux-kernel-pratice-0-buildroot-setup-with-qemu/"/>
    <updated>2016-10-29T09:43:20+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/29/linux-kernel-pratice-0-buildroot-setup-with-qemu</id>
    <content type="html"><![CDATA[<p>理論上不應該要邊移動邊開火，延長戰線。不過計劃趕不上變化，既來之則安之。</p>

<p>最近因為特別因素開始學習Linux kernel，看能不能Linux kernel和STM32兩邊都不要漏掉。不管怎樣，學習和實習絕對分不開，所以還是從環境架設開始吧。這次的實習環境架設的目標是：</p>

<ol>
<li>可以使用ARM 平台。一方面追求流行，一方面我不想再開x86這個副本</li>
<li>可以方便地建立ARM平台的Linux Rootfs和kernel版本</li>
<li>可以方便地更改指定要編譯的Kernel版本</li>
<li>透過Qemu ，使用2的Rootfs和kernel開機</li>
<li>透過Qemu和搭配的工具可以分析Linux kernel的run time 行為</li>
</ol>


<p>今天只有辦到1, 2和4而已，剩下的請參考之後的文章。</p>

<h2>目錄</h2>

<ul>
<li><a href="#lk0_env">測試環境</a></li>
<li><a href="#lk0_ins">安裝Buildroot</a>

<ul>
<li><a href="#lk0_ins_dl">下載Buildroot</a></li>
<li><a href="#lk0_ins_set">設定ARM 環境</a></li>
<li><a href="#lk0_ins_build">編譯及輸出</a></li>
</ul>
</li>
<li><a href="#lk0_test">測試</a></li>
<li><a href="#lk0_ref">參考資料</a>

<ul>
<li><a href="#lk0_ref_data">下次準備看的資料</a></li>
</ul>
</li>
</ul>


<p><a name="lk0_env"></a></p>

<h2>測試環境</h2>

<p>因為我已經裝過開發相關的套件，因此如果您是新手可能要自行摸索也許有需要另外安裝的套件如<code>git</code>。嘛，練習解讀錯誤訊息也是一種學習。</p>

<pre>
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</pre>


<p><a name="lk0_ins"></a></p>

<h2>安裝Buildroot</h2>

<p>主要分成下面三個步驟</p>

<ul>
<li><a href="#lk0_ins_dl">下載Buildroot</a></li>
<li><a href="#lk0_ins_set">設定ARM 環境</a></li>
<li><a href="#lk0_ins_build">編譯及輸出</a></li>
</ul>


<p><a name="lk0_ins_dl"></a></p>

<h3>下載Buildroot</h3>

<p>直接看例子，剪下貼上就好</p>

<pre><code class="sh">mkdir buildroot
cd buildroot
git clone git://git.buildroot.net/buildroot
</code></pre>

<p><a name="lk0_ins_set"></a></p>

<h3>設定ARM 環境</h3>

<p>網路上查到大部分都是從<code>make menuconfig</code>開始。不過我是很<strong>明確地</strong>要用<code>Qemu</code>跑ARM的系統。所以使用下面指令查詢。</p>

<pre><code>make list-defconfigs
</code></pre>

<p>Scott 大大指出可以使用<code>qemu_arm_vexpress</code> ，原因是這個平台模擬的CPU是 <code>Cortex-A9</code>(ARMv7-A)的平台。<a href="/blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu/">之前</a>我是用的模擬平台使用的CPU是<code>ARM926EJ-S</code>(ARMv5TE)，它的instruction 架構和現在差距太多，所以就轉換到這邊了。</p>

<p>接下來就用<code>make menuconfig</code>做細項調整，因為是拿來做分析系統行為，所以調整的重點是增加系統的可觀察度、除錯工具、開發軟體套件等。</p>

<p>開啟或新增下面設定如下：</p>

<ul>
<li>Build options

<ul>
<li>build packages with debugging symbol</li>
<li>gcc debug level

<ul>
<li>debug level 3</li>
</ul>
</li>
<li>strip command for binaries on target

<ul>
<li>none</li>
</ul>
</li>
<li>gcc optimization level

<ul>
<li>optimize for debugging</li>
</ul>
</li>
</ul>
</li>
<li>Toolchain

<ul>
<li>C library

<ul>
<li>glibc</li>
</ul>
</li>
<li>glibc version

<ul>
<li>2.24</li>
</ul>
</li>
<li>GCC compiler Version

<ul>
<li>4.8.x</li>
</ul>
</li>
<li>Build cross gdb for the host

<ul>
<li>TUI support</li>
<li>Python support</li>
<li>Simulator support</li>
</ul>
</li>
</ul>
</li>
<li>Target packages

<ul>
<li>Debugging, profiling and benchmark

<ul>
<li>gdb

<ul>
<li>gdbserver</li>
<li>full debugger</li>
<li>TUI support</li>
</ul>
</li>
<li>ltrace</li>
<li>strace</li>
<li>valgrind 和所有相關的東西</li>
</ul>
</li>
<li>Development tools

<ul>
<li>binutils</li>
<li>git</li>
<li>gperf</li>
<li>libtool</li>
<li>make</li>
<li>pkgconf</li>
<li>subversion</li>
<li>tree</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>自行編譯 Kernel 部份下一篇會再說明。</p>

<p><a name="lk0_ins_build"></a></p>

<h3>編譯及輸出</h3>

<p>編譯只要下<code>make</code>就會幫你下載和編譯開機需要的</p>

<ol>
<li>套件和一些常用工具，並封裝到<code>output/image/roofs.ext2</code></li>
<li>Kernel(預設4.7)，編譯成<code>zImage</code>，放在<code>output/image/zImage</code></li>
</ol>


<p><a name="lk0_test"></a></p>

<h2>測試</h2>

<p>接下來也不難，可以參考<code>board/qemu/arm-vexpress/readme.txt</code>
簡單來說就是執行下面指令，開機完使用<code>root</code>登入不用密碼，使用<code>poweroff</code>後再手動離開qemu。</p>

<pre><code class="sh">qemu-system-arm -M vexpress-a9 -smp 1 -m 256 -kernel output/images/zImage -dtb output/images/vexpress-v2p-ca9.dtb -drive file=output/images/rootfs.ext2,if=sd,format=raw -append "console=ttyAMA0,115200 root=/dev/mmcblk0" -serial stdio -net nic,model=lan9118 -net user
</code></pre>

<p>執行畫面如下</p>

<pre><code class="text">$ qemu-system-arm -M vexpress-a9 -smp 1 -m 256 -kernel output/images/zImage -dtb output/images/vexpress-v2p-ca9.dtb -drive file=output/images/rootfs.ext2,if=sd,format=raw -append "console=ttyAMA0,115200 root=/dev/mmcblk0" -serial stdio -net nic,model=lan9118 -net user
Booting Linux on physical CPU 0x0
Initializing cgroup subsys cpuset
Linux version 4.4.2 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #1 SMP Sat Oct 29 12:37:50 CST 2016
CPU: ARMv7 Processor [410fc090] revision 0 (ARMv7), cr=10c5387d
...
Initializing random number generator... done.
Starting network: smsc911x 4e000000.ethernet eth0: SMSC911x/921x identified at 0x912a0000, IRQ: 31
udhcpc: started, v1.25.0
udhcpc: sending discover
udhcpc: sending discover
udhcpc: sending select for 10.0.2.15
udhcpc: lease of 10.0.2.15 obtained, lease time 86400
deleting routers
adding dns 10.0.2.3
OK
Starting sshd: OK

Welcome to Buildroot
buildroot login: 
</code></pre>

<p><a name="lk0_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://buildroot.org/downloads/manual/manual.html">The Buildroot user manual</a>

<ul>
<li>只有看部份，不過官方文件本來就是應該放在第一位</li>
</ul>
</li>
<li><a href="http://pressreset.net/2013/09/buildroot-and-qemu-the-quickest-receipe-for-your-own-linux/">Buildroot and QEMU – the quickest receipe for your own Linux</a>

<ul>
<li>東西弄完才看到的文章，入門好文</li>
</ul>
</li>
</ul>


<p><a name="lk0_ref_data"></a></p>

<h3>下次準備看的資料</h3>

<ul>
<li><a href="http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel">Qemu and the Kernel</a>

<ul>
<li>使用Qemu debug kernel的資料</li>
</ul>
</li>
<li><a href="http://unix.stackexchange.com/questions/90423/can-virtfs-9p-be-used-as-root-file-system">Stackoverflow: Can virtfs/9p be used as root file system?</a>

<ul>
<li>Qemu和Host主機共享資料，甚至直接把rootfs放host讓qemu去讀取的方式</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
