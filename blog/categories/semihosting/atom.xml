<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Semihosting | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/semihosting/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-08-05T20:59:12+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARM CM4 Pratice (4): Semihosting]]></title>
    <link href="http://wen00072.github.io/blog/2016/08/10/arm-cm4-pratice-4-semihosting/"/>
    <updated>2016-08-10T12:51:46+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/08/10/arm-cm4-pratice-4-semihosting</id>
    <content type="html"><![CDATA[<p>Semihosting 是一種讓開發版透過除錯介面執行主機上的服務。透過semihosting，使用者可以快速驗證功能。舉例來說，在USART還沒搞定前先把訊息透過semihosting印到主機上觀看程式的行為。</p>

<p>本次練習使用<code>openocd</code>提供主機上的服務。以下是這次的練習</p>

<h2>目錄</h2>

<ul>
<li><a href="#stm-4-env">測試環境</a></li>
<li><a href="#stm-4-semi">使用Semihosting</a>

<ul>
<li><a href="#stm-4-semi-target">開發版</a></li>
<li><a href="#stm-4-semi-host">主機 (openocd)</a></li>
</ul>
</li>
<li><a href="#stm-4-test">實驗：Echo</a>

<ul>
<li><a href="#stm-4-test-code">程式</a>

<ul>
<li><a href="#stm-4-test-code-main">主程式</a></li>
<li><a href="#stm-4-test-code-semi">Semihosting 程式</a></li>
</ul>
</li>
<li><a href="#stm-4-test-makefile">Makefile</a></li>
<li><a href="#stm-4-test-result">執行結果</a></li>
</ul>
</li>
<li><a href="#stm-4-ref">參考資料</a></li>
</ul>


<p><a name="stm-4-env"></a></p>

<h2>測試環境</h2>

<pre><code class="text">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.4 LTS
Release:    14.04
Codename:   trusty

$ arm-none-eabi-gcc --version
arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-branch revision 237715]
...

$ openocd --version
Open On-Chip Debugger 0.10.0-dev-00250-g9c37747 (2016-04-07-22:20)
...
</code></pre>

<ul>
<li>SPL版本： STM32F4xx_DSP_StdPeriph_Lib_V1.6.1</li>
<li>開發板： STM32F4 Dicovery, <a href="http://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-discovery-kits/32f429idiscovery.html">STM32F429-Disco</a></li>
</ul>


<p><a name="stm-4-semi"></a></p>

<h2>使用Semihosting</h2>

<p><a name="stm-4-semi-target"></a></p>

<h3>開發版</h3>

<p>ARM官方網站有說，在ARMv6-M 和 ARMv7-M (Cortex M4是ARMv7E-M)架構中，使用break point指令並帶入參數<code>0xab</code>即可。詳細的使用範例會在<a href="#stm-4-test">後面</a>說明。</p>

<p>以下是ARM規範的Semihosting服務</p>

<ul>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/BEIDFAEH.html">angel_SWIreason_EnterSVC (0x17)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/BEIGEDFE.html">angel_SWIreason_ReportException (0x18)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccdcef.html">SYS_CLOSE (0x02)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdcfje.html">SYS_CLOCK (0x10)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdgdcc.html">SYS_ELAPSED (0x30)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdhfgc.html">SYS_ERRNO (0x13)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdgdic.html">SYS_FLEN (0x0C)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccbcbe.html">SYS_GET_CMDLINE (0x15)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbefaa.html">SYS_HEAPINFO (0x16)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccjafh.html">SYS_ISERROR (0x08)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbhcee.html">SYS_ISTTY (0x09)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdagge.html">SYS_OPEN (0x01)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baceahbd.html">SYS_READ (0x06)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccbaba.html">SYS_READC (0x07)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbffjf.html">SYS_REMOVE (0x0E)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdjebc.html">SYS_RENAME (0x0F)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdfgcg.html">SYS_SEEK (0x0A)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdijcb.html">SYS_SYSTEM (0x12)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacchdbe.html">SYS_TICKFREQ (0x31)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacebdhg.html">SYS_TIME (0x11)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccafja.html">SYS_TMPNAM (0x0D)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbedji.html">SYS_WRITE (0x05)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbejbe.html">SYS_WRITEC (0x03)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdhdcd.html">SYS_WRITE0 (0x04)</a></li>
</ul>


<p><a name="stm-4-semi-host"></a></p>

<h3>主機 (openocd)</h3>

<p>其實非常簡單，就是啟動openocd的時候要把semihosting打開。單獨指令如下</p>

<pre><code>arm semihosting enable
</code></pre>

<p><a name="stm-4-test"></a></p>

<h2>實驗：Echo</h2>

<p>完整可以編譯的程式碼在<a href="https://github.com/zzz0072/STM32F429-Discovery-Disco-Pratice/tree/master/labs/2_semihosting">這邊</a></p>

<p>這個實驗行為和<a href="http://wen00072.github.io/blog/2016/08/05/arm-cm4-pratice-3-lab-usart/">前一個實驗</a>很類似，就是透過semihosting的read服務主機端輸入資料，然後再透過semihosting的write服務印到螢幕上。</p>

<p><a name="stm-4-test-code"></a></p>

<h3>程式</h3>

<p><a name="stm-4-test-code-main"></a></p>

<h4>主程式</h4>

<p>非常簡單，唯一要說明的是在微處理器中，所有的東西都要自己來，也就是說下面的<code>memset</code>、<code>strlen</code>都是自己寫的。</p>

<pre><code class="c semihosting.c">#include "my_utils.h"

#define GREETING_STR  "Hello World\n\r"
#define PROMPT_STR    "\r&gt; "
#define LINE_MAX_CHAR (64)

int main(int argc, char **argv)
{
    char line[LINE_MAX_CHAR];

    /* Greeting */
    host_write(STDOUT, GREETING_STR, strlen(GREETING_STR));
    host_write(STDOUT, PROMPT_STR, strlen(PROMPT_STR));
    while(1) {
        memset(line, 0x00, LINE_MAX_CHAR);
        host_read(STDIN, line, LINE_MAX_CHAR);
        host_write(STDOUT, line, strlen(line));

        /* Show prompt */
        host_write(STDOUT, PROMPT_STR, strlen(PROMPT_STR));
    }

    return 0;
}
</code></pre>

<p><a name="stm-4-test-code-semi"></a></p>

<h4>semihosting 程式</h4>

<p>首先我們從手冊中知道read/write的semihosting對應代號，<font color="red">用hardcode是不道德的</font>，所以我們使用有意義的文字代替。</p>

<pre><code class="c">enum HOST_SYSCALL {
    HOSTCALL_WRITE       = 0x05,
    HOSTCALL_READ        = 0x06,
};
</code></pre>

<p>接下來我們發現read/write參數的型態有整數(file descriptor)
和位址這兩種，而手冊中說明參數傳遞的方式是將參數全部放在一個連續的記憶體空間，再將該記憶體空間位址存放在<code>R1</code>暫存器中。也就是說我們需要</p>

<ol>
<li>連續的空間</li>
<li>空間中的參數可能有多個，而且它們的型態可能都不同</li>
</ol>


<p>要達到這樣的方式，以前上課看來的方式就是做一個<code>union</code>。每次使用時建立陣列、指令參數型態和值，接下來把該陣列的位址傳給semihosting就可以了。</p>

<p>以下是這次用的<code>union</code></p>

<pre><code class="c">/* Semihost system call parameters */
union param_t
{
    int   pdInt;
    void *pdPtr;
};

typedef union param_t param;
</code></pre>

<p>接下來是實際的呼叫semihosting服務。就是前面提到下break point指令。你可能會問這邊怎麼沒有參數傳遞？傻孩子，這就是ABI存在的目的了。</p>

<pre><code class="c">static int host_call(enum HOST_SYSCALL action, void *arg) __attribute__ ((naked));
static int host_call(enum HOST_SYSCALL action, void *arg)
{
    int result;
    __asm__( \
      "bkpt 0xAB\n"\
      "nop\n" \
      "bx lr\n"\
        :"=r" (result) ::\
    );
    return result;
}
</code></pre>

<p>剩下就簡單了，設定好參數呼叫semihosting的介面收工。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">size_t</span> <span class="nf">host_read</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">param</span> <span class="n">semi_param</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdInt</span> <span class="o">=</span> <span class="n">fd</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdPtr</span> <span class="o">=</span> <span class="n">buf</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdInt</span> <span class="o">=</span> <span class="n">count</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">host_call</span><span class="p">(</span><span class="n">HOSTCALL_READ</span><span class="p">,</span> <span class="n">semi_param</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">size_t</span> <span class="n">host_write</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">param</span> <span class="n">semi_param</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdInt</span> <span class="o">=</span> <span class="n">fd</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdPtr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">buf</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdInt</span> <span class="o">=</span> <span class="n">count</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">host_call</span><span class="p">(</span><span class="n">HOSTCALL_WRITE</span><span class="p">,</span> <span class="n">semi_param</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a name="stm-4-test-makefile"></a></p>

<h3>Makefile</h3>

<p>最主要的是要透過openocd提供semihosting服務。如果想要在gdb測試時打開可以參考<a href="http://electronics.stackexchange.com/questions/149387/how-do-i-print-debug-messages-to-gdb-console-with-stm32-discovery-board-using-gd">這邊</a>的資料。</p>

<p>Makefile相關描述如下：</p>

<pre><code class="Makefile">run: $(OUT_DIR)/$(TARGET).bin
    openocd -f interface/stlink-v2.cfg  \
            -f target/stm32f4x.cfg      \
            -c "init"                   \
            -c "reset init"             \
            -c "arm semihosting enable" \
            -c "reset run"
</code></pre>

<p><a name="stm-4-test-result"></a></p>

<h3>執行結果</h3>

<pre><code class="text">$ make run
openocd -f interface/stlink-v2.cfg  \
            -f target/stm32f4x.cfg      \
            -c "init"                   \
            -c "reset init"             \
            -c "arm semihosting enable" \
            -c "reset run"
Open On-Chip Debugger 0.10.0-dev-00250-g9c37747 (2016-04-07-22:20)
Licensed under GNU GPL v2
For bug reports, read
    http://openocd.org/doc/doxygen/bugs.html
Info : auto-selecting first available session transport "hla_swd". To override use 'transport select &lt;transport&gt;'.
Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD
adapter speed: 2000 kHz
adapter_nsrst_delay: 100
none separate
Info : Unable to match requested speed 2000 kHz, using 1800 kHz
Info : Unable to match requested speed 2000 kHz, using 1800 kHz
Info : clock speed 1800 kHz
Info : STLINK v2 JTAG v17 API v2 SWIM v0 VID 0x0483 PID 0x3748
Info : using stlink api v2
Info : Target voltage: 2.883392
Info : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints
adapter speed: 2000 kHz
stm32f4x.cpu: target state: halted
target halted due to debug-request, current mode: Thread 
xPSR: 0x01000000 pc: 0x080005c4 msp: 0x20030000
adapter speed: 8000 kHz
semihosting is enabled
adapter speed: 2000 kHz
Hello World
&gt; My test
My test
&gt; !!!!
!!!!
&gt; 
</code></pre>

<p><a name="stm-4-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/CHDJHHDI.html">ARM Compiler toolchain Developing Software for ARM Processors: Semihosting</a></li>
<li><a href="http://openocd.org/doc/html/Architecture-and-Core-Commands.html">OpenOCD User&rsquo;s Guide: Architecture and Core Commands</a></li>
<li><a href="http://bgamari.github.io/posts/2014-10-31-semihosting.html">Semihosting on ARM with GCC and OpenOCD</a>

<ul>
<li>這個很有趣，可以用Semihosting直接使用glibc的stdio，不過做實驗就是要吃原味，要又痛又爽才是最高境界，所以這個我就沒去嘗試了</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
