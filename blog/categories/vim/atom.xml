<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2020-02-09T16:29:47+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim POSIX Group Regex 使用方式]]></title>
    <link href="http://wen00072.github.io/blog/2018/08/26/vim-posix-group-regex/"/>
    <updated>2018-08-26T16:22:09+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/08/26/vim-posix-group-regex</id>
    <content type="html"><![CDATA[<p>由於個人需求，需要在<code>vim</code>下面使用稍微複雜的字串搜尋取代。故整理這篇以後可以參考。</p>

<h2>目錄</h2>

<ul>
<li><a href="#vreg-grp-env">測試環境</a></li>
<li><a href="#vreg-grp-intro">問題描述以及POSIX regex grouping 簡介</a></li>
<li><a href="#vreg-grp-syn">參考語法</a></li>
<li><a href="#vreg-grp-ex">範例</a></li>
</ul>


<p><a name="vreg-grp-env"></a></p>

<h2>測試環境</h2>

<pre><code>$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.1 LTS
Release:    18.04
Codename:   bionic

$ vim --version
VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Apr 10 2018 21:31:58)
</code></pre>

<p><a name="vreg-grp-intro"></a></p>

<h2>問題描述以及POSIX regex grouping 簡介</h2>

<p>Regular express 的特色是他可以match不同的pattern，所以用於搜尋和取代是非常的方便，然而當要把<strong>符合條件的字串前面或後面加上字串</strong>就會有一個問題，那就是<strong>符合的字串要怎麼表示？</strong>舉例來說，當我們想要在下面log<code>[mem....]</code> 之後放入<code>test</code>，要怎麼做到? 這時候我們就可以使用<code>reguler expression</code>的<code>group</code> 功能了</p>

<pre><code>[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x0000000000057fff] usable
[    0.000000] BIOS-e820: [mem 0x0000000000058000-0x0000000000058fff] reserved
[    0.000000] BIOS-e820: [mem 0x0000000000059000-0x000000000009dfff] usable
</code></pre>

<p><a name="vreg-grp-syn"></a></p>

<h2>參考語法</h2>

<ul>
<li>指定<code>group</code>，一組regex可以指定零到多個<code>group</code>

<ul>
<li><code>\(match_patter\)</code></li>
</ul>
</li>
<li>取值

<ul>
<li><code>\0</code>

<ul>
<li>前項所有的<code>group</code></li>
</ul>
</li>
<li><code>\1</code>

<ul>
<li>第一組<code>group</code></li>
</ul>
</li>
<li><code>\2</code>

<ul>
<li>第二組<code>group</code></li>
</ul>
</li>
<li><code>\3</code>

<ul>
<li>第三組<code>group</code></li>
</ul>
</li>
<li>千秋萬世直到永遠</li>
</ul>
</li>
</ul>


<p><a name="vreg-grp-ex"></a></p>

<h2>範例</h2>

<p>就用上面的訊息當範例吧</p>

<pre><code>[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x0000000000057fff] usable
[    0.000000] BIOS-e820: [mem 0x0000000000058000-0x0000000000058fff] reserved
[    0.000000] BIOS-e820: [mem 0x0000000000059000-0x000000000009dfff] usable
</code></pre>

<h3>範例一： 在[mem &hellip;]之後插入test</h3>

<ul>
<li>指令: <code>:%s/\(\[mem.*\]\)/\1 test/g</code></li>
</ul>


<pre><code>[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x0000000000057fff] test usable
[    0.000000] BIOS-e820: [mem 0x0000000000058000-0x0000000000058fff] test reserved
[    0.000000] BIOS-e820: [mem 0x0000000000059000-0x000000000009dfff] test usable
</code></pre>

<h3>範例二： 設定三組<code>group</code>，都插入<code>test</code></h3>

<ul>
<li>指令: <code>:%s/\(^\[.*\]\) \(\BIOS-e820:\) \(\[mem.*\]\)/\1 test1 \2 test2 \3 test3 /g</code></li>
</ul>


<pre><code>[    0.000000] test1 BIOS-e820: test2 [mem 0x0000000000000000-0x0000000000057fff] test3  usable
[    0.000000] test1 BIOS-e820: test2 [mem 0x0000000000058000-0x0000000000058fff] test3  reserved
[    0.000000] test1 BIOS-e820: test2 [mem 0x0000000000059000-0x000000000009dfff] test3  usable
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[給自己剪貼用的vim設定]]></title>
    <link href="http://wen00072.github.io/blog/2018/02/15/vim-setup-for-trace-c-code/"/>
    <updated>2018-02-15T04:03:41+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/02/15/vim-setup-for-trace-c-code</id>
    <content type="html"><![CDATA[<p>分享使用<code>vim</code> 的心得，加上使用Vundle plugin管理工具功能配合外部程式碼分享軟體<code>cscope</code>和<code>ctags</code>來trace <code>C</code>語言的程式碼以及編輯<code>Python</code>程式碼相關設定。</p>

<ul>
<li><p>致謝，感謝網友<a href="http://scottt.tw/">Scott</a>介紹vim register概念，<a href="http://yodalee.blogspot.tw/">葉闆</a>介紹的tagbar，和Kyle Lin介紹的airline。</p></li>
<li><p>2020/Feb/09: <font color="red"><strong>由於vimrc 一直在更新，現在我自己用的<code>.vimrc</code>會持續地更新在<a href="https://github.com/wen00072/dev_settings/blob/master/vim/vimrc">這邊</a></strong></font>，這邊的文章就當作示範教學了。</p></li>
</ul>


<h2>目錄</h2>

<ul>
<li><a href="#vtr-env">測試環境</a></li>
<li><a href="#vtr-pkg">懶人包</a></li>
<li><a href="#vtr-set">設定.vimrc以及Vundle plugins</a>

<ul>
<li>  <a href="#vtr-set-prep">事前準備</a></li>
<li>  <a href="#vtr-set-insvd">安裝Vundle</a></li>
<li>  <a href="#vtr-set-vdplg">我安裝的Vundle Plugins</a>

<ul>
<li><a href="#vtr-set-vdplg-ed">編輯器相關</a>

<ul>
<li><a href="#vtr-set-vdplg-al">airline</a>

<ul>
<li><a href="#vtr-set-vdplg-al-pre">安裝準備</a></li>
<li><a href="#vtr-set-vdplg-al-set">設定airline</a></li>
</ul>
</li>
<li><a href="#vtr-set-vdplg-ed-itl">indentLine</a></li>
<li><a href="#vtr-set-vdplg-vbw">vim-better-whitespace</a></li>
</ul>
</li>
<li><a href="#vtr-set-vdplg-tr">Trace C語言程式碼相關</a>

<ul>
<li><a href="#vtr-set-vdplg-tr-cm">cscope_maps</a></li>
<li><a href="#vtr-set-vdplg-tr-se">SrcExpl</a></li>
<li><a href="#vtr-set-vdplg-tr-tl">taglist</a></li>
<li><a href="#vtr-set-vdplg-tr-nd">nerdtree</a></li>
<li><a href="#vtr-set-vdplg-tr-tri">Trinity</a></li>
<li><a href="#vtr-set-vdplg-tr-tgb">tagbar</a></li>
</ul>
</li>
<li><a href="#vtr-set-md">Markdown 語法支援</a>

<ul>
<li><a href="#vtr-set-md-pdoc">vim-pandoc-syntax</a></li>
</ul>
</li>
<li><a href="#vtr-set-py">Python開發相關</a>

<ul>
<li><a href="#vtr-set-py-prepare">準備工作</a></li>
<li><a href="#vtr-set-py-pm">python-mode</a></li>
<li><a href="#vtr-set-py-sc">syntastic</a></li>
<li><a href="#vtr-set-py-pt">python_match</a></li>
<li><a href="#vtr-set-py-id">indentpython</a></li>
</ul>
</li>
</ul>
</li>
<li>  <a href="#vtr-set-misc">和Plugin 無關的設定</a>

<ul>
<li><a href="#vtr-set-misc-ed">編輯器和顯示特殊字元相關設定</a></li>
<li><a href="#vtr-set-misc-ind">Indent相關設定</a></li>
<li><a href="#vtr-set-misc-msc">其他</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#vtr-test">參考資料</a></li>
</ul>


<p><a name="vtr-env"></a></p>

<h2>測試環境</h2>

<pre><code class="text">$ lsb_release  -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 16.04.3 LTS
Release:    16.04
Codename:   xenial


$ ctags --version
Exuberant Ctags 5.9~svn20110310, Copyright (C) 1996-2009 Darren Hiebert
...

$ cscope --version
cscope: version 15.8b

$ vim --version
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:44:48)
Included patches: 1-1689
...
</code></pre>

<p><a name="vtr-set"></a></p>

<h2>設定.vimrc以及Vundle plugins</h2>

<p><a name="vtr-set-prep"></a></p>

<h3>事前準備</h3>

<p>您需要確認</p>

<ul>
<li>vim版本為7.4以上</li>
<li>安裝ctags和cscope，指令如下
<code>sudo apt-get install exuberant-ctags cscope</code></li>
</ul>


<p><a name="vtr-set-insvd"></a></p>

<h3>安裝Vundle</h3>

<p><code>Vundle</code>是vim plugin 管理工具，他可以透過URL, github, 以及local FS等方式安裝甚至更新Plugin。類似的工具還有不少，我只是挑看到的第一個而已。</p>

<p><code>Vundle</code>常用的指令如下，還蠻容易望文生義所以我就不解釋了</p>

<ul>
<li><code>:PluginList</code></li>
<li><code>:PluginInstall</code></li>
<li><code>:PluginClean</code></li>
<li><code>:PluginUpdate</code></li>
</ul>


<p>安裝方式如下</p>

<ul>
<li><p>首先你要下載<code>Vundle</code>，指令如下
<code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></p></li>
<li><p>接下來在你的.vimrc加入下面這段，我是從<a href="https://github.com/VundleVim/Vundle.vim">官方網頁</a>改的，其實只是把他的範例Plugin幹掉並加上分隔線及分隔線內的註解而已</p></li>
</ul>


<pre><code class="text .vimrc 要加的部份">"====================================================================
" Start vundle
"====================================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"===============================================================
" Write your plugins here
"===============================================================
Plugin 'Yggdroot/indentLine'

"====================================================================
" Run vundle
"====================================================================
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
</code></pre>

<p>注意下面列出的這幾行statements，你要新增或移除Plugin就是改這個地方。這些Plugin將會在後面介紹。剛好我要安裝的Plugin都是在<a href="https://github.com">GitHub</a>上開發或有mirror。而<code>Vundle</code>可以用直接指定Plugin 專案在GitHub相對路徑即可安裝。這些描述也是<code>Vundle</code>載入Plugin　的順序，沒寫對順序有可能有相依問題請自行注意。</p>

<p>例如<code>https://github.com/Yggdroot/indentLine</code> 就寫成<code>Yggdroot/indentLine</code></p>

<pre><code class="text 我安裝的Plugin">"===============================================================
" Write your plugins here
"===============================================================
Plugin 'Yggdroot/indentLine'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'chazy/cscope_maps'
Plugin 'vim-scripts/taglist.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'wesleyche/SrcExpl'
Plugin 'wesleyche/Trinity'
Plugin 'majutsushi/tagbar'
</code></pre>

<ul>
<li>確定新增/刪除Plugin後，就可以執行vim/gvim，使用下面命令

<ul>
<li><code>:PluginInstall</code></li>
<li><code>:PluginClean</code></li>
</ul>
</li>
</ul>


<p><a name="vtr-set-vdplg"></a></p>

<h3>我安裝的Vundle Plugins</h3>

<p>因為安裝方式已經在上面了，這邊就以介紹為主</p>

<p><a name="vtr-set-vdplg-ed"></a></p>

<h4>編輯器相關</h4>

<p><a name="vtr-set-vdplg-al"></a></p>

<h5>airline</h5>

<p><a name="vtr-set-vdplg-al-pre"></a></p>

<h6>安裝準備</h6>

<p>先看圖，圖中最下方的那行就是airline，可以顯示一些有用的資訊
<img src=/images/vim_ind11.jpg></p>

<p>由左到右我們可以看到Vim 模式，Git branch 等資訊。以及一些比較特別的符號，這表示我們需要</p>

<ul>
<li>讓airline取得git資訊</li>
<li>讓airline取得特別符號</li>
</ul>


<p>也就是說，在安裝<code>airline</code>前要做一些前置動作如下</p>

<ul>
<li>讓airline取得git資訊

<ul>
<li>很簡單，安裝<code>vim-fugitive</code> plugin即可</li>
</ul>
</li>
<li>讓airline取得特別符號
這也不難，就是安裝特殊字型，並且設定GUI時存取這些字型。方式如下</li>
</ul>


<p><strong>取得字型</strong></p>

<pre><code class="text">git clone https://github.com/powerline/fonts
</code></pre>

<p><strong>安裝字型</strong></p>

<pre><code class="text">cd fonts &amp;&amp; ./install.sh
</code></pre>

<p><strong> .vimrc中指定安裝的字型 </strong></p>

<pre><code class="text">set guifont=Inconsolata\ for\ Powerline\ 20
</code></pre>

<p><a name="vtr-set-vdplg-al-set"></a></p>

<h6>設定airline</h6>

<p>把下面的資料放入<code>.vimrc</code>即可</p>

<pre><code class="text">let g:airline_powerline_fonts = 1
set laststatus=2
</code></pre>

<p><a name="vtr-set-vdplg-ed-itl"></a></p>

<h5>indentLine</h5>

<p>當Ident為空白增加以下的Indent 對齊參考資線
<img src=/images/vim_ind2.jpg></p>

<p><strong>注意此Plugin在Ident為tab同時又加上顯示tab字元時自動失效，目前workaround就是顯示tab字元為<code>|</code>，接下來以<code>.</code>延伸作為辨別。範例如下：</strong>
<img src=/images/vim_ind1.jpg></p>

<p><a name="vtr-set-vdplg-vbw"></a></p>

<h5>vim-better-whitespace</h5>

<p>將<a href="http://stackoverflow.com/questions/22273233/what-is-meant-by-%0Atrailing-space-and-whats-the-difference-between-it-and-a-blank">trailing space</a>顯示成明顯的紅色
<img src=/images/vim_ind3.jpg></p>

<p><a name="vtr-set-vdplg-tr"></a></p>

<h4>Trace 程式碼相關</h4>

<p><a name="vtr-set-vdplg-tr-cm"></a></p>

<h5>cscope_maps</h5>

<p>簡單來說，就是把cscope指令對應到Hot key</p>

<p>先列出find部份的指令
<code>text
find : Query for a pattern            (Usage: find c|d|e|f|g|i|s|t name)
       c: Find functions calling this function
       d: Find functions called by this function
       e: Find this egrep pattern
       f: Find this file
       g: Find this definition
       i: Find files #including this file
       s: Find this C symbol
       t: Find this text string   
</code></p>

<p>他的使用方法也很簡單，就是先把游標移動到你要查的statement，再按<code>ctrl</code> + <code>\</code> + <code>c|d|e|f|g|i|s|t 其中一個</code>。</p>

<p>舉例來說，我在下圖中把游標移動到<code>core_sys_select</code>函數後按下<code>ctrl</code> + <code>\</code> + <code>c</code>的結果如下
<img src=/images/vim_ind4.jpg></p>

<p><a name="vtr-set-vdplg-tr-se"></a></p>

<h5>SrcExpl</h5>

<p>當啟動時，您的游標在那個敘述，Source explorer 會切割視窗，印出該敘述的定義。舉例來說，當我游標在138行的<code>free_poll_entry</code>的話，顯示的畫面如下。</p>

<p><img src=/images/vim_ind5.jpg></p>

<p><a name="vtr-set-vdplg-tr-tl"></a></p>

<h5>taglist</h5>

<p>列出目前檔案所有symbol並且可以選擇symbol切換到該symbol在檔案中的位置
<img src=/images/vim_ind6.jpg></p>

<p><a name="vtr-set-vdplg-tr-nd"></a></p>

<h5>nerdtree</h5>

<p>以樹狀顯示目前檔案所在目錄結構，看圖就知道
<img src=/images/vim_ind7.jpg></p>

<p><a name="vtr-set-vdplg-tr-tri"></a></p>

<h5>Trinity</h5>

<p>看完以上三個，你可能會覺得奇怪好像沒提到怎麼啟動。這就是<code>Trinity</code>大顯身手的地方了。你安裝Trinity後，再Vundle後面加上下面的敘述就可以有</p>

<ul>
<li><code>F8</code> : 同時打開或關閉<code>nerdtree</code>, <code>Source explorer</code>, 以及<code>tag list</code></li>
<li><code>F9</code> : 打開或關閉<code>Source explorer</code></li>
<li><code>F10</code>: 打開或關閉<code>tag list</code></li>
<li><code>F11</code>: 打開或關閉<code>nerdtree</code></li>
</ul>


<pre><code class="text .vimrc 的Trinity設定">"====================================================================
" Trinity Settings
"====================================================================
" Open and close all the three plugins on the same time 
nmap &lt;F8&gt;  :TrinityToggleAll&lt;CR&gt; 

" Open and close the Source Explorer separately 
nmap &lt;F9&gt;  :TrinityToggleSourceExplorer&lt;CR&gt; 

" Open and close the Taglist separately 
nmap &lt;F10&gt; :TrinityToggleTagList&lt;CR&gt; 

" Open and close the NERD Tree separately 
nmap &lt;F11&gt; :TrinityToggleNERDTree&lt;CR&gt; 
</code></pre>

<p>以下是按下<code>F8</code> 的畫面
<img src=/images/vim_ind8.jpg></p>

<p><a name="vtr-set-vdplg-tr-tgb"></a></p>

<h5>tagbar</h5>

<p>網友推荐的taglist改良版 plugin，為什麼不換掉taglist呢？因為我喜歡source explorer。除了安裝Plugin外，我也順便設定按下<code>F7</code>可以切換，設定如下。</p>

<pre><code>"====================================================================
" Tagbar Settings
"====================================================================
" Open and close the tagbar separately 
nmap &lt;F7&gt; :TagbarToggle&lt;CR&gt; 
</code></pre>

<p>以下是按下<code>F7</code> 的畫面，可以注意右邊視窗會更進一步地顯示資料結構的成員名稱
<img src=/images/vim_ind10.jpg></p>

<p><a name="vtr-set-md"></a></p>

<h3>Markdown 語法支援</h3>

<p><a name="vtr-set-md-pdoc"></a></p>

<h4>vim-pandoc-syntax</h4>

<p>單純就是讓<code>vim</code>可以顯示<code>Markdown</code> syntax highlight，範例如下圖:
<img src=/images/vim_ind12.jpg></p>

<p><a name="vtr-set-py"></a></p>

<h3>Python開發相關</h3>

<p><a name="vtr-set-py-prepare"></a></p>

<h4>準備工作</h4>

<p>主要是語法檢查套件相關安裝，指令如下</p>

<pre><code>sudo apt install -y flake8 python-rope pylint
</code></pre>

<p><a name="vtr-set-py-pm"></a></p>

<h4>python-mode</h4>

<p><a href="blog/2014/12/06/introduction-to-python-mode-for-vim/">之前</a>有介紹過，偷懶跳過。也許Python用到一陣子可以上手後可以再分享心得。</p>

<p><a name="vtr-set-py-sc"></a></p>

<h4>syntastic</h4>

<p>泛用形語法檢查工具，請參考<a href="https://github.com/vim-syntastic/syntastic">Syntax checking hacks for vim</a>說明。
目前是我靠他幫忙檢查寫的程式是否符合<a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>規範，要注意的是Ubuntu 16.04中<code>vim</code> 套件預設只支援<code>Python 3</code>，要使用vim 編寫<code>Python 2</code>的朋友請自行估狗。我之前是自行編譯<code>vim</code>解決的。</p>

<p>語法檢查範例如下圖
<img src=/images/vim_ind13.jpg></p>

<p><a name="vtr-set-py-pt"></a></p>

<h4>python_match</h4>

<p>讓Python 也可以使用<code>vim</code>中切換配對的快捷鍵<code>%</code></p>

<p><a name="vtr-set-py-py"></a></p>

<h4>python</h4>

<p>提供下列快捷鍵，節錄自Plugin註解:</p>

<ul>
<li><code>]t</code>      &ndash; Jump to beginning of block</li>
<li><code>]e</code>      &ndash; Jump to end of block</li>
<li><code>]v</code>      &ndash; Select (Visual Line Mode) block</li>
<li><code>]&lt;</code>      &ndash; Shift block to left</li>
<li><code>]&gt;</code>      &ndash; Shift block to right</li>
<li><code>]#</code>      &ndash; Comment selection</li>
<li><code>]u</code>      &ndash; Uncomment selection</li>
<li><code>]c</code>      &ndash; Select current/previous class</li>
<li><code>]d</code>      &ndash; Select current/previous function</li>
<li><code>]&lt;up&gt;</code>   &ndash; Jump to previous line with the same/lower indentation</li>
<li><code>]&lt;down&gt;</code> &ndash; Jump to next line with the same/lower indentation</li>
</ul>


<p><a name="vtr-set-py-id"></a></p>

<h4>indentpython</h4>

<p>確保你的程式碼符合<a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>的indent規範</p>

<p><a name="vtr-set-misc"></a></p>

<h3>和Plugin 無關的設定</h3>

<p>以下都加在<code>.vimrc中</code>，建議加到<code>Vundle</code>設定結束後以確保可能會用到的Plugin已經啟動</p>

<p><a name="vtr-set-misc-ed"></a></p>

<h4>編輯器和顯示特殊字元相關設定</h4>

<ul>
<li>設定gvim 的配色，請自行找Color scheme

<ul>
<li><code>colorscheme koehler</code></li>
</ul>
</li>
<li>設定gvim 的字型和大小

<ul>
<li><code>set guifont=Inconsolata\ for\ Powerline\ 32</code></li>
</ul>
</li>
<li>將找到的字串設成高亮度

<ul>
<li><code>set hlsearch</code></li>
</ul>
</li>
<li>游標在的該行背景高亮度

<ul>
<li><code>set cursorline</code></li>
</ul>
</li>
<li>顯示行號

<ul>
<li><code>set nu</code></li>
</ul>
</li>
<li>第八十字元地方顯示高亮度區塊（這是連續兩個描述)

<ul>
<li><code>set colorcolumn=80</code></li>
<li><code>highlight ColorColumn guibg=#202020</code></li>
</ul>
</li>
<li>顯示tab （這是連續兩個描述)

<ul>
<li><code>set listchars=tab:»\</code>

<ul>
<li><strong>注意<code>\</code>後面有一個空白</strong></li>
</ul>
</li>
<li><code>set list</code></li>
</ul>
</li>
</ul>


<p>效果如下圖
<img src=/images/vim_ind9.jpg></p>

<p><a name="vtr-set-misc-ind"></a></p>

<h4>Indent相關設定</h4>

<ul>
<li>Tab相關設定

<ul>
<li><code>set ts=4</code>

<ul>
<li>tab space 為4個字元</li>
</ul>
</li>
<li><code>set expandtab</code>

<ul>
<li>不使用tab，用空白字元代替</li>
</ul>
</li>
<li><code>set shiftwidth=4</code>

<ul>
<li>Auto indent的移動字元數量</li>
</ul>
</li>
</ul>
</li>
<li>visual 模式下一次移動一個indent

<ul>
<li><code>vnoremap &lt; &lt;gv</code>

<ul>
<li>往左移動一個indent</li>
</ul>
</li>
<li><code>vnoremap &gt; &gt;gv</code>

<ul>
<li>往右移動一個indent</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><a name="vtr-set-misc-msc"></a></p>

<h4>其他</h4>

<ul>
<li><code>set clipboard+=unnamed</code>

<ul>
<li>PRIMARY selection的register <code>"*</code>包含vim的unnamed register。白話講就是其他的APP如gedit中滑鼠選字後可以用<code>"*p</code>貼到vim，同樣的<code>"*y6y</code>的結果可以貼在其他的APP如gedit上。這部份有vim <code>register</code>副本，建議到參考資料的副本區一讀。再次感謝<a href="http://scottt.tw/">Scott</a>大大。</li>
</ul>
</li>
</ul>


<p><a name="vtr-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://github.com/VundleVim/Vundle.vim">Vundle Github</a></li>
<li><a href="https://github.com/vim-airline/vim-airline">vim-airline</a></li>
<li><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></li>
<li><a href="https://github.com/powerline/fonts">Powerline fonts</a></li>
<li><a href="https://majutsushi.github.io/tagbar/">Tagbar</a></li>
<li><a href="https://github.com/Yggdroot/indentLine">indentLine</a></li>
<li><a href="https://github.com/ntpeters/vim-better-whitespace">Vim Better Whitespace Plugin</a></li>
<li><a href="https://github.com/chazy/cscope_maps">cscope maps</a></li>
<li><a href="https://github.com/vim-scripts/taglist.vim">taglist</a></li>
<li><a href="https://github.com/scrooloose/nerdtree">Nerd Tree</a></li>
<li><a href="https://github.com/wesleyche/SrcExpl">Source Explorer</a></li>
<li><a href="https://github.com/wesleyche/Trinity">Trinity</a></li>
<li><a href="http://stackoverflow.com/questions/4998582/show-whitespace-characters-in-gvim">Stackoverflow: Show white space and tab in vim</a></li>
<li>Python 相關

<ul>
<li>Plugins

<ul>
<li><a href="https://github.com/python-mode/python-mode">Python Mode</a></li>
<li><a href="https://github.com/vim-scripts/python.vim">Python</a></li>
<li><a href="https://github.com/vim-scripts/indentpython.vim">Indent Python</a></li>
<li><a href="https://github.com/vim-syntastic/syntastic">Syntax checking hacks for vim</a></li>
<li><a href="https://github.com/vim-scripts/python_match.vim">python_match</a></li>
<li><a href="https://stackoverflow.com/questions/19209139/syntastic-and-python-mode-together">Stackoverflow: Syntastic and Python-mode together?
</a></li>
</ul>
</li>
<li><code>vim</code>設定相關

<ul>
<li><a href="https://wiki.python.org/moin/Vim">Python Wiki: vim</a></li>
<li><a href="https://realpython.com/vim-and-python-a-match-made-in-heaven/">VIM and Python – A Match Made in Heaven</a></li>
</ul>
</li>
</ul>
</li>
<li>和plugin無關的vim trace code資料

<ul>
<li><a href="http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/">給程式設計師的Vim入門圖解說明</a></li>
<li><a href="http://wen00072.github.io/blog/2014/11/24/the-skin-slides-to-trace-code-on-line/">Trace 程式碼之皮投影片上線</a></li>
</ul>
</li>
<li>副本: vim 的register概念

<ul>
<li><a href="http://usevim.com/2012/04/13/registers/">usevim: Vim 101: Registers</a></li>
<li><a href="http://stackoverflow.com/questions/11489428/how-to-make-vim-paste-from-and-copy-to-systems-clipboard">Stackoverflow: How to make vim paste from (and copy to) system&rsquo;s clipboard?</a></li>
</ul>
</li>
</ul>


<p><a name="vtr-pkg"></a></p>

<h2>懶人包</h2>

<ul>
<li>安裝相關軟體，Vundle和airline字型</li>
</ul>


<pre><code class="text">sudo apt-get install -y exuberant-ctags cscope vim-gtk git flake8 python-rope pylint
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
git clone https://github.com/powerline/fonts
cd fonts &amp;&amp; ./install.sh
</code></pre>

<ul>
<li>剪貼下面的文字並存放到 ~/.vimrc</li>
</ul>


<pre><code class="text .vimrc">"====================================================================
" Start vundle
"====================================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"===============================================================
" Write your plugins here
"===============================================================
" Layouts
Plugin 'Yggdroot/indentLine'
Plugin 'ntpeters/vim-better-whitespace'

" Markdown
Plugin 'vim-pandoc/vim-pandoc-syntax'

" Python related
Plugin 'python-mode/python-mode'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'vim-scripts/python_match.vim'
Plugin 'vim-scripts/python.vim'

" Misc tools
Plugin 'kien/ctrlp.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'Valloric/YouCompleteMe'
Plugin 'chazy/cscope_maps'
Plugin 'vim-scripts/taglist.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'wesleyche/SrcExpl'
Plugin 'wesleyche/Trinity'
Plugin 'majutsushi/tagbar'

"====================================================================
" Run vundle
"====================================================================
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"====================================================================
" Tagbar Settings
"====================================================================
" Open and close the tagbar separately
nmap &lt;F7&gt; :TagbarToggle&lt;CR&gt;

"====================================================================
" Trinity Settings
"====================================================================
" Open and close all the three plugins on the same time
nmap &lt;F8&gt;  :TrinityToggleAll&lt;CR&gt;

" Open and close the Source Explorer separately
nmap &lt;F9&gt;  :TrinityToggleSourceExplorer&lt;CR&gt;

" Open and close the Taglist separately
nmap &lt;F10&gt; :TrinityToggleTagList&lt;CR&gt;

" Open and close the NERD Tree separately
nmap &lt;F11&gt; :TrinityToggleNERDTree&lt;CR&gt;

"====================================================================
" Airline settings
"====================================================================
let g:airline_powerline_fonts = 1
set laststatus=2

"====================================================================
" syntastic settings
"====================================================================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:loaded_syntastic_c_checker = 1
let g:loaded_syntastic_cpp_checker = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

autocmd VimEnter * SyntasticToggleMode " disable syntastic by default

"====================================================================
" pymode settings
"====================================================================
let g:pymode_lint = 1    " Prefer to use syntastic to check lint
let g:pymode_folding = 0 " Unfold all

"====================================================================
" Editor and display Settings
"====================================================================
colorscheme koehler         " Color for gvim

set hlsearch                " Highlight search
set guifont=Inconsolata\ for\ Powerline\ 32 " Font
set cursorline              " Hight background at current cursor line
set nu                      " Display line numbers

" Set background color at colum 80
set colorcolumn=80
highlight ColorColumn guibg=#202020

" Show tabs
set listchars=tab:\|.
set list

" Ensure syntax is on
syntax on

"====================================================================
" Indent Settings
"====================================================================
" Tabs
set ts=4
set expandtab
set shiftwidth=4

" visual indent shift
vnoremap &lt; &lt;gv
vnoremap &gt; &gt;gv

"====================================================================
" MISC Settings
"====================================================================
" Shared unamed regitered with primary selection
set clipboard+=unnamed

" uft-8 encoding: https://stackoverflow.com/questions/16507777/set-encoding-and-fileencoding-to-utf-8-in-vim
set encoding=utf-8
set fileencoding=utf-8

"====================================================================
" Python Settings
"====================================================================
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
let python_highlight_all=1

"====================================================================
" pandoc Settings
"====================================================================
" Disable autoconeal for markdown
augroup pandoc_syntax
    au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
    au! BufNewFile,BufFilePre,BufRead *.markdown set filetype=markdown.pandoc
augroup END

let g:pandoc#syntax#conceal#use = 0

"====================================================================
" YCM Settings
"====================================================================
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0

"====================================================================
" Console tab setting:
" Ref https://superuser.com/questions/410982/in-vim-how-can-i-quickly-switch-between-tabs
"====================================================================
nnoremap &lt;S-Left&gt; :tabprevious&lt;CR&gt;
nnoremap &lt;S-Right&gt; :tabnext&lt;CR&gt;
</code></pre>

<ul>
<li>gvim -> <code>:PluginInstall</code> 安裝Plugin重新開啟收工</li>
</ul>


<h3>其他</h3>

<ul>
<li>cscope產生database供vim使用

<ul>
<li><code>cscope -bqkR</code>

<ul>
<li>k表示使用kernel mode，不把/usr/include之類的加入資料庫。Cross compile也不會使用host 的header file，所以請自行斟酌。其他參數請自己問男人。</li>
</ul>
</li>
</ul>
</li>
<li>ctags產生database供vim使用

<ul>
<li><code>ctags -R</code></li>
</ul>
</li>
<li>要在vim使用到ctags和cscope的話，請記得<strong>vim一定要開在database同一層目錄!</strong></li>
</ul>


<p>舉例來說，你在/tmp/linux-stable目錄下了上面兩個指令。要開啟檔案請在/tmp/linux-stable目錄中指定對應路徑。範例如下</p>

<pre><code class="text">user@host:/tmp/linux-stable$ gvim fs/select.c
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash下自動完成gvim --remote-tab]]></title>
    <link href="http://wen00072.github.io/blog/2017/03/28/gvim-remote-tabzi-dong-wan-cheng/"/>
    <updated>2017-03-28T21:15:16+08:00</updated>
    <id>http://wen00072.github.io/blog/2017/03/28/gvim-remote-tabzi-dong-wan-cheng</id>
    <content type="html"><![CDATA[<p>在gvim需要開tab要打<code>--remote-tab</code>，打久就開始厭煩想偷懶。後來整理網路上的bash_completion相關資料拼湊一個堪用的版本分享一下。因為我只是想偷懶，所以完全沒有去了解bash_completion的細節。嘛，反正可以組裝需要的功能就好。</p>

<h2>目錄</h2>

<ul>
<li><a href="#ac_env">測試環境</a></li>
<li><a href="#ac_inst">安裝方式</a></li>
<li><a href="#ac_use">使用方式</a></li>
<li><a href="#ac_gvf">gvim bash_completion script</a></li>
<li><a href="#ac_ref">參考資料</a></li>
</ul>


<p><a name="ac_env"></a></p>

<h2>測試環境</h2>

<pre><code>$ lsb_release  -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 16.04.2 LTS
Release:    16.04
Codename:   xenial
</code></pre>

<p><a name="ac_inst"></a></p>

<h2>安裝方式</h2>

<ol>
<li>將<a href="#ac_gvf">下面</a>文字貼到編輯器，存成<code>/etc/bash_completion.d/gvim</code></li>
<li>使用下面指令新增gvim completion</li>
</ol>


<pre><code class="text 新增gvim completion指令">$ . /etc/bash_completion.d/gvim
</code></pre>

<p><a name="ac_use"></a></p>

<h2>使用方式</h2>

<ul>
<li>一般使用，直接gvim <code>tab</code> 顯示檔案或目錄</li>
</ul>


<pre><code>$ gvim `tab`
changelog.Debian.gz  copyright            README.emacs         RelNotes/
changelog.gz         NEWS.Debian.gz       README.md            
contrib/             README.Debian        README.source 
</code></pre>

<ul>
<li>要使用tab時，下gvim -<code>tab</code> 就會自動填入<code>--remote-tab</code>，接下來再按<code>tab</code>即可選擇檔案或目錄</li>
</ul>


<pre><code>$ gvim --remote-tab 
changelog.Debian.gz  copyright            README.emacs         RelNotes/
changelog.gz         NEWS.Debian.gz       README.md            
contrib/             README.Debian        README.source 
</code></pre>

<p><a name="ac_gvf"></a></p>

<h2>gvim bash_completion script</h2>

<pre><code class="sh gvim">_gvim()
{
    local cur prev
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--remote-tab"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    compopt -o default; COMPREPLY=()
    return 0
}
complete -F _gvim gvim
</code></pre>

<p><a name="ac_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://debian-administration.org/article/316/An_introduction_to_bash_completion_part_1">An introduction to bash completion: part 1</a></li>
<li><a href="https://debian-administration.org/article/317/An_introduction_to_bash_completion_part_2">An introduction to bash completion: part 2</a></li>
<li><a href="http://stackoverflow.com/questions/12933362/getting-compgen-to-include-slashes-on-directories-when-looking-for-files">stackoverflow: Getting compgen to include slashes on directories when looking for files</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Mode for Vim簡介]]></title>
    <link href="http://wen00072.github.io/blog/2014/12/06/introduction-to-python-mode-for-vim/"/>
    <updated>2014-12-06T13:49:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/12/06/introduction-to-python-mode-for-vim</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/klen/python-mode">Python Mode</a>是一個vim下面關於Python 的plugin，快速整理一下以前看的文件。</p>

<h2>目錄</h2>

<ul>
<li><a href="#install">安裝</a></li>
<li><a href="#use">使用</a></li>
<li><a href="#vim-settings">.vimrc 設定更動</a></li>
<li><a href="#remarks">Remarks</a></li>
<li><a href="#ref">參考資料</a></li>
</ul>


<p><a name="install"></a></p>

<h2>安裝</h2>

<h2>使用vundle</h2>

<ul>
<li>在.vim 加入</li>
</ul>


<pre><code>Bundle 'klen/python-mode'
</code></pre>

<ul>
<li>在vim下打:BundleInstall
*（不確定是否必要）離開vim 再重新啟動vim</li>
<li>執行下面命令</li>
</ul>


<pre><code>:helptags ~/.vim/bundle/python-mode/doc
</code></pre>

<h2>使用Pathogen管理下的安裝</h2>

<ul>
<li>下載套件</li>
</ul>


<pre><code>$ cd ~/.vim/bundle
$ git clone git://github.com/klen/python-mode.git
</code></pre>

<ul>
<li>在.vimrc啟動，加入以下內容</li>
</ul>


<pre><code>" Pathogen load
filetype off

call pathogen#infect()
call pathogen#helptags()

filetype plugin indent on
syntax on
</code></pre>

<p><a name="use"></a></p>

<h2>使用</h2>

<ul>
<li>執行

<ul>
<li><code>\r</code>

<ul>
<li><code>\</code>為<code>&lt;leader&gt;</code> key的預設值</li>
</ul>
</li>
</ul>
</li>
<li>除錯

<ul>
<li><code>\b</code>

<ul>
<li>設定中斷點，python mode會自動偵測除錯器，我使用pdb。不過設中斷點後執行之後那些除錯命令要在那邊下還不清楚。</li>
</ul>
</li>
</ul>
</li>
<li>查詢

<ul>
<li>游標到要查詢的keyword按<code>K</code>

<ul>
<li>查詢目前statement使用方式</li>
</ul>
</li>
</ul>
</li>
<li>查詢PyDoc資料

<ul>
<li><code>:PymodeDoc</code> 你要查詢的東西

<ul>
<li>ex: <code>:PymodeDoc print</code></li>
</ul>
</li>
</ul>
</li>
<li>區塊折疊/展開

<ul>
<li><code>zo</code>

<ul>
<li>展開區塊</li>
</ul>
</li>
<li><code>zc</code>

<ul>
<li>折疊區塊</li>
</ul>
</li>
<li><code>za</code>

<ul>
<li>toggle區塊</li>
</ul>
</li>
<li>以上的操作<code>o</code>, <code>c</code>，<code>a</code>換成<code>O</code>, <code>C</code>, <code>A</code>的話表示Apply到目前區塊下面所有的子區塊</li>
</ul>
</li>
<li>移動

<ul>
<li><code>[[</code>

<ul>
<li>移動到游標上方第一層的block，通常是在查詢目前trace到哪個function或是class</li>
</ul>
</li>
<li><code>]]</code>

<ul>
<li>移動到游標下方第一層的block，通常是用於切換下一個function或是class</li>
</ul>
</li>
<li><code>[m</code>

<ul>
<li>移動到游標上方class 第一個method</li>
</ul>
</li>
<li><code>]m</code>

<ul>
<li>移動到游標下方class 第一個method</li>
</ul>
</li>
</ul>
</li>
<li>移動到定義(函數、class）

<ul>
<li><code>CTRL + C 後按g</code></li>
</ul>
</li>
<li>區塊處理

<ul>
<li>先定義處理方式x&#8217;, x&#8217;可代換複製(y)，刪除(d)，選取(v)等</li>
<li><code>x'aC</code>

<ul>
<li>處理整個class</li>
</ul>
</li>
<li><code>x'iC</code>

<ul>
<li>inner, 處理目前游標包含的那整個class</li>
</ul>
</li>
<li><code>x'aM</code>

<ul>
<li>處理一個整個method</li>
</ul>
</li>
<li><code>x'iM</code>

<ul>
<li>inner, 處理目前游標包含的那整個method</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><a name="vim-settings"></a></p>

<h2>.vimrc 設定更動</h2>

<ul>
<li><p>預設使用Python 2，更改使用Python 3</p>

<ul>
<li><code>let g:pymode_python = 'python3'</code>

<ul>
<li>注意！這招要確認你的vim已經支援Python3，確認方式</li>
<li><code>$ vim --version | grep python3</code> 應該要有+python3，目前Ubuntu 14.04.1沒有看到設定語法檢查工具，放這邊主要是可以檢查是否已經裝了相關套件了。</li>
</ul>
</li>
</ul>
</li>
<li><p>let g:pymode_lint_checkers = [&lsquo;pyflakes&rsquo;, &lsquo;pep8&rsquo;, &lsquo;mccabe&rsquo;]</p>

<ul>
<li>Refactor，使用rope，我沒使用過rope，故跳過</li>
</ul>
</li>
</ul>


<p><a name="remarks"></a></p>

<h2>Remarks</h2>

<p>我安裝了下面兩個套件，用來讓Python Mode檢查語法。不過可以明顯感覺到用了速度變很慢，目前還沒打算去看是否設定有錯誤。</p>

<ul>
<li><code>sudo apt-get install python-rope</code></li>
<li><code>sudo apt-get install pylint</code></li>
</ul>


<p><a name="ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://github.com/klen/python-mode/blob/develop/doc/pymode.txt">Python Mode說明</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trace 程式碼之皮投影片上線]]></title>
    <link href="http://wen00072.github.io/blog/2014/11/24/the-skin-slides-to-trace-code-on-line/"/>
    <updated>2014-11-24T17:00:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/11/24/the-skin-slides-to-trace-code-on-line</id>
    <content type="html"><![CDATA[<p>非常簡單的介紹vim trace code時可以用到的功能</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/41960022" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/zzz00072/trace-41960022" title="Trace 程式碼之皮" target="_blank">Trace 程式碼之皮</a> </strong> from <strong><a href="//www.slideshare.net/zzz00072" target="_blank">Wen Liao</a></strong> </div></p>

<script async class="speakerdeck-embed" data-id="9ce02020562801328ec912126f62240e" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
</feed>
