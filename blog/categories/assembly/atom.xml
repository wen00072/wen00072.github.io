<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Assembly | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/assembly/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2020-02-09T16:29:47+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GNU as 投影片上線]]></title>
    <link href="http://wen00072.github.io/blog/2015/08/30/using-as-slide-is-online/"/>
    <updated>2015-08-30T11:44:36+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/08/30/using-as-slide-is-online</id>
    <content type="html"><![CDATA[<iframe src="//www.slideshare.net/slideshow/embed_code/key/vAKND86uAQxxJj" width="720" height="560" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/zzz00072/gnu-as" title="GNU AS簡介" target="_blank">GNU AS簡介</a> </strong> from <strong><a href="//www.slideshare.net/zzz00072" target="_blank">Wen Liao</a></strong> </div></p>

<script async class="speakerdeck-embed" data-id="161641ad32e84a3893c81b2c65437720" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using as 手冊筆記]]></title>
    <link href="http://wen00072.github.io/blog/2015/05/24/notes-on-using-as/"/>
    <updated>2015-05-24T20:48:02+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/05/24/notes-on-using-as</id>
    <content type="html"><![CDATA[<p><strong>先承認我自己很不滿意這篇，太亂了。只能當工具查keyword用。不過as 手冊的確就是指令和語法。原本是以英文字母順序說明，我只是把這些用自認的方式重新分類。很多地方也真的只有句意翻譯。就把他當作看手冊的導讀，有找的需要的再進去看<a href="https://sourceware.org/binutils/docs/as/index.html">手冊</a>吧。</strong></p>

<p>本篇只討論ELF部份，其他binary format跳過。</p>

<h2>目錄</h2>

<ul>
<li><a href="#as_param">as參數</a></li>
<li><a href="#as_term">名詞解釋</a>

<ul>
<li><a href="#as_term_const">常數</a></li>
<li><a href="#as_term_sec">Section</a>

<ul>
<li><a href="#as_term_sec_undef">undefined section</a></li>
</ul>
</li>
<li><a href="#as_term_rel">relocation</a></li>
</ul>
</li>
<li><a href="#as_expr">Expression</a>

<ul>
<li><a href="#as_expr_emp">Empty expression</a></li>
<li><a href="#as_expr_int">Integer expression</a>

<ul>
<li><a href="#as_expr_int_arg">Arguments</a></li>
<li><a href="#as_expr_int_op">Operators</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#as_dit">directives</a>

<ul>
<li><a href="#as_dit_var">變數相關</a></li>
<li><a href="#as_dit_sym_desc">Symbol的描述</a></li>
<li><a href="#as_dit_sym_type">Symbole type</a></li>
<li><a href="#as_dit_sym_other">其他Symbol 相關</a></li>
<li><a href="#as_dit_sec">Section</a></li>
<li><a href="#as_dit_cond">條件以及控制相關</a></li>
<li><a href="#as_dit_mac">巨集</a>

<ul>
<li><a href="#as_dit_mac_alt">altmacro</a></li>
</ul>
</li>
<li><a href="#as_dit_elf">ELF相關</a>

<ul>
<li><a href="#as_dit_elf_stack">ELF section stack</a></li>
<li><a href="#as_dit_elf_vis">ELF visibility</a></li>
</ul>
</li>
<li><a href="#as_dit_dbg">除錯相關</a></li>
<li><a href="#as_dit_misc">未分類</a></li>
</ul>
</li>
<li><a href="#as_ref">參考資料</a></li>
</ul>


<p><a name="as_param"></a></p>

<h2><code>as</code>參數</h2>

<p>只提幾個我有興趣的部份</p>

<ul>
<li><code>-Z</code>：硬上，就算有錯誤照樣組譯沒有錯的部份。</li>
<li><code>--gstabs+</code>：好東西，可以幫你加入debug資訊，然後直接用gdb除錯。</li>
<li>如果檔案副檔名為<code>.s</code>，就是普通的組合語言原始檔。</li>
<li>如果檔案副檔名為<code>.S</code>，就可以使用<code>cpp</code>（還記得c preporcessor吧?)來處理前置處理。</li>
</ul>


<p><a name="as_term"></a></p>

<h2>名詞解釋</h2>

<ul>
<li><code>symbol</code>：由字母、數字、和<code>_</code>、<code>.</code>、<code>$</code>組成的字串。不得以數字開頭。

<ul>
<li><code>label</code>：  <code>symbol</code>後面加<code>:</code></li>
</ul>
</li>
<li><code>.</code>開頭的symbol是gas 的<code>directive</code></li>
<li><code>expression</code>：運算式，結果代表不是位址就是單純的數字</li>
<li>原始碼不是以上的情況，由英文字母開頭組成的字串就是instruction</li>
<li>原始碼最後一行一定要是<code>\n</code>。目前網友Carl有提供為什麼這樣規定的<a href="chrome-extension://klbibkeccnjlkjkiokjodocebajanakg/suspended.html#uri=http://unix.stackexchange.com/questions/18743/whats-the-point-in-adding-a-new-line-to-the-end-of-a-file">link</a>。</li>
</ul>


<p><a name="as_term_const"></a></p>

<h3>常數</h3>

<ul>
<li>字元常數：

<ul>
<li><code>'字元</code></li>
<li>顯示\： <code>'\\</code></li>
</ul>
</li>
<li>字串：<code>"字串"</code></li>
</ul>


<p><a name="as_term_sec"></a></p>

<h3>Section</h3>

<p>一個連續的記憶體空間。這段連續空間都是為了處理某些單一特定的任務如執行程式碼、存放global變數等。</p>

<p>題外話，<code>.bss</code>存在的目的是節省儲存空間，沒有初始的全域變數當然不需要在檔案中保留儲存空間。</p>

<p><a name="as_term_sec_undef"></a></p>

<h4>undefined section</h4>

<p>在組譯的時段只要位址無法決定的symbol，一律放到undefined section。然後祈禱linker幫你搞定。</p>

<p><a name="as_term_rel"></a></p>

<h3>relocation</h3>

<p>前面的文有提到，linker功能之一就是把不同的object檔案<strong>黏</strong>成一個執行檔。要怎麼<strong>黏</strong>呢？</p>

<p>每個object 檔案的起始點都是address 0。由linker計算並設定每個object檔案最後在執行檔放置的address，避免這些object的內容互相覆蓋。</p>

<p>而linker要怎麼搬移和設定最後的位址呢？這是因為object檔案內已經有規範好的不同名稱的好幾個連續空間，也就是section。所以linker把這些object檔案中相同section名稱的連續空間搬到執行檔內相同名稱的空間，並且保證執行檔內這些section的空間也是連續的。而搬移的動作並設定section的runtime address就稱為<code>relocation</code>。</p>

<p>Linker在relocation時需要考慮的問題，as也幫他處理了，這些問題是</p>

<ul>
<li>目前這個位址要對應到object檔案的哪個地方?</li>
<li>這個位址會需要佔用多少byte的空間?不懂？int和char吃的空間總會不一樣吧。</li>
<li>目前位址對應到的是哪個section? 這個位址和對應section的offset為何？</li>
<li>目前的位址是絕對位址還是和program counter相對的位址?</li>
</ul>


<p>另外要注意的是，大部分的位址可以表示成
<code>asm
     (section) + (offset into section)
</code></p>

<p><a name="as_expr"></a></p>

<h2>Expression</h2>

<p>expression的結果代表不是位址就是單純的數字。這些數字要嘛是絕對位址、要嘛就是某個section的offset。而expression之間可以有空白。</p>

<p><a name="as_expr_emp"></a></p>

<h3>Empty expression</h3>

<p>空白字元或是null，其值會被設為0</p>

<p><a name="as_expr_int"></a></p>

<h3>Integer expression</h3>

<p>由一個以上的argument和operator組成的expression</p>

<p><a name="as_expr_int_arg"></a></p>

<h4>Arguments</h4>

<p>包含 symbols, numbers 或subexpressions，分別討論</p>

<ul>
<li>symbol：結果將會是 {section setction的offset數值}，數值會是32位元的二的補數（就是有正負值啦）</li>
<li>numbers：一般來說，是正整數。如果你要處理浮點數或是大數（超過32位元的數字）as會噴警告。你需要自己處理這種情況。</li>
<li>subexpressions：指的是

<ul>
<li>(expression)</li>
<li>prefix operator 伴隨一個 argument</li>
</ul>
</li>
</ul>


<p><a name="as_expr_int_op"></a></p>

<h4>Operators</h4>

<p>用來協助運算section中的offset位址。</p>

<ul>
<li>Infix Operators

<ul>
<li>就一般的binary operator如<code>+</code>, <code>-</code>等</li>
</ul>
</li>
<li>Prefix Operators

<ul>
<li><code>-</code>：負號</li>
<li><code>~</code>：補數，就是將argument的每個位元inverse</li>
</ul>
</li>
</ul>


<p>Infix也和C語言一樣，有優先順序、符號定義也大致相同，列出如下</p>

<ul>
<li>最優先

<ul>
<li><code>*</code>, <code>/</code>, <code>&gt;&gt;</code>, <code>&lt;&lt;</code></li>
</ul>
</li>
<li>第二順位

<ul>
<li><code>|</code>, <code>&amp;</code>, <code>^</code>, <code>!</code></li>
</ul>
</li>
<li>第三順位

<ul>
<li><code>+</code>, <code>-</code>, <code>==</code>, <code>&lt;&gt;</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>

<ul>
<li><code>&lt;&gt;</code>就是<code>!=</code></li>
</ul>
</li>
</ul>
</li>
<li>最低順位

<ul>
<li><code>&amp;&amp;</code>, <code>||</code></li>
</ul>
</li>
</ul>


<p><a name="as_dit"></a></p>

<h2>directives</h2>

<p>重頭戲。directive又稱pseudo-ops，一律以<code>.</code>開頭。照字面理解，這東西是用來協助使用開發，而不是真正的CPU instruction。這邊我只列出<del>看得懂</del>我感興趣的部份。有興趣請參考<a href="https://sourceware.org/binutils/docs/as/Pseudo-Ops.html#Pseudo-Ops">出處</a>。另外和硬體相依的directive請參考<a href="https://sourceware.org/binutils/docs/as/Machine-Dependencies.html#Machine-Dependencies">這邊</a>。</p>

<p><a name="as_dit_var"></a></p>

<h3>變數相關</h3>

<ul>
<li><code>.ascii "字串"</code>：可以用多個字串，中間以<code>,</code>隔開。這些字串最終會被一起放在連續的記憶體中。</li>
<li><code>.asciz "字串"</code>：和樓上的差別是字串後面會自動填<code>\0</code>，和C語言的字串表示方式相同。</li>
<li><code>.balign[wl] abs-expr, abs-expr, abs-expr</code>：和<code>.align</code>差別在b是<code>byte</code>，w是<code>2-byte</code>，l是<code>4-byte</code>。這代表什麼呢？代表要pad的數字(如果有指定的話)要注意fill byte數量。如<code>.balignw 8, 0xbeef</code>。</li>
<li><code>.byte expressions</code>：<code>expression</code>數量可以從0個到多個，中間以<code>,</code>隔開。這些<code>expression</code>會依照順序排列。那麼要幹什麼用呢？你可以這樣玩。</li>
</ul>


<pre><code class="asm">.byte 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00 /* "Hello" */
</code></pre>

<p>還有其他玩法，請參考<a href="http://stackoverflow.com/questions/7290318/use-of-byte-assembler-directive-in-gnu-assembly">這邊</a>和<a href="http://www-ug.eecg.toronto.edu/msl/assembler.html">這邊</a></p>

<ul>
<li><code>.int expressions</code></li>
<li><code>.long expressions</code>

<ul>
<li>上面兩個有同樣效果，<code>expression</code>為16-bit寬度。可以用<code>,</code>隔開。和<code>.byte</code>用法類似。長度以及order會和CPU架構相關。</li>
</ul>
</li>
<li><code>.hword expressions</code></li>
<li><code>.short expressions</code>

<ul>
<li>上面兩個有同樣效果，<code>expression</code>為16-bit寬度。可以用<code>,</code>隔開。和<code>.byte</code>用法類似。</li>
</ul>
</li>
<li><code>.double flonums</code>：就浮點數，可以用<code>,</code>隔開。和<code>.byte</code>用法類似。表示方式要看target CPU架構。</li>
<li><code>.float flonums</code>：就浮點數，可以用<code>,</code>隔開。和<code>.byte</code>用法類似。表示方式要看target CPU架構。</li>
<li><code>.lcomm symbol, length</code>：為<code>symbol</code>保留<code>length</code>的空間，該symbol型態不會是<code>global</code>，並且會被放在<code>.bss</code> section。</li>
<li><code>.octa 大數字</code>：為16-byte寬度。可以用<code>,</code>隔開。和<code>.byte</code>用法類似。</li>
<li><code>.quad 大數字</code>：為8-byte寬度。可以用<code>,</code>隔開。和<code>.byte</code>用法類似。</li>
<li><code>.string "字串"</code>：將字串放到object file中，看不出來和<code>.ascii</code>差在那。</li>
<li><code>.string16 "字串"</code>：將字串放到object file中，字串中的單個字元將會展開成2個bytes。看不出來和<code>.ascii</code>差在那。</li>
<li><code>.string32 "字串"</code>：將字串放到object file中，字串中的單個字元將會展開成4個bytes。看不出來和<code>.ascii</code>差在那。</li>
<li><code>.string64 "字串"</code>：將字串放到object file中，字串中的單個字元將會展開成8個bytes。看不出來和<code>.ascii</code>差在那。</li>
<li><code>.set symbol, expression</code>：將<code>symbol</code>的值設成<code>expression</code>的值。</li>
<li><code>.size symbol, expression</code>：設定<code>symbol</code>空間為<code>expression</code>的值。</li>
</ul>


<p><a name="as_dit_sym_desc"></a></p>

<h3>Symbol的描述</h3>

<p>visibility：local, global or weak</p>

<ul>
<li><code>.extern</code>：單純是相容性使用，特地列出來只是因為手冊說as將所有<code>undefined symbols</code>視為<code>extern</code></li>
<li><code>.global symbol</code></li>
<li><code>.globl symbol</code>

<ul>
<li>以上兩個同樣效果，就是讓<code>linker</code>看得到這個<code>symbol</code>，也就是說透過<code>nm</code>觀察binary也可以看得到這些<code>symbol</code>。</li>
</ul>
</li>
<li><code>.local symbol</code>：讓<code>linker</code>看<font color=red>不</font>到這個<code>symbol</code>。手冊上另外有提到<code>.local</code><a href="https://sourceware.org/binutils/docs/as/Local.html#Local">不支援alignment的問題和解法</a>。<font color="red">我看不懂</font>，有興趣自行去連結參考。</li>
<li><code>.weak symbol</code>：組譯器找不到<code>symbol</code>會產生一個。</li>
</ul>


<p><a name="as_dit_sym_type"></a></p>

<h3>Symbol type</h3>

<ul>
<li><code>.type symbol, type</code>：type 描述方式有<a href="https://sourceware.org/binutils/docs/as/Type.html#Type">五種</a>。我只用我看順眼的那種說明。

<ul>
<li><code>"function"</code>：這個<code>symbol</code>是個function</li>
<li><code>"object"</code>：這個<code>symbol</code>用來存放資料</li>
<li><code>"tls_object"</code>：這個<code>symbol</code>用來存放thread local資料</li>
<li><code>"notype"</code>：沒有指定</li>
<li><code>"gnu_unique_object"</code>：保證該<code>symbol</code>是唯一的symbol</li>
<li><code>"gnu_indirect_function"</code>：看不懂</li>
</ul>
</li>
</ul>


<p><a name="as_dit_sym_other"></a></p>

<h3>其他Symbol 相關</h3>

<ul>
<li><code>.desc symbol, abs-expression</code>：提供描述symbol的特性，細節請參考<a href="#as_dit_sym_desc">前面</a>的說明。</li>
<li><code>.equ symbol, expression</code>：將<code>symbol</code>設成<code>expression</code>的值</li>
<li><code>.equiv symbol, expression</code>：和上面類似，但是如果該<code>symbol</code>之前已經定義過，就會噴錯誤。</li>
</ul>


<p><a name="as_dit_sec"></a></p>

<h3>Section</h3>

<ul>
<li><code>.data</code>：不解釋</li>
<li><code>.test</code>：不解釋</li>
<li><code>.section name</code>：讓as把以下的東西組成<code>name</code>的section。名字雖然可以亂取，但是也要看binary format有沒有支援。如<code>a.out</code>就沒有這東西。</li>
</ul>


<h4>ELF 下的Section directive</h4>

<p>ELF的話，這個directive有加料。說明如下： <code>[]</code>表示optional</p>

<ul>
<li><code>.section name [, "flags"[, @type[,flag_specific_arguments]]]</code>

<ul>
<li><code>flags</code>：可由下面的flag合體組成

<ul>
<li><code>a</code>：allocatable，就是要在記憶體內吃空間，但是loader不一定會載入東西到該section</li>
<li><code>e</code>：非executable或是shared library的section</li>
<li><code>w</code>：可寫入</li>
<li><code>x</code>：可執行</li>
<li><code>M</code>：可被merge</li>
<li><code>S</code>：該section有 zero terminated 字串</li>
<li><code>G</code>：屬於某個section group</li>
<li><code>T</code>：給thread local存放東西用 (存放三小？)</li>
<li><code>?</code>：看不懂，跳過</li>
</ul>
</li>
<li><code>type</code>

<ul>
<li><code>@progbits</code>：section有資料 (怎麼有種廢話的感覺？)</li>
<li><code>@nobits</code>：沒有資料，如<code>.bss</code>這樣的section</li>
<li><code>@note</code>：不是給程式執行的時候使用的section</li>
<li><code>@init_array</code>：該section 有個pointer arrary 指到init 函數(<a href="http://stackoverflow.com/questions/10468531/whats-init-array-section-in-elf-binary">補充說明1</a> <a href="https://sourceware.org/ml/binutils/2009-01/msg00286.html">補充說明2</a>)</li>
<li><code>@fini_array</code>：該section 有個pointer arrary 指到fini 函數</li>
<li><code>@preinit_array</code>：該section 有個pointer arrary 指到pre-init 函數</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>由於<code>@</code>在某些平台如ARM上是註解的符號，這種情況需要用<code>%</code>替代。</p>

<p><code>G</code>和<code>M</code>有特別規範，必須隔離在雙引號外面。而同時要用這兩個flag要以<code>MG</code>順序擺放，範例如下：</p>

<ul>
<li><code>.section name , "flags"MG,...</code></li>
</ul>


<p>Section group目前先假裝沒看到，有機會又看到再回來討論。</p>

<p><a name="as_dit_cond"></a></p>

<h3>條件以及控制相關</h3>

<ul>
<li>if 部份有點雜亂，懶得想範例測試，想像成C語言的<code>#ifdef</code>。剩下自己看<a href="https://sourceware.org/binutils/docs/as/If.html">手冊</a>。</li>
<li><code>.irp symbol,values...</code>：和巨集概念很類似，把<code>.irp ...</code>到<code>.endr</code>之間的instruction用到<code>symbol</code>的部份全部換成value。範例如下。</li>
</ul>


<p>.irp item, 2, 3, 4
    mov    %r\item, $\item
.endr</p>

<p>會展開成
<code>asm
    mov %r2, $2
    mov %r3, $3
    mov %r4, $4
</code></p>

<ul>
<li><code>.irpc  symbol,values...</code>：手冊上面的說明幾乎和<code>irp</code>相同，悲劇的是範例和<code>.irp</code>完全一致。唯一差別是<code>.iprc</code>中有提到character，只能猜測c是character。</li>
<li><code>.offset loc</code>：將locale counter設定成loc。</li>
<li><code>.org new-lc, fill</code>：同樣是更動locale counter，但是只能在同一個section中移動。另外一個要注意的是這個指令只能增加locale counter，硬要減少是不可能的。當locale couter移動後，中間的空白會填入<code>fill</code>的值。不加上<code>, fill</code> as會填0。</li>
<li><code>.rept 次數</code>：重複<code>.rept</code>到<code>.endr</code>指定的次數。</li>
<li><code>.skip size, fill</code>：產生<code>size</code>長度，<code>fill</code>值的資料。</li>
<li><p><code>.fill repeat, size, value</code>：產生<code>value</code>，佔用空間為<code>size</code>。是否要產生多個，否的話<code>repeat</code>填<code>0</code>，是的話<code>repeat</code>填要產生的個數。<code>size</code>和<code>value</code>為optional，<code>size</code>預設為<code>1</code>，<code>value</code>預設為<code>0</code>。</p>

<ul>
<li><code>.fill 2,,</code></li>
<li><code>.fill 2,,10</code></li>
<li><code>.fill 2,4,</code></li>
</ul>
</li>
<li><p><code>.warning "string"</code>：印出警告訊息。</p></li>
<li><code>.err</code>：噴錯誤，除非as有-Z指令，不然別想產生obj檔。</li>
<li><p><code>.error "錯誤訊息"</code>：印出錯誤訊息然後GG。不帶錯誤訊息as會印出檔案名稱和用了<code>.error</code>那行。</p></li>
<li><p><code>.fail expression</code>：<code>expression</code>值大於五百噴警告，小於五百噴錯誤。用在複雜的巢狀巨集或是條件式組合語言中。</p></li>
<li><code>.print "字串"</code>：組譯的時候stdout會印出字串。</li>
<li><code>.end</code>：表示組合語言程式結束</li>
</ul>


<p><a name="as_dit_mac"></a></p>

<h3>巨集</h3>

<p>跳過，自行看<a href="https://sourceware.org/binutils/docs/as/Macro.html">手冊</a></p>

<p><a name="as_dit_elf"></a></p>

<h3>ELF相關</h3>

<ul>
<li><code>.symver symbol, symbol2@nodename</code>：指定symbol的版本號碼，一般用在shared library中。<a href="https://sourceware.org/binutils/docs/as/Symver.html#Symver">詳細說明</a>懶得看，那天GG再回來看。</li>
</ul>


<p><a name="as_dit_elf_stack"></a></p>

<h4>ELF section stack</h4>

<ul>
<li><code>.subsection name</code>：把目前的section push到section stack中，並且把目前的subsection置換成<code>name</code>。</li>
<li><code>.popsection</code>：從section stack中pop最上面的section去覆蓋目前的section</li>
<li><code>.pushsection name [, subsection] [, "flags"[, @type[,arguments]]]</code>：把目前的section push到section stack中，並且把目前的section置換成<code>name</code>以及<code>subsection</code>，<code>type</code>和<code>argument</code>和<code>.section</code>的參數相同。</li>
</ul>


<p><a name="as_dit_elf_vis"></a></p>

<h4>ELF visibility</h4>

<ul>
<li><code>.protected symbol</code>：不但外部看不到該symbol，連內部要使用讀取該symbol的另外一個symbol也要在內部定義。直接舉個虛擬C語言。</li>
</ul>


<pre><code class="c ex.c">static int whatever = 1;
void func(void)
{
    int local = whatever;
}
</code></pre>

<ul>
<li><code>.hidden symbol</code>：想像C語言在function前面加上<code>static</code>，觀念類似，讓該symbol無法被其他component看見。手冊這樣的symbol通常被視為<a href="https://sourceware.org/binutils/docs/as/Hidden.html#Hidden"><code>.protect symbol</code></a>，目前懶得寫程式測試。單純猜測這兩個有不同，不然幹嘛要分成兩個指令。</li>
<li><code>.internal symbol</code>：手冊上提到除了和<code>.hidden</code>有同樣效果外，不同的CPU會針對這個symbol做特別處理，到底是哪些特別處理，手冊沒說。</li>
</ul>


<p><a name="as_dit_dbg"></a></p>

<h3>除錯相關</h3>

<p>大部分跳過，太多背景需要補完。</p>

<ul>
<li><code>.def</code></li>
<li><code>.endef</code></li>
<li><code>.dim</code>：給compiler產生除錯用。</li>
<li><code>.file 檔案行號 檔名</code>：<a href="http://en.wikipedia.org/wiki/DWARF">DWARF2</a>用的除錯，除錯時對應的原始碼行號。</li>
<li><p><code>.func name[,label]</code>：只有開啟除錯有效，必須在結尾加入<code>.endfunc</code>。<code>label</code>就是組合語言內的<code>label</code>，也就是該function的進入點。不填的話，就在<code>name</code>加上prefix 字元當作進入點，通常prefix字元為<code>_</code>。</p></li>
<li><p><code>.loc fileno lineno [column] [options]</code>：<a href="http://en.wikipedia.org/wiki/DWARF">DWARF2</a>用的除錯。整理如下</p>

<ul>
<li><font color="red">手冊假設我們很瞭debug內部資訊，但是我不會。看下來他們有提到

<ul>
<li><code>.debug_line</code> 狀態機</li>
<li><code>.debug_line</code> line number matrix</li>
<li>不明暫存器：<code>is_stmt</code> register，<code>isa</code> register等</font></li>
</ul>
</li>
<li>資訊放在binary 的<code>.debug_line</code> section。</li>
<li>在debuger(?)載入<code>.debug_line</code>資訊時，讀到該行，會把參數<code>fileno</code>, <code>lineno</code>,等參數一併載入。</li>
<li>options:

<ul>
<li><code>basic_block</code>：設定 <code>.debug_line</code>狀態為<code>basic_block</code></li>
<li><code>prologue_end</code>：設定 <code>.debug_line</code>狀態為<code>prologue_end</code></li>
<li><code>epilogue_begin</code>：設定 <code>.debug_line</code>狀態為<code>epilogue_begin</code></li>
<li><code>is_stmt value</code>：設定 <code>is_stmt</code> register 在<code>.debug_line</code>狀態為<code>value</code>，合法數值只有<code>0</code>或<code>1</code>。</li>
<li><code>isa value</code>：設定 <code>isa</code> register 在<code>.debug_line</code>狀態為<code>value</code>，合法數值只有<code>0</code>或<code>1</code>。</li>
<li><code>discriminator value</code>：設定 <code>discriminator</code> register 在<code>.debug_line</code>狀態為<code>value</code>，合法數值只有<code>0</code>或<code>1</code>。</li>
</ul>
</li>
</ul>
</li>
<li><code>.loc_mark_labels enable</code>：是否enble，<code>basic_block register</code>，<font color="red">細節完全看不懂</font>。只知道和debug line number entry有關。</li>
<li><code>.stabs symbol, type, other, desc, value</code>：用來提供資訊給symbolic debuger。詳細資訊請看<a href="https://sourceware.org/binutils/docs/as/Stab.html#Stab">手冊</a></li>
<li><code>.tag structname</code>：compiler產生的輔助directive。用來從symbol table中找出<code>structname</code>的instance。</li>
<li><code>.val addr</code>：看不懂。自己看<a href="https://sourceware.org/binutils/docs/as/Val.html#Val">手冊</a>。看起來是紀錄<code>addr</code>的值，但是怎麼會和symbol table扯上關係？？</li>
</ul>


<p><a name="as_dit_misc"></a></p>

<h3>未分類</h3>

<ul>
<li><code>.include "file"</code>：從目前的位置，把<code>file</code>全部原封不動地放到之後的位置。</li>
<li><code>.align abs-expr1, abs-expr2, abs-expr3</code>：<code>local counter</code> (請參考前面linker script文)結束要對齊的位址倍數。

<ul>
<li><code>abs-expr1</code>：必填。要對齊的數字。根據CPU，數字代表可能是byte，有些代表的是bit。所以要對齊8有的CPU要填8，有些CPU要填3。心理的OS，欠揍。</li>
<li><code>abs-expr2</code>：optional。如果需要填空，可以指定填入的數值。不填就使用預設值，0。</li>
<li><code>abs-expr3</code>：optional。指定跳過數字最多可以幾個，超過就直接不對齊了。<font color="red">(手冊用skip而不用pad讓我在想這到底差別在那？)</font></li>
</ul>
</li>
</ul>


<p>如果後面兩個都不想填，可以直接下<code>.align abs-expr1,,</code>收工。</p>

<ul>
<li><p><code>.comm symbol, length</code>：我是這樣理解啦，就是很多C語言檔案要用同一個全域變數。先摸到的先贏。可以看<a href="http://wen00072.github.io/blog/2014/12/09/global-variables-from-common-symbol-on-the-c-programming-language/">我以前整理</a>的說明。另外有兩點要注意</p>

<ul>
<li>如果有同樣的symbol，在不同檔案中，設定的長度又不同，gas會選最大的。</li>
<li>ELF有隱藏的第3參數，用來指定alignment。</li>
</ul>
</li>
<li><p><code>.gnu_attribute tag, value</code>：GNU屬性<a href="https://sourceware.org/binutils/docs/as/GNU-Object-Attributes.html#GNU-Object-Attributes">自己查</a></p></li>
<li><code>.ident 字串</code>：不同binary format有不同處理，在ELF中會把字串放到<code>.comment</code> section中。要注意，<code>file</code>包括command line參數中<code>-I</code>指定的路徑。</li>
<li><code>.incbin "file"[,skip[,count]]</code>：從目前的位置，把<code>file</code>原封不動地放到之後的位置。你可以透過<code>skip</code>指定從檔案起始地幾個byte後跳過。另外你也可以透過<code>count</code>指定檔案最多include幾個bytes。</li>
</ul>


<p>另外一點要注意，<code>file</code>包括command line參數中<code>-I</code>指定的路徑。</p>

<ul>
<li><code>.version "string"</code>：產生<code>.note</code> section並且將字串放入該section。</li>
</ul>


<p><a name="as_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://sourceware.org/binutils/docs/as/index.html#Top">Using as</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Linux ARM 組合語言]]></title>
    <link href="http://wen00072.github.io/blog/2015/04/22/hello-assembly/"/>
    <updated>2015-04-22T21:34:16+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/04/22/hello-assembly</id>
    <content type="html"><![CDATA[<h2>目錄</h2>

<ul>
<li><a href="#hello-asm-syntax">前言</a></li>
<li><a href="#hello-asm-env">測試環境</a></li>
<li><a href="#hello-asm-ex1">範例：版本一</a></li>
<li><a href="#hello-asm-ex2">範例：版本二</a></li>
<li><a href="#hello-asm-ex3">範例：版本三</a></li>
<li><a href="#hello-asm-ex4">範例：版本四</a></li>
<li><a href="#hello-asm-conl">總結</a></li>
<li><a href="#hello-asm-ext">延伸閱讀及致謝</a></li>
<li><a href="#hello-asm-ref">參考資料</a></li>
</ul>


<p><a name="hello-asm-syntax"></a></p>

<h2>前言</h2>

<p>之前的文章有不少在討論執行檔該長怎麼樣。簡單來說，一個執行檔會有</p>

<ul>
<li>Sections：程式行為和資料會分開放在不同的sections</li>
<li>進入點，也就是system call開始執行你的程式的地方</li>
</ul>


<p>以這樣的觀點，來看組合語言，會比較有感覺。</p>

<p>這次主要想要試看看如何使用組合語言印出Hello world。學過作業系統的朋友應該知道OS真正提供給使用者的介面叫作system call。有興趣的朋友可以使用<code>strace</code>研究執行檔呼叫了那些system call。這次的Hello world我有兩個線索</p>

<ul>
<li>在command line執行的process會有3個馬上可以使用的file descriptor（不知道那啥的請自行估狗）分別是

<ul>
<li><code>0</code>: standard in</li>
<li><code>1</code>: standard out</li>
<li><code>2</code>: standard error</li>
</ul>
</li>
<li>有一個system call叫作<code>write</code>，你可以透過他把任何資料寫到指令的file descriptor</li>
</ul>


<p>綜合以上，我們要幹的事就是透過組合語言做出</p>

<pre><code class="c">write(1, "Hello world\n", 12);
</code></pre>

<p>這又表示組合語言中我們要做</p>

<ul>
<li>呼叫system call</li>
<li>帶參數給system call，這部份需要有

<ul>
<li>ABI的背景知識</li>
<li>定址方式，更精確的說，如何宣告<code>"Hello world\n"</code>，讓runtime時放在在process address space中，並將它的位址傳給system call</li>
</ul>
</li>
</ul>


<p><a name="hello-asm-env"></a></p>

<h2>測試環境</h2>

<ul>
<li><p>Host
<code>text
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.2 LTS
Release:    14.04
Codename:   trusty
</code></p></li>
<li><p>Guest OS on Qemu</p>

<ul>
<li>這邊很奇怪我的kernel用更新過的版本Qemu完全無法開機。目前裝死中。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID: Debian
</span><span class='line'>Description:    Debian GNU/Linux 8.0 (jessie)
</span><span class='line'>Release:    8.0
</span><span class='line'>Codename:   jessie&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ cat /proc/cpuinfo
</span><span class='line'>Processor   : ARM926EJ-S rev 5 (v5l)
</span><span class='line'>BogoMIPS    : 643.48
</span><span class='line'>Features    : swp half thumb fastmult vfp edsp java
</span><span class='line'>CPU implementer : 0x41
</span><span class='line'>CPU architecture: 5TEJ
</span><span class='line'>CPU variant : 0x0
</span><span class='line'>CPU part    : 0x926
</span><span class='line'>CPU revision    : 5&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Hardware    : ARM-Versatile AB
</span><span class='line'>Revision    : 0000
</span><span class='line'>Serial      : 0000000000000000
</span></code></pre></td></tr></table></div></figure></p>

<p><a name="hello-asm-ex1"></a></p>

<h2>範例：版本一</h2>

<p>我本來想說慢慢來，先來個完全沒意義的r0 = 0; r1 = 1; r2 = r0 + r1。程式如下：
<code>asm hello.s
.text
.global _start
_start:
    mov %r0, $0
    mov %r1, $1
    add %r2, %r0, %r1
.end
</code>
幾點說明：</p>

<ul>
<li><code>$</code>或是<code>#</code>代表一個數字(<a href="https://sourceware.org/binutils/docs/as/ARM_002dChars.html#ARM_002dChars">出處</a>)</li>
<li><code>%r1</code>代表ARM的<code>r1</code>暫存器，但是為何用<code>%</code>目前沒找到手冊上有說明。</li>
<li><code>.text</code>前面的文章有看應該覺得很眼熟，就是告訴編譯器以下是程式行為。</li>
<li><code>global</code>是讓symbol可以外露，白話來說就是<code>nm</code>等binutil可以看的到這個symbol。</li>
<li><code>_start</code>是一個程式執行的起始點，有看過<a href="http://wen00072.github.io/blog/2015/02/14/main-linux-whos-going-to-call-in-c-language/">之前文章</a>就會覺得很眼熟。</li>
<li><p><a href="https://sourceware.org/binutils/docs/as/End.html#End">.end表示程式結束點</a>，不過目前用起來有沒有加好像沒有差別。</p></li>
<li><p>Makefile</p></li>
</ul>


<pre><code class="makefile Makefile">TARGET=hello
AS_FILE=$(addsuffix .s, $(TARGET))

$(TARGET): $(AS_FILE)
    $(AS) $^ -o $@

clean:
    rm -rf $(TARGET)
</code></pre>

<p>想法很簡單，就是直接編譯應該可以跑，雖然完全不會有畫面。<font color="red">錯！</font>跑出來會這樣</p>

<pre><code class="text">$ make
as hello.s -o hello

$ ls -gG
total 12
-rw-r--r-- 1 588 Apr 20 18:04 hello
-rw-r--r-- 1  83 Apr 20 17:58 hello.s
-rw-r--r-- 1 113 Apr 20 17:58 Makefile
</code></pre>

<p>這代表什麼，hello編譯完後的binary本身沒有執行權限。改改權限看可不可以跑？</p>

<pre><code class="text">$ chmod +x hello
$ ./hello 
bash: ./hello: cannot execute binary file: Exec format error
</code></pre>

<p>怎麼回事？分析一下</p>

<pre><code class="text">$ readelf hello -h
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           ARM
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          268 (bytes into file)
  Flags:                             0x5000000, Version5 EABI
  Size of this header:               52 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           40 (bytes)
  Number of section headers:         8
  Section header string table index: 5
</code></pre>

<p>看不出來對不對？我是這樣啦，所以先比對<code>/bin/ls</code>的輸出吧</p>

<pre><code class="text">$ readelf /bin/ls -h
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           ARM
  Version:                           0x1
  Entry point address:               0x14354
  Start of program headers:          52 (bytes into file)
  Start of section headers:          99372 (bytes into file)
  Flags:                             0x5000202, has entry point, Version5 EABI, soft-float ABI
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         9
  Size of section headers:           40 (bytes)
  Number of section headers:         27
  Section header string table index: 26
</code></pre>

<p>仔細看一下<code>Type:</code>，<code>/bin/ls</code>是<code>EXEC</code>而<code>hello</code>是<code>REL</code>，<code>man elf</code>可以看到<code>REL</code>是relocate file，那是啥呢？根據<a href="http://www.sco.com/developers/gabi/latest/contents.html">System V Application Binary Interface - DRAFT - 10 June 2013第四章的簡介</a>，簡單來說就是object檔案，也就是說link時吃的檔案。所以我們加入Link吧。</p>

<p><a name="hello-asm-ex2"></a></p>

<h2>範例：版本二</h2>

<p>單純加入linker看看會怎樣？
<figure class='code'><figcaption><span>Makefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">TARGET</span><span class="o">=</span>hello
</span><span class='line'><span class="nv">AS_FILE</span><span class="o">=</span><span class="k">$(</span>addsuffix .s, <span class="k">$(</span>TARGET<span class="k">))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;$(TARGET)</span><span class="o">:</span> <span class="k">$(</span><span class="nv">AS_FILE</span><span class="k">)</span>
</span><span class='line'>    <span class="k">$(</span>AS<span class="k">)</span> <span class="nv">$^</span> -o <span class="nv">$@</span>.o
</span><span class='line'>    <span class="k">$(</span>LD<span class="k">)</span> <span class="nv">$@</span>.o -o <span class="nv">$@</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;clean</span><span class="o">:</span>
</span><span class='line'>    rm -rf <span class="k">$(</span>TARGET<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>kerker，一樣GG。</p>

<pre><code class="text">$ make
as hello.s -o hello.o
ld hello.o -o hello
$ ./hello 
Illegal instruction
</code></pre>

<p>估狗到的組合語言的<a href="http://peterdn.com/post/e28098Hello-World!e28099-in-ARM-assembly.aspx">Hello world範例</a>最後會呼叫<code>exit</code> system call，照著呼叫<code>exit</code>就可以正常結束，這就是第三版。至於為何會出現<code>Illegal instruction</code>，根據<a href="http://scottt.tw/">Scott Tsai大大</a>的提示，當你的程式碼跑完後，接下來記憶體有啥CPU就跑啥，跑到不認識的opcode當然就GG了。</p>

<p><a name="hello-asm-ex3"></a></p>

<h2>範例：版本三</h2>

<pre><code class="asm hello.s">.text
.global _start
_start:
    mov     %r0, $0
    mov     %r7, $1
    svc     $0
.end
</code></pre>

<p>單純叫了<code>exit</code>而已，有幾點注意的
根據<a href="https://wiki.debian.org/ArmEabiPort#System_call_interface">Debian ARM system call interface</a>，可以知道</p>

<ul>
<li>r0 ~ r6是函數的帶入參數</li>
<li>r7 是system call number，而system call number是啥呢？就是你要的system call 對應的數字。</li>
</ul>


<p>所以要呼叫<code>exit(0)</code> system 表示</p>

<ul>
<li>傳一個參數，數值為<code>0</code></li>
<li>要設定<code>exit</code>對應的system call number為<code>1</code>。</li>
</ul>


<p>為何system call number是<code>1</code>呢？可以看看<a href="https://git.kernel.org/cgit/linux/kernel/git/rpi/linux-rpi.git/tree/arch/arm/include/asm/unistd.h">unistd.h</a>裏面system call number的定義，exit的system call number為<code>1</code>。</p>

<p>設定完傳給<code>exit</code>參數後呼叫了一個組合語言指令<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489g/Cihidabi.htmll"><code>svc</code></a>，這個指令主要是切換到Supervisor模式。Linux下面也許太過複雜，不太容易從user mode一路追到kernel然後又看懂這些system call的行為。沒關係成大資工作業有比較看得懂的範例可以參考。例如<a href="https://github.com/embedded2014/rtenv/blob/master/syscall.s#L6">包裝呼叫system call的函數</a>以及<a href="https://github.com/embedded2014/rtenv/blob/master/kernel.c#L1135">Kernel中對應的system call服務實作</a>。</p>

<p>根據<a href="https://git.kernel.org/cgit/linux/kernel/git/rpi/linux-rpi.git/tree/arch/arm/include/asm/unistd.h">unistd.h</a>定義的system call number，<code>write</code>的system call number 是<code>4</code>，所以我們可以開始寫最後的版本了。</p>

<p><a name="hello-asm-ex4"></a></p>

<h2>範例：版本四</h2>

<p>開始之前，先來看男人怎麼介紹write system call的</p>

<pre><code class="c    ">ssize_t write(int fd, const void *buf, size_t count);
</code></pre>

<p>這代表</p>

<ul>
<li>有三個參數要傳給system call</li>
<li>有回傳值可以吃</li>
<li>其中一個參數是位址，這個位址我們會放<code>"Hello World\n"</code>字串</li>
</ul>


<p>那麼我先來看看怎麼放字串到記憶體</p>

<pre><code>.data
hello_str:
    .ascii "Hello World\n"
</code></pre>

<p><code>.data</code>如果有看我以前的文章，就知道這是放有初始值全域變數的地方。</p>

<p>而<code>hello_str</code>呢?嗯，對<code>_start:</code>有印象嗎？</p>

<p>這叫作label，是GNU組語中symbol的一種，有興趣可以看<a href="https://sourceware.org/binutils/docs/as/Labels.html#Labels">這邊</a>。根據手冊，label還有一個功能，代表目前跑到的位址。所以<code>_start:</code>就是<code>.text</code> section的起始位址。而<code>hello_str</code>就是<code>.data</code> section的起始位址。從這兩個label可以看到label只是一個位址，可以指向函數或是資料，這和C語言的指標有異曲同工之妙。有興趣的朋友可以去找function pointer和C語言的callback函數。</p>

<p>而<a href="https://sourceware.org/binutils/docs/as/Ascii.html#Ascii"><code>.ascii</code></a>，單純就是宣告字串指令。</p>

<p>呼叫<code>write</code> system call來還有兩個問題要處理</p>

<ul>
<li>如何取得<code>hello_str</code>對應的位址放到暫存器<code>r1</code>上面？</li>
<li>要怎麼算出<code>hello_str</code>字串的長度?</li>
</ul>


<p>關於第一個問題，<a href="https://sourceware.org/binutils/docs/as/ARM-Opcodes.html#ARM-Opcodes">GNU ARM組合語言有中將數值或位址放到暫存器的虛擬指令</a></p>

<pre><code class="asm">ldr &lt;register&gt; , = &lt;expression&gt;
</code></pre>

<p><a href="https://sourceware.org/binutils/docs/as/Expressions.html#Expressions">expression</a>是一種表示<strong>位置</strong>或是<strong>數值</strong>的方式。</p>

<p>恰巧<a href="https://sourceware.org/binutils/docs/as/Arguments.html#Arguments">symbol也算是一個expression</a>，所以可以表示成：</p>

<pre><code class="asm">ldr %r1, =hello_str
</code></pre>

<p>第二個問題呢？要介紹<a href="https://sourceware.org/binutils/docs/as/Dot.html#Dot"><code>.</code></a>了。之前看過linker script的朋友應該對於locale counter還有印象。locale counter代表目前的位置。加上<a href="https://sourceware.org/binutils/docs/as/Prefix-Ops.html#Prefix-Ops"><code>expression</code>也支援運算</a>。利用<code>hello_str</code>是<code>.data</code>
開頭，我們可以這樣做:</p>

<pre><code>.data
hello_str:
    ascii "Hello World\n"
hello_len = . - hello_str
</code></pre>

<p>綜合上面的討論，版本四組合語言會是
<figure class='code'><figcaption><span>hello.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="na">.data</span>
</span><span class='line'><span class="nl">hello_str:</span>
</span><span class='line'>    <span class="na">.ascii</span> <span class="err">&amp;</span><span class="no">ldquo</span><span class="err">;</span><span class="no">Hello</span> <span class="no">World</span><span class="err">\</span><span class="no">n</span><span class="err">&amp;</span><span class="no">rdquo</span><span class="err">;</span>
</span><span class='line'><span class="nf">hello_len</span> <span class="err">=</span> <span class="p">.</span> <span class="p">-</span> <span class="no">hello_str</span><span class="err">&lt;/</span><span class="no">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="err">&gt;</span><span class="no">.text</span>
</span><span class='line'><span class="na">.global</span> <span class="err">&lt;</span><span class="no">em</span><span class="err">&gt;</span><span class="no">start</span>
</span><span class='line'><span class="err">&lt;/</span><span class="nf">em</span><span class="err">&gt;</span><span class="no">start</span><span class="p">:</span>
</span><span class='line'>    <span class="err">/&lt;</span><span class="nf">em</span><span class="err">&gt;</span> <span class="nv">%r0</span> <span class="err">=</span> <span class="no">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">hello_str</span><span class="p">,</span> <span class="no">hello_len</span><span class="p">)</span><span class="err">;</span> <span class="err">&lt;/</span><span class="no">em</span><span class="err">&gt;/</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">%r0</span><span class="p">,</span> <span class="no">$1</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">%r1</span><span class="p">,</span> <span class="err">=</span><span class="no">hello_str</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">%r2</span><span class="p">,</span> <span class="err">=</span><span class="no">hello_len</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">%r7</span><span class="p">,</span> <span class="no">$4</span>
</span><span class='line'>    <span class="nf">svc</span>     <span class="no">$0</span><span class="err">&lt;/</span><span class="no">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">pre</span><span class="err">&gt;&lt;</span><span class="no">code</span><span class="err">&gt;/</span><span class="p">*</span> <span class="no">exit</span><span class="p">(</span><span class="nv">%r0</span><span class="p">)</span> <span class="p">*</span><span class="err">/</span>
</span><span class='line'><span class="nf">mov</span>     <span class="nv">%r7</span><span class="p">,</span> <span class="no">$1</span>
</span><span class='line'><span class="nf">svc</span>     <span class="no">$0</span>
</span><span class='line'><span class="err">&lt;/</span><span class="nf">code</span><span class="err">&gt;&lt;/</span><span class="no">pre</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="nf">p</span><span class="err">&gt;</span><span class="no">.end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>等等，不是說有回傳值？還是要看<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ihi0042e/index.html">Procedure Call Standard for the ARM Architecture
ABI r2.09手冊</a>，上面提到回傳資料會放到<code>r0</code>，剛好接下來的<code>exit</code> system call帶的第一個參數也要存放在r0，那麼我們可以直接觀察執行後回傳值如下：</p>

<pre><code class="text">$ make
as hello.s -o hello.o
ld hello.o -o hello

$ ./hello 
Hello World
$ echo $?
12
</code></pre>

<h3>補充</h3>

<pre><code>ldr &lt;register&gt; , = &lt;expression&gt;
</code></pre>

<p>這是個有趣的指令，這個指令事實上是個虛擬指令。怎麼說呢，因為這個指令的目標是<strong>把數值塞到指定的暫存器</strong>。這個數值是位址還是啥死人骨頭並不重要。重要的是，由於opcode的限制，把數值塞到指定的暫存器會有限制滴。例如<code>ARM Cortex M0</code>的<code>MOV</code>的數值只有8-bit，要塞32-bit的數值就需要配合其他的指令做連續技。因此
<code>
ldr &lt;register&gt; , = &lt;expression&gt;
</code>
這樣的指令就可以讓你寫起來比較輕鬆。</p>

<p>另外一個值得一提是，如果組譯器無法把<code>ldr &lt;register&gt; , = &lt;expression&gt;</code>虛擬指令轉換成<code>MOV</code>或<code>MVN</code>指令，把你的數值塞到暫存器的話。組譯器會把你的值放在一塊記憶體中，使用<strong>真的</strong>ldr把這塊記憶體的值載入到暫存器中。這個方法稱為literal pool，細節可以看<a href="http://infocenter.arm.com/help/index.jsp?topic=%2Fcom.arm.doc.dui0473c%2FBgbccbdi.html">這邊</a>。</p>

<p><a name="hello-asm-conl"></a></p>

<h2>總結</h2>

<p>本文從會GG的組合語言一路改到可以印出Hello World，並且在程式結束後回傳字串長度。在文章中簡單提到了GNU as的</p>

<ul>
<li>組合語言中section</li>
<li>組合語言的編譯方式</li>
<li>組合語言中的symbol和字串表示方式</li>
<li>組合語言中的expression</li>
<li>ABI實例</li>
</ul>


<p>希望對有需要的朋友有所幫助。</p>

<p><a name="hello-asm-ext"></a></p>

<h2>延伸閱讀及致謝</h2>

<p>感謝<a href="http://scottt.tw/">Scott Tsai大大</a>提供的資料以及指出文章中錯誤的地方。另外他也有提到其他有趣的部份，當作以後的作業。先列出如下</p>

<ul>
<li><a href="http://stackoverflow.com/questions/28831763/hello-world-program-in-nasm-x86-64-prints-hello-world-continuously/28837680#28837680">從組合語言直接呼叫header file內的system call</a></li>
<li><a href="http://www.arm.linux.org.uk/developer/memory.txt">Kernel Memory Layout on ARM Linux</a>

<ul>
<li>這邊主要討論的是<code>objdump -d</code>發現obj檔和執行檔差別只在進入點位址的差別，而進入點位址如何決定呢？這邊有規範，另外也可以看default linker script看看如何設定的。</li>
</ul>
</li>
<li><a href="https://gist.github.com/scottt/a57220efc15d15569a2e">Scott大大的範例程式</a>

<ul>
<li>可以看到，這個版本和我參考寫出來的版本差異有

<ul>
<li>把<code>"Hello world"</code>放在<code>.rodata</code> section中，這比<code>.data</code>更實際，因為這個字串的確沒有必要設成全域變數。</li>
<li>使用了preprocess方式。</li>
<li>提供了反組譯的結果</li>
<li>提供X86-64版本的組合語言比較</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>感謝<a href="http://vh21.github.io">Viler Hsiao大大</a>寫文回答我的問題。</p>

<ul>
<li><a href="http://vh21.github.io/assembly/2015/04/20/read-assembly-code.html">Viler Hsiao: 閱讀assembly code</a></li>
</ul>


<p><a name="hello-asm-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://peterdn.com/post/e28098Hello-World!e28099-in-ARM-assembly.aspx">『Hello World!』 in ARM assembly</a>

<ul>
<li>本篇程式碼大量參考這篇。</li>
</ul>
</li>
<li><a href="https://sourceware.org/binutils/docs/as/index.html">GNU Manual: Using as</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
