<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 過期 | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/guo-qi/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-08-05T20:59:12+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(過期) Linux Kernel Pratice 0.5: 使用gdb 加 Qemu Trace Linux Kernel Runtime 行為]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/11/trace-linux-kernel-via-qemu-and-gdb/"/>
    <updated>2016-10-11T09:46:25+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/11/trace-linux-kernel-via-qemu-and-gdb</id>
    <content type="html"><![CDATA[<h3><font color="red">感謝Scott 大大糾正，選錯平台，這篇使用了ARMv4指令集的測試平台。請大家忽略，正確的版本將會之後更新!</font></h3>

<h2>前言</h2>

<p>還是感謝<a href="http://scottt.tw/">Scott</a>大大和其他網友的幫忙。這次最重要的心得就是不要在睡眠不足的時候做實驗，浪費的時間拿去睡覺反而比較實在。</p>

<h2>目錄</h2>

<ul>
<li><a href="#de_lk0_5_env">測試環境</a></li>
<li><a href="#de_lk0_5_kr">Linux kernel環境設定</a></li>
<li><a href="#de_lk0_5_test">測試</a>

<ul>
<li><a href="#de_lk0_5_test_qemu">Qemu</a></li>
<li><a href="#de_lk0_5_test_gdb">gdb</a></li>
</ul>
</li>
<li><a href="#de_lk0_5_ref">參考資料</a></li>
<li><a href="#de_lk0_5_add">補充</a></li>
</ul>


<p><a name="de_lk0_5_env"></a></p>

<h2>測試環境</h2>

<h3>Host</h3>

<ul>
<li>Host OS</li>
</ul>


<pre><code class="sh">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</code></pre>

<ul>
<li>Qemu</li>
</ul>


<pre><code class="sh">$ qemu-system-arm --version
QEMU emulator version 2.0.0 (Debian 2.0.0+dfsg-2ubuntu1.27), Copyright (c) 2003-2008 Fabrice Bellard
</code></pre>

<ul>
<li>gdb</li>
</ul>


<pre><code class="text">$ arm-none-eabi-gdb --version
GNU gdb (GNU Tools for ARM Embedded Processors) 7.10.1.20160923-cvs
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl
...
</code></pre>

<ul>
<li>buildroot 版本

<ul>
<li>commit hash: <code>14b24726a81b719b35fee70c8ba8be2d682a7313</code></li>
</ul>
</li>
</ul>


<h3>Target</h3>

<ul>
<li>Linux kernerl 版本

<ul>
<li>4.4.2</li>
</ul>
</li>
<li>模擬平台

<ul>
<li>Versatile</li>
</ul>
</li>
</ul>


<p><a name="de_lk0_5_kr"></a></p>

<h2>Linux kernel環境設定</h2>

<p>我目前只打開加入debug資訊的選項。接下來重編，編譯的方式請參考<a href="/blog/2016/10/01/linux-kernel-pratice-0-buildroot-2-customized-kernel/">這邊</a></p>

<ul>
<li>Kernel hacking -> Compile-time checks and compiler options ->

<ul>
<li>Compile the kernel with debug info</li>
</ul>
</li>
</ul>


<p><a name="de_lk0_5_test"></a></p>

<h2>測試</h2>

<p>依照下面兩個步驟執行</p>

<ol>
<li>執行qemu，並且加入支援gdb以及開始馬上freeze CPU的參數</li>
<li>執行gdb，載入symbol並聯到qemu除錯</li>
</ol>


<p><a name="de_lk0_5_test_qemu"></a></p>

<h3>Qemu</h3>

<p>基本上就是原本的指令加入兩個選項</p>

<ul>
<li><code>-S</code>

<ul>
<li>qemu一開始立即Freeze CPU</li>
</ul>
</li>
<li><code>-s</code>

<ul>
<li><code>-gdb tcp::1234</code>的縮寫，也就是說gdb可以透過port 1234和連到Qemu除錯</li>
</ul>
</li>
</ul>


<p>假設你在buildroot最上層，就可以使用下面指令執行qemu 並使用gdb 除錯</p>

<pre><code class="text">qemu-system-arm -M versatilepb \
                -kernel /tmp/kernel/arch/arm/boot/zImage \
                -drive file=output/images/rootfs.ext2,if=scsi,format=raw \
                -append "root=/dev/sda console=ttyAMA0,115200" \
                -serial stdio -net nic,model=rtl8139 -net user -s -S
</code></pre>

<p><a name="de_lk0_5_test_gdb"></a></p>

<h3>gdb</h3>

<p>這邊有點瑣碎，先講一下步驟</p>

<ol>
<li>載入Linux kernel symbol

<ul>
<li>假設你在kernel最上層目錄有三種方式載入

<ul>
<li>直接<code>arm-none-eabi-gdb ./vmlinux</code></li>
<li><code>arm-none-eabi-gdb -ex "file ./vmlinux"</code></li>
<li>進入gdb後打<code>file ./vmlinux</code>指令</li>
</ul>
</li>
</ul>
</li>
<li>連上qemu

<ul>
<li>一樣兩種方式

<ul>
<li><code>arm-none-eabi-gdb -ex "target remote :1234"</code></li>
<li>進入gdb後打<code>target remote :1234</code>指令</li>
</ul>
</li>
</ul>
</li>
<li>設定breakpoint等你要觀察的資訊

<ul>
<li>如<code>b printk</code></li>
</ul>
</li>
<li>告訴qemu開始執行

<ul>
<li><code>continue</code></li>
</ul>
</li>
</ol>


<p>1和2可以一起使用如下</p>

<pre><code class="text 懶人包">arm-none-eabi-gdb -ex "file ./vmlinux"  -ex "target remote :1234"
</code></pre>

<p>現在看一下操作範例</p>

<pre><code class="text">$ arm-none-eabi-gdb ./vmlinux  -ex "target remote :1234" 
GNU gdb (GNU Tools for ARM Embedded Processors) 7.10.1.20160923-cvs
...
Reading symbols from ./vmlinux...done.
Remote debugging using :1234
__vectors_start () at arch/arm/kernel/entry-armv.S:1210
1210        W(b)    vector_rst
(gdb) b printk
Breakpoint 1 at 0xc0069df4: file kernel/printk/printk.c, line 1900.
(gdb) c
Continuing.

Breakpoint 1, printk (fmt=0x0 &lt;__vectors_start&gt;) at kernel/printk/printk.c:1900
1900    {
(gdb) bt
#0  printk (fmt=0x0 &lt;__vectors_start&gt;) at kernel/printk/printk.c:1900
#1  0xc039d8c4 in start_kernel () at init/main.c:508
#2  0x00008048 in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
</code></pre>

<p>另外如果有興趣使用Linux kernel提供的指令，可以使用下面的方式在啟動gdb時載入
，只要把下面的描述加到你的<code>~/.gdbinit</code>即可</p>

<pre><code>add-auto-load-safe-path /tmp/kernel/scripts/gdb/vmlinux-gdb.py
</code></pre>

<p>那麼你就可以使用Linux kernel提供的gdb script，詳細的設定和指令說明在<a href="https://www.kernel.org/doc/Documentation/gdb-kernel-debugging.txt">這邊</a>。</p>

<p><a name="de_lk0_5_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel">Linux Magazine: Qemu and the Kernel</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/gdb-kernel-debugging.txt">Linux kernel document: Debugging kernel and modules via gdb</a></li>
<li><a href="http://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu">stackoverflow: How to debug the Linux kernel with GDB and QEMU?</a></li>
</ul>


<p><a name="de_lk0_5_add"></a></p>

<h2>補充</h2>

<p>當初犯了蠢事載入不正確的kernel image導致一堆不必要的除錯。不過多學到一個gdb Python script除錯指令，當Python script發生exception時可以用下面的指令印出Python錯誤call stack</p>

<ul>
<li>gdb內：<code>set python print-stack full</code></li>
<li>啟動gdb時加入參數： <code>-ex "set python print-stack full"</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(過期) Linux Kernel Pratice 0: Buildroot (2/2) - 自行編譯kernel]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/01/linux-kernel-pratice-0-buildroot-2-customized-kernel/"/>
    <updated>2016-10-01T09:40:54+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/01/linux-kernel-pratice-0-buildroot-2-customized-kernel</id>
    <content type="html"><![CDATA[<h3><font color="red">感謝Scott 大大糾正，選錯平台，這篇使用了ARMv4指令集的測試平台。請大家忽略，正確的版本將會之後更新!</font></h3>

<h2>前情提要</h2>

<p><a href="blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu/">上一篇</a>提到，設定實習環境的目標有：</p>

<ol>
<li>可以使用ARM 平台。一方面追求流行，一方面我不想再開x86這個副本</li>
<li>可以方便地建立ARM平台的Linux Rootfs和kernel版本</li>
<li>可以方便地更改指定要編譯的Kernel版本</li>
<li>透過Qemu ，使用2的Rootfs和kernel開機</li>
<li>透過Qemu和搭配的工具可以分析Linux kernel的run time 行為</li>
</ol>


<p>今天就是來解決3 的項目。更細分的話，這次目標是</p>

<ol>
<li>使用官方Linux kernel 編譯Versatile</li>
<li>編譯出來的kernel binary可以在Qemu上順利載入</li>
<li>編譯出來的kernel binary可以順利的載入buildroot產生的rootfs，以及網路介面和相關設備</li>
</ol>


<h2>目錄</h2>

<ul>
<li><a href="#lk0_1_del_env">測試環境</a></li>
<li><a href="#lk0_1_del_dl">下載Linux Kernel Source</a></li>
<li><a href="#lk0_1_del_conf">設定和編譯</a>

<ul>
<li><a href="#lk0_1_del_conf_sw">切換版本</a></li>
<li><a href="#lk0_1_del_conf_arm_def">設定ARM Versatile預設config</a></li>
<li><a href="#lk0_1_del_conf_qemu">設定Qemu VM支援的硬體</a></li>
<li><a href="#lk0_1_del_conf_build">編譯</a>

<ul>
<li><a href="#lk0_1_del_conf_build_broot">Buildroot</a></li>
<li><a href="#lk0_1_del_conf_build_lk">Linux kernel</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#lk0_1_del_test">測試</a></li>
<li><a href="#lk0_1_del_ref">參考資料</a></li>
<li><a href="#lk0_1_del_app">附錄</a>

<ul>
<li><a href="#lk0_1_del_app_brot">使用Buildroot 內建套件指定編譯Linux kernel 4.2.2</a></li>
</ul>
</li>
</ul>


<p><a name="lk0_1_del_env"></a></p>

<h2>測試環境</h2>

<p>做組裝的最重要的原則之一就是要能夠reproduce，所以交代測試環境是一定要的</p>

<pre><code class="text">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty

$ git --version
git version 2.10.0
</code></pre>

<ul>
<li>buildroot 版本

<ul>
<li>commit hash: <code>14b24726a81b719b35fee70c8ba8be2d682a7313</code></li>
</ul>
</li>
</ul>


<p><a name="lk0_1_del_dl"></a></p>

<h2>下載Linux Kernel Source</h2>

<p>沒啥好講的，就剪貼指令吧</p>

<pre><code class="sh">git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
</code></pre>

<p><a name="lk0_1_del_conf"></a></p>

<h2>設定和編譯</h2>

<p>東西下載完不是就閉著眼睛開幹，因為我們在開始編譯前需要</p>

<ol>
<li>切換到你想要研究的版本</li>
<li>如果不是x86，你需要指定平台</li>
<li>細項Kernel config設定</li>
</ol>


<p>那麼就來見招拆招吧</p>

<p><a name="lk0_1_del_conf_sw"></a></p>

<h3>切換版本</h3>

<p>非常簡單，先<code>git tag</code>，切過去就好。我要切到4.4.2就是</p>

<pre><code class="sh">git tag                 # 找你要的版本
git checkout v4.4.2     # 切到tag
git checkout -b v4.4.2  # 理論上會這邊改東改西，就先開branch吧
</code></pre>

<p><a name="lk0_1_del_conf_arm_def"></a></p>

<h3>設定ARM Versatile預設config</h3>

<p>先講結論
<code>sh
make ARCH=arm versatile_defconfig
</code></p>

<p>開始<del>沒人要看</del>的解釋吧。基本上也亂看找出來的，簡單講一下當初的「脈絡」</p>

<ol>
<li>我知道我們平台是versatile，所以就<code>find | grep versatile</code>。從一堆檔案中我看到有趣的檔案<code>./arch/arm/configs/versatile_defconfig</code>。</li>
<li>接下來就是要找make 的時候怎麼和這個檔案勾起來。網路上找一下會發現一個變數<code>ARCH</code>，剩下就試看看<code>make ARCH=arm versatile_defconfig</code>，能不能動，可以動所以打完收工。</li>
</ol>


<p>然後你就知道</p>

<ol>
<li>Linux kernel source中有些平台會提供default config</li>
<li>透過<code>ARCH</code>可以讓make時自動參考這些檔案產生config</li>
</ol>


<p><a name="lk0_1_del_conf_qemu"></a></p>

<h3>設定Qemu VM支援的硬體</h3>

<p><font color="red"><strong>建議不要把buildroot compile cache打開。我花了很多時間在kernel 編譯後Qemu還是沒有使用編譯後的kernel的問題，最後發現關閉buildroot compile cache問題就消失了。</strong></font></p>

<p>如果閉著眼睛開始<a href="#lk0_1_del_conf_build">編譯</a>，你會很高興地發現可以開機了，但是接下來就會很失望的發現kernel panic，原因是認不出開機的disk。</p>

<p>之所以會發生這樣的原因是因為Linux kernel 提供的default config選項和buildroot 給Qemu的kernel 選項不同(<a href="#lk0_1_del_app_brot">參考</a>)，比對buildroot 開機畫面，會發現他們有偵測到兩個硬體，分別是</p>

<ol>
<li>SCSI 控制器，用來辨認rootfs</li>
<li>Realtek 8139 網路卡，不用我解釋吧</li>
</ol>


<p>那麼我們這邊直接把這兩個加上去就收工沒錯吧？答案是對也不對，因為這兩個東西會和其他的部份有關。</p>

<p>以下是我用笨方式一個一個試出來需要開啟的東西，不一定最簡潔甚至正確，但是他可以開機就是了。要注意不要編成module，編譯的細節我假設讀者都知道，如果完全不懂可能要找一下新手入門資訊了。另外我列出的選項是Kernel <code>4.4.2</code>下的選項，請自行斟酌。</p>

<p>記得<strong>請用<code>make ARCH=arm menuconfig</code>更改設定</strong></p>

<ol>
<li>PCI bus，原因是SCSI控制器和網路卡是PCI bus介面，不開就沒有不會看到這些選項。</li>
<li>SCSI 包括

<ul>
<li>SSCI device</li>
<li>Disk</li>
<li>我有開Generic，懶得關掉看會不會出問題了</li>
<li>SCSI low-level drivers -> SYM53C8XX Version 2 SCSI support</li>
</ul>
</li>
<li>Network device support

<ul>
<li>Ethernet driver suppor -> Realtek devices

<ul>
<li>RealTek RTL-8139 C+ PCI Fast Ethernet Adapter support</li>
</ul>
</li>
</ul>
</li>
<li>要支援buildroot預設的device node管理方式。有興趣的可以看<a href="https://buildroot.org/downloads/manual/manual.html#_dev_management">這邊</a>

<ul>
<li>Device Drivers -> Generic Driver Options ->

<ul>
<li>Maintain a devtmpfs filesystem to mount at /dev</li>
<li>Automount devtmpfs at /dev, after the kernel mounted the rootfs</li>
</ul>
</li>
</ul>
</li>
<li>File system 要支援ext2，原因是buildroot產生的是ext2檔案格式</li>
<li>tmpfs要開啟

<ul>
<li>File systems -> Pseudo filesystems

<ul>
<li>Tmpfs virtual memory file system support (former shm fs)</li>
</ul>
</li>
</ul>
</li>
</ol>


<p>建議順便巡一下其他kernel選項，用不到的可以關一下。比如說<code>MTD</code>，一堆有的沒的網卡，音效支援之類的。</p>

<p><a name="lk0_1_del_conf_build"></a></p>

<h3>編譯</h3>

<p><a name="lk0_1_del_conf_build_broot"></a></p>

<h4>Buildroot</h4>

<ol>
<li><code>make menuconfig</code>

<ul>
<li>Toolchain -> Custom kernel headers series

<ul>
<li>改成你現在Linux 版本</li>
</ul>
</li>
</ul>
</li>
<li><code>make</code></li>
</ol>


<p><a name="lk0_1_del_conf_build_lk"></a></p>

<h4>Linux kernel</h4>

<p>指令如下</p>

<pre><code class="sh">make CROSS_COMPILE=/tmp/buildroot/output/host/usr/bin/arm-buildroot-linux-gnueabi- ARCH=arm V=1 bzImage
</code></pre>

<p>這其實就是<code>make bzImage</code>的囉唆版，多了</p>

<ul>
<li><code>ARCH=arm</code>

<ul>
<li>指定ARM平台</li>
</ul>
</li>
<li><code>CROSS_COMPILE=..</code>

<ul>
<li>Cross compile prefix，既然我們使用buildroot內建toolchain，就用他們來編譯kernel</li>
</ul>
</li>
<li><code>V=1</code>

<ul>
<li>身為組裝工，沒看到編譯指令訊息跳出來就會沒安全感</li>
</ul>
</li>
</ul>


<p><a name="lk0_1_del_test"></a></p>

<h2>測試</h2>

<p>這邊卡關的原因是預設的buildroot (Linux kernel 4.7)使用qemu載入的時候需要指定device tree檔案。但是在Linux 4.4.2下面指定device tree檔案反而無法順利開機。我怎麼知道到的？撈git commit log去看的。</p>

<p>剩下就剪貼了</p>

<p><strong>我在buildroot top目錄執行的</strong>，你要嘛就切到buildroot目錄下，要嘛就指定<code>-drive file</code>到你自己rootfs的路徑</p>

<pre><code class="sh">qemu-system-arm -M versatilepb -kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage -drive file=output/images/rootfs.ext2,if=scsi,format=raw -append "root=/dev/sda console=ttyAMA0,115200" -serial stdio -net nic,model=rtl8139 -net use
</code></pre>

<p>單純提出來一個參數表示這是我編譯出來的kernel而不是buildroot的</p>

<ul>
<li><code>-kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage</code></li>
</ul>


<p>開機節錄畫面如下</p>

<pre><code class="text">Uncompressing Linux... done, booting the kernel.
Booting Linux on physical CPU 0x0
Linux version 4.4.2 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #2 Fri Sep 30 22:46:53 CST 2016
CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00093177
CPU: VIVT data cache, VIVT instruction cache
Machine: ARM-Versatile PB
Memory policy: Data cache writeback
sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 89478484971ns
Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 32512
Kernel command line: root=/dev/sda console=ttyAMA0,115200
PID hash table entries: 512 (order: -1, 2048 bytes)
Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)
Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)
Memory: 125956K/131072K available (2780K kernel code, 148K rwdata, 776K rodata, 128K init, 79K bss, 5116K reserved, 0K cma-reserved)
Virtual kernel memory layout:
    vector  : 0xffff0000 - 0xffff1000   (   4 kB)
    fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)
    vmalloc : 0xc8800000 - 0xff800000   ( 880 MB)
    lowmem  : 0xc0000000 - 0xc8000000   ( 128 MB)
    modules : 0xbf000000 - 0xc0000000   (  16 MB)
      .text : 0xc0008000 - 0xc038158c   (3558 kB)
      .init : 0xc0382000 - 0xc03a2000   ( 128 kB)
      .data : 0xc03a2000 - 0xc03c7300   ( 149 kB)
       .bss : 0xc03c7300 - 0xc03daf2c   (  80 kB)
NR_IRQS:224
VIC @f1140000: id 0x00041190, vendor 0x41
FPGA IRQ chip 0 "SIC" @ f1003000, 13 irqs, parent IRQ: 63
clocksource: timer3: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275 ns
Console: colour dummy device 80x30
Calibrating delay loop... 641.43 BogoMIPS (lpj=3207168)
pid_max: default: 32768 minimum: 301
Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
CPU: Testing write buffer coherency: ok
Setting up static identity map for 0x8400 - 0x8458
devtmpfs: initialized
VFP support v0.3: implementor 41 architecture 1 part 10 variant 9 rev 0
clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
NET: Registered protocol family 16
DMA: preallocated 256 KiB pool for atomic coherent allocations
Serial: AMBA PL011 UART driver
dev:f1: ttyAMA0 at MMIO 0x101f1000 (irq = 44, base_baud = 0) is a PL011 rev1
console [ttyAMA0] enabled
dev:f2: ttyAMA1 at MMIO 0x101f2000 (irq = 45, base_baud = 0) is a PL011 rev1
dev:f3: ttyAMA2 at MMIO 0x101f3000 (irq = 46, base_baud = 0) is a PL011 rev1
fpga:09: ttyAMA3 at MMIO 0x10009000 (irq = 70, base_baud = 0) is a PL011 rev1
PCI core found (slot 11)
PCI host bridge to bus 0000:00
pci_bus 0000:00: root bus resource [mem 0x50000000-0x5fffffff]
pci_bus 0000:00: root bus resource [mem 0x60000000-0x6fffffff pref]
pci_bus 0000:00: root bus resource [io  0x1000-0xffff]
pci_bus 0000:00: No busn resource found for root bus, will use [bus 00-ff]
PCI: bus0: Fast back to back transfers disabled
pci 0000:00:0c.0: BAR 6: assigned [mem 0x60000000-0x6003ffff pref]
pci 0000:00:0d.0: BAR 2: assigned [mem 0x50000000-0x50001fff]
pci 0000:00:0d.0: BAR 1: assigned [mem 0x50002000-0x500023ff]
pci 0000:00:0c.0: BAR 0: assigned [io  0x1000-0x10ff]
pci 0000:00:0c.0: BAR 1: assigned [mem 0x50002400-0x500024ff]
pci 0000:00:0d.0: BAR 0: assigned [io  0x1400-0x14ff]
vgaarb: loaded
SCSI subsystem initialized
clocksource: Switched to clocksource timer3
NET: Registered protocol family 2
TCP established hash table entries: 1024 (order: 0, 4096 bytes)
TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
TCP: Hash tables configured (established 1024 bind 1024)
UDP hash table entries: 256 (order: 0, 4096 bytes)
UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
NET: Registered protocol family 1
NetWinder Floating Point Emulator V0.97 (double precision)
futex hash table entries: 256 (order: -1, 3072 bytes)
Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)
io scheduler noop registered
io scheduler deadline registered
io scheduler cfq registered (default)
pl061_gpio dev:e4: PL061 GPIO chip @0x101e4000 registered
pl061_gpio dev:e5: PL061 GPIO chip @0x101e5000 registered
pl061_gpio dev:e6: PL061 GPIO chip @0x101e6000 registered
pl061_gpio dev:e7: PL061 GPIO chip @0x101e7000 registered
clcd-pl11x dev:20: PL110 rev0 at 0x10120000
clcd-pl11x dev:20: Versatile hardware, VGA display
Console: switching to colour frame buffer device 80x60
sym53c8xx 0000:00:0d.0: enabling device (0100 -&gt; 0103)
sym0: &lt;895a&gt; rev 0x0 at pci 0000:00:0d.0 irq 94
sym0: No NVRAM, ID 7, Fast-40, LVD, parity checking
sym0: SCSI BUS has been reset.
scsi host0: sym-2.2.3
sym0: unknown interrupt(s) ignored, ISTAT=0x5 DSTAT=0x80 SIST=0x0
scsi 0:0:0:0: Direct-Access     QEMU     QEMU HARDDISK    2.0. PQ: 0 ANSI: 5
scsi target0:0:0: tagged command queuing enabled, command queue depth 16.
scsi target0:0:0: Beginning Domain Validation
scsi target0:0:0: Domain Validation skipping write tests
scsi target0:0:0: Ending Domain Validation
scsi 0:0:2:0: CD-ROM            QEMU     QEMU CD-ROM      2.0. PQ: 0 ANSI: 5
scsi target0:0:2: tagged command queuing enabled, command queue depth 16.
scsi target0:0:2: Beginning Domain Validation
scsi target0:0:2: Domain Validation skipping write tests
scsi target0:0:2: Ending Domain Validation
sd 0:0:0:0: Attached scsi generic sg0 type 0
scsi 0:0:2:0: Attached scsi generic sg1 type 5
8139cp: 8139cp: 10/100 PCI Ethernet driver v1.3 (Mar 22, 2004)
8139cp 0000:00:0c.0: enabling device (0100 -&gt; 0103)
8139cp 0000:00:0c.0 eth0: RTL-8139C+ at 0xc8974400, 52:54:00:12:34:56, IRQ 93
sd 0:0:0:0: [sda] 12666 512-byte logical blocks: (6.48 MB/6.18 MiB)
sd 0:0:0:0: [sda] Write Protect is off
sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
sd 0:0:0:0: [sda] Attached SCSI disk
mousedev: PS/2 mouse device common for all mice
NET: Registered protocol family 17
input: AT Raw Set 2 keyboard as /devices/fpga:06/serio0/input/input0
input: ImExPS/2 Generic Explorer Mouse as /devices/fpga:07/serio1/input/input2
VFS: Mounted root (ext2 filesystem) readonly on device 8:0.
devtmpfs: mounted
Freeing unused kernel memory: 128K (c0382000 - c03a2000)
EXT2-fs (sda): warning: mounting unchecked fs, running e2fsck is recommended
Starting logging: OK
Initializing random number generator... random: dd urandom read with 48 bits of entropy available
done.
Starting network: 8139cp 0000:00:0c.0 eth0: link up, 100Mbps, full-duplex, lpa 0x05E1
udhcpc: started, v1.25.0
udhcpc: sending discover
udhcpc: sending select for 10.0.2.15
udhcpc: lease of 10.0.2.15 obtained, lease time 86400
deleting routers
adding dns 10.0.2.3
OK

Welcome to Buildroot
buildroot login: root
# 
random: nonblocking pool is initialized
</code></pre>

<p><a name="lk0_1_del_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://buildroot.org/downloads/manual/manual.html">Buildroot 官方手冊</a></li>
</ul>


<p><a name="lk0_1_del_app"></a></p>

<h2>附錄</h2>

<p><a name="lk0_1_del_app_brot"></a></p>

<h3>使用Buildroot 內建套件指定編譯Linux kernel 4.2.2</h3>

<p>當初會去做這個主要是因為開始編譯獨立的Linux kernel前要先驗證buildroot自己編的Linux 4.4.2是否可以用qemu開機。另外的好處的就是buildroot編譯出來的kernel config (在output/build/linux-4.4.2/.config) 可以和你自己的kernel config比對。</p>

<p>步驟如下</p>

<ol>
<li><a href="#lk0_1_del_app_brot_step1">找出buildroot 4.4.x的kernel config</a></li>
<li><a href="#lk0_1_del_app_brot_step2">更改buildroot config指定使用Linux 4.4.2</a></li>
<li><a href="#lk0_1_del_app_brot_step3">測試驗證</a></li>
</ol>


<p><a name="lk0_1_del_app_brot_step1"></a></p>

<h3>找出buildroot 4.4.x的kernel config</h3>

<p>前篇有<a href="blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu/#lk0_ins_set">提到</a><code>make qemu_arm_versatile_defconfig</code>這個指令和<code>buildroot/board/qemu/arm-versatile</code>這個目錄。我們進一步去看一下這個目錄</p>

<pre><code class="sh">$ ls -gG board/qemu/arm-versatile
total 8
-rw-rw-r-- 1 890 Sep 30 21:32 linux-4.7.config
-rw-rw-r-- 1 404 Sep 30 21:32 readme.txt
</code></pre>

<p>直接破梗</p>

<ul>
<li>readme.txt 告訴你怎麼用qemu 開機</li>
<li>linux-4.7.config 是Linux kernel config</li>
</ul>


<p>所以我會去<code>git log .</code>，撈看看有沒有Linux kernel 4.4.x的資料。果然給我看到一個commit</p>

<pre><code class="text">commit 93c640f00537d40fd25280c4c2c60f3b30808256
Author: Gustavo Zacarias &lt;gustavo@zacarias.com.ar&gt;
Date:   Sun Feb 7 18:19:13 2016 -0300

    configs/qemu: bump to the latest linux versions
...
    arm_versatile           4.4.1           2.3.0   YES     OK
</code></pre>

<p>剩下就是使用git切到該commit，撈出資料，另存新檔。我把他存在
<code>/tmp/linux-4.4.config</code></p>

<p><a name="lk0_1_del_app_brot_step2"></a></p>

<h3>更改buildroot config指定使用Linux 4.4.2</h3>

<ul>
<li>make menuconfig

<ul>
<li>Kernel -> Kernel version -> Custom version</li>
<li>Kernel -> Kernel version: 填 4.4.2</li>
<li>Kernel -> Kernel configuration -> Using a custom (def)config file</li>
<li>Kernel -> Configuration file path: 填<code>/tmp/linux-4.4.config</code></li>
</ul>
</li>
<li>make</li>
</ul>


<p><a name="lk0_1_del_app_brot_step3"></a></p>

<h3>測試驗證</h3>

<p>根據buildroot/board/qemu/arm-versatile中4.4.2版時的readme.txt，qemu指令執行如下，基本上就是不去載入device tree檔案。</p>

<pre><code class="sh">qemu-system-arm -M versatilepb -kernel output/images/zImage -drive file=output/images/rootfs.ext2,if=scsi,format=raw -append "root=/dev/sda console=ttyAMA0,115200" -serial stdio -net nic,model=rtl8139 -net user
</code></pre>

<p>以下是開機畫面
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Uncompressing Linux&amp;hellip; done, booting the kernel.
</span><span class='line'>Booting Linux on physical CPU 0x0
</span><span class='line'>Linux version 4.4.2 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #1 Fri Sep 30 22:36:58 CST 2016
</span><span class='line'>CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00093177
</span><span class='line'>CPU: VIVT data cache, VIVT instruction cache
</span><span class='line'>Machine: ARM-Versatile PB
</span><span class='line'>Memory policy: Data cache writeback
</span><span class='line'>sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 89478484971ns
</span><span class='line'>Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 32512
</span><span class='line'>Kernel command line: root=/dev/sda console=ttyAMA0,115200
</span><span class='line'>PID hash table entries: 512 (order: -1, 2048 bytes)
</span><span class='line'>Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)
</span><span class='line'>Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)
</span><span class='line'>Memory: 125264K/131072K available (3246K kernel code, 158K rwdata, 880K rodata, 120K init, 198K bss, 5808K reserved, 0K cma-reserved)
</span><span class='line'>Virtual kernel memory layout:
</span><span class='line'>    vector  : 0xffff0000 - 0xffff1000   (   4 kB)
</span><span class='line'>    fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)
</span><span class='line'>    vmalloc : 0xc8800000 - 0xff800000   ( 880 MB)
</span><span class='line'>    lowmem  : 0xc0000000 - 0xc8000000   ( 128 MB)
</span><span class='line'>    modules : 0xbf000000 - 0xc0000000   (  16 MB)
</span><span class='line'>      .text : 0xc0008000 - 0xc040fdcc   (4128 kB)
</span><span class='line'>      .init : 0xc0410000 - 0xc042e000   ( 120 kB)
</span><span class='line'>      .data : 0xc042e000 - 0xc04559e0   ( 159 kB)
</span><span class='line'>       .bss : 0xc04559e0 - 0xc04873a8   ( 199 kB)
</span><span class='line'>SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
</span><span class='line'>NR_IRQS:224
</span><span class='line'>VIC @f1140000: id 0x00041190, vendor 0x41
</span><span class='line'>FPGA IRQ chip 0 &amp;ldquo;SIC&amp;rdquo; @ f1003000, 13 irqs, parent IRQ: 63
</span><span class='line'>clocksource: timer3: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275 ns
</span><span class='line'>Console: colour dummy device 80x30
</span><span class='line'>Calibrating delay loop&amp;hellip; 637.74 BogoMIPS (lpj=3188736)
</span><span class='line'>pid_max: default: 32768 minimum: 301
</span><span class='line'>Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>CPU: Testing write buffer coherency: ok
</span><span class='line'>Setting up static identity map for 0x8400 - 0x8458
</span><span class='line'>devtmpfs: initialized
</span><span class='line'>clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
</span><span class='line'>NET: Registered protocol family 16
</span><span class='line'>DMA: preallocated 256 KiB pool for atomic coherent allocations
</span><span class='line'>Serial: AMBA PL011 UART driver
</span><span class='line'>dev:f1: ttyAMA0 at MMIO 0x101f1000 (irq = 44, base_baud = 0) is a PL011 rev1
</span><span class='line'>console [ttyAMA0] enabled
</span><span class='line'>dev:f2: ttyAMA1 at MMIO 0x101f2000 (irq = 45, base_baud = 0) is a PL011 rev1
</span><span class='line'>dev:f3: ttyAMA2 at MMIO 0x101f3000 (irq = 46, base_baud = 0) is a PL011 rev1
</span><span class='line'>fpga:09: ttyAMA3 at MMIO 0x10009000 (irq = 70, base_baud = 0) is a PL011 rev1
</span><span class='line'>PCI core found (slot 11)
</span><span class='line'>PCI host bridge to bus 0000:00
</span><span class='line'>pci_bus 0000:00: root bus resource [mem 0x50000000-0x5fffffff]
</span><span class='line'>pci_bus 0000:00: root bus resource [mem 0x60000000-0x6fffffff pref]
</span><span class='line'>pci_bus 0000:00: root bus resource [io  0x1000-0xffff]
</span><span class='line'>pci_bus 0000:00: No busn resource found for root bus, will use [bus 00-ff]
</span><span class='line'>PCI: bus0: Fast back to back transfers disabled
</span><span class='line'>pci 0000:00:0c.0: BAR 6: assigned [mem 0x60000000-0x6003ffff pref]
</span><span class='line'>pci 0000:00:0d.0: BAR 2: assigned [mem 0x50000000-0x50001fff]
</span><span class='line'>pci 0000:00:0d.0: BAR 1: assigned [mem 0x50002000-0x500023ff]
</span><span class='line'>pci 0000:00:0c.0: BAR 0: assigned [io  0x1000-0x10ff]
</span><span class='line'>pci 0000:00:0c.0: BAR 1: assigned [mem 0x50002400-0x500024ff]
</span><span class='line'>pci 0000:00:0d.0: BAR 0: assigned [io  0x1400-0x14ff]
</span><span class='line'>vgaarb: loaded
</span><span class='line'>SCSI subsystem initialized
</span><span class='line'>clocksource: Switched to clocksource timer3
</span><span class='line'>NET: Registered protocol family 2
</span><span class='line'>TCP established hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>TCP: Hash tables configured (established 1024 bind 1024)
</span><span class='line'>UDP hash table entries: 256 (order: 0, 4096 bytes)
</span><span class='line'>UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
</span><span class='line'>NET: Registered protocol family 1
</span><span class='line'>futex hash table entries: 256 (order: -1, 3072 bytes)
</span><span class='line'>Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)
</span><span class='line'>io scheduler noop registered
</span><span class='line'>io scheduler deadline registered
</span><span class='line'>io scheduler cfq registered (default)
</span><span class='line'>clcd-pl11x dev:20: PL110 rev0 at 0x10120000
</span><span class='line'>clcd-pl11x dev:20: Versatile hardware, VGA display
</span><span class='line'>Console: switching to colour frame buffer device 80x30
</span><span class='line'>sym53c8xx 0000:00:0d.0: enabling device (0100 -&gt; 0103)
</span><span class='line'>sym0: &lt;895a&gt; rev 0x0 at pci 0000:00:0d.0 irq 94
</span><span class='line'>sym0: No NVRAM, ID 7, Fast-40, LVD, parity checking
</span><span class='line'>sym0: SCSI BUS has been reset.
</span><span class='line'>scsi host0: sym-2.2.3
</span><span class='line'>sym0: unknown interrupt(s) ignored, ISTAT=0x5 DSTAT=0x80 SIST=0x0
</span><span class='line'>scsi 0:0:0:0: Direct-Access     QEMU     QEMU HARDDISK    2.0. PQ: 0 ANSI: 5
</span><span class='line'>scsi target0:0:0: tagged command queuing enabled, command queue depth 16.
</span><span class='line'>scsi target0:0:0: Beginning Domain Validation
</span><span class='line'>scsi target0:0:0: Domain Validation skipping write tests
</span><span class='line'>scsi target0:0:0: Ending Domain Validation
</span><span class='line'>scsi 0:0:2:0: CD-ROM            QEMU     QEMU CD-ROM      2.0. PQ: 0 ANSI: 5
</span><span class='line'>scsi target0:0:2: tagged command queuing enabled, command queue depth 16.
</span><span class='line'>scsi target0:0:2: Beginning Domain Validation
</span><span class='line'>scsi target0:0:2: Domain Validation skipping write tests
</span><span class='line'>scsi target0:0:2: Ending Domain Validation
</span><span class='line'>8139cp: 8139cp: 10/100 PCI Ethernet driver v1.3 (Mar 22, 2004)
</span><span class='line'>8139cp 0000:00:0c.0: enabling device (0100 -&gt; 0103)
</span><span class='line'>8139cp 0000:00:0c.0 eth0: RTL-8139C+ at 0xc8978400, 52:54:00:12:34:56, IRQ 93
</span><span class='line'>sd 0:0:0:0: [sda] 12666 512-byte logical blocks: (6.48 MB/6.18 MiB)
</span><span class='line'>sd 0:0:0:0: [sda] Write Protect is off
</span><span class='line'>sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn&amp;rsquo;t support DPO or FUA
</span><span class='line'>mousedev: PS/2 mouse device common for all mice
</span><span class='line'>sd 0:0:0:0: [sda] Attached SCSI disk
</span><span class='line'>NET: Registered protocol family 10
</span><span class='line'>sit: IPv6 over IPv4 tunneling driver
</span><span class='line'>NET: Registered protocol family 17
</span><span class='line'>input: AT Raw Set 2 keyboard as /devices/fpga:06/serio0/input/input0
</span><span class='line'>input: ImExPS/2 Generic Explorer Mouse as /devices/fpga:07/serio1/input/input2
</span><span class='line'>EXT4-fs (sda): couldn&amp;rsquo;t mount as ext3 due to feature incompatibilities
</span><span class='line'>EXT4-fs (sda): mounting ext2 file system using the ext4 subsystem
</span><span class='line'>EXT4-fs (sda): mounted filesystem without journal. Opts: (null)
</span><span class='line'>VFS: Mounted root (ext2 filesystem) readonly on device 8:0.
</span><span class='line'>devtmpfs: mounted
</span><span class='line'>Freeing unused kernel memory: 120K (c0410000 - c042e000)
</span><span class='line'>EXT4-fs (sda): warning: mounting unchecked fs, running e2fsck is recommended
</span><span class='line'>EXT4-fs warning (device sda): ext4_update_dynamic_rev:717: updating to rev 1 because of new feature flag, running e2fsck is recommended
</span><span class='line'>EXT4-fs (sda): re-mounted. Opts: block_validity,barrier,user_xattr,errors=remount-ro
</span><span class='line'>Starting logging: OK
</span><span class='line'>Initializing random number generator&amp;hellip; random: dd urandom read with 43 bits of entropy available
</span><span class='line'>done.
</span><span class='line'>Starting network: 8139cp 0000:00:0c.0 eth0: link up, 100Mbps, full-duplex, lpa 0x05E1
</span><span class='line'>udhcpc: started, v1.25.0
</span><span class='line'>udhcpc: sending discover
</span><span class='line'>udhcpc: sending select for 10.0.2.15
</span><span class='line'>udhcpc: lease of 10.0.2.15 obtained, lease time 86400
</span><span class='line'>deleting routers
</span><span class='line'>adding dns 10.0.2.3
</span><span class='line'>OK&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Welcome to Buildroot
</span><span class='line'>buildroot login: root
</span><span class='line'>#
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(過期) Linux Kernel Pratice 0: Buildroot (1/2)]]></title>
    <link href="http://wen00072.github.io/blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu/"/>
    <updated>2016-09-27T09:43:20+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu</id>
    <content type="html"><![CDATA[<h3><font color="red">感謝Scott 大大糾正，選錯平台，這篇使用了ARMv4指令集的測試平台。請大家忽略，正確的版本將會之後更新!</font></h3>

<p>理論上不應該要邊移動邊開火，延長戰線。不過計劃趕不上變化，既來之則安之。</p>

<p>最近因為特別因素開始學習Linux kernel，看能不能Linux kernel和STM32兩邊都不要漏掉。不管怎樣，學習和實習絕對分不開，所以還是從環境架設開始吧。這次的實習環境架設的目標是：</p>

<ol>
<li>可以使用ARM 平台。一方面追求流行，一方面我不想再開x86這個副本</li>
<li>可以方便地建立ARM平台的Linux Rootfs和kernel版本</li>
<li>可以方便地更改指定要編譯的Kernel版本</li>
<li>透過Qemu ，使用2的Rootfs和kernel開機</li>
<li>透過Qemu和搭配的工具可以分析Linux kernel的run time 行為</li>
</ol>


<p>今天只有辦到1, 2和4而已，剩下的還要繼續努力。</p>

<h2>目錄</h2>

<ul>
<li><a href="#de_lk0_env">測試環境</a></li>
<li><a href="#de_lk0_ins">安裝Buildroot</a>

<ul>
<li><a href="#de_lk0_ins_dl">下載Buildroot</a></li>
<li><a href="#de_lk0_ins_set">設定ARM 環境</a></li>
<li><a href="#de_lk0_ins_build">編譯及輸出</a></li>
</ul>
</li>
<li><a href="#de_lk0_test">測試</a></li>
<li><a href="#de_lk0_ref">參考資料</a>

<ul>
<li><a href="#de_lk0_ref_data">下次準備看的資料</a></li>
</ul>
</li>
</ul>


<p><a name="de_lk0_env"></a></p>

<h2>測試環境</h2>

<p>因為我已經裝過開發相關的套件，因此如果您是新手可能要自行摸索也許有需要另外安裝的套件如<code>git</code>。嘛，練習解讀錯誤訊息也是一種學習。</p>

<pre>
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</pre>


<p><a name="de_lk0_ins"></a></p>

<h2>安裝Buildroot</h2>

<p>主要分成下面三個步驟</p>

<ul>
<li><a href="#de_lk0_ins_dl">下載Buildroot</a></li>
<li><a href="#de_lk0_ins_set">設定ARM 環境</a></li>
<li><a href="#de_lk0_ins_build">編譯及輸出</a></li>
</ul>


<p><a name="de_lk0_ins_dl"></a></p>

<h3>下載Buildroot</h3>

<p>直接看例子，剪下貼上就好</p>

<pre><code class="sh">mkdir buildroot
cd buildroot
git clone git://git.buildroot.net/buildroot
</code></pre>

<p><a name="de_lk0_ins_set"></a></p>

<h3>設定ARM 環境</h3>

<p>網路上查到大部分都是從<code>make menuconfig</code>開始。不過我是很<strong>明確地</strong>要用<code>Qemu</code>跑ARM的系統。所以就找了一下發現有下面的指令</p>

<pre><code class="text">make qemu_x86_defconfig
</code></pre>

<p>想說既然有<code>x86_defconfig</code>，那應該有<code>arm_defconfig</code>吧? 錯！那我就去<code>buildroot/board/qemu</code>目錄下找，有看到<code>arm-versatile</code>。印象中<a href="blog/2015/02/07/by-qemu-arm-installation-of-debian-systems/">以前</a>有用過Qemu跑的Debian系統也是<code>versatile</code>。所以就很高興地下了</p>

<pre><code class="text">make qemu_arm-versatile_defconfig
</code></pre>

<p>結果一樣GG，估狗查才知道正確的用法是：</p>

<pre><code>make qemu_arm_versatile_defconfig
</code></pre>

<p><strong>更新:</strong> 後來看手冊才知道有<code>make list-defconfigs</code>可以查詢有哪些default config，果然前輩說要RTFM是對的，唉。</p>

<p>接下來就用<code>make menuconfig</code>做細項調整，我主要是改成</p>

<ol>
<li>使用glibc</li>
<li>使用gcc 4.8

<ul>
<li>預設5.x，因為我想要編Linux kernel 4.4.2。以前PC經驗使用gcc 5.x極端痛苦，後來還是換回gcc 4.8</li>
</ul>
</li>
<li>一些除錯設定</li>
</ol>


<p>另外本來想要嘗試設定更動Kernel版本，但是發現需要更進一步的了解buildroot才能夠達成。當作下次目標吧。</p>

<p><a name="de_lk0_ins_build"></a></p>

<h3>編譯及輸出</h3>

<p>編譯只要下<code>make</code>就會幫你下載和編譯開機需要的</p>

<ol>
<li>套件和一些常用工具，並封裝到<code>output/image/roofs.ext2</code></li>
<li>Kernel(預設4.7)，編譯成<code>zImage</code>，放在<code>output/image/zImage</code></li>
</ol>


<p><a name="de_lk0_test"></a></p>

<h2>測試</h2>

<p>接下來也不難，可以參考<code>board/qemu/arm-versatile/readme.txt</code>
簡單來說就是執行下面指令，開機完使用<code>root</code>登入不用密碼，使用<code>poweroff</code>後再手動離開qemu。</p>

<pre><code class="sh">qemu-system-arm -M versatilepb -kernel output/images/zImage -dtb output/images/versatile-pb.dtb -drive file=output/images/rootfs.ext2,if=scsi,format=raw -append "root=/dev/sda console=ttyAMA0,115200" -serial stdio -net nic,model=rtl8139 -net user
</code></pre>

<p>執行畫面如下</p>

<pre><code class="text">$ qemu-system-arm -M versatilepb -kernel output/images/zImage -dtb output/images/versatile-pb.dtb -drive file=output/images/rootfs.ext2,if=scsi,format=raw -append "root=/dev/sda console=ttyAMA0,115200" -serial stdio -net nic,model=rtl8139 -net user
...
Booting Linux on physical CPU 0x0
Linux version 4.7.0 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #1 Mon Sep 26 22:36:42 CST 2016
CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00093177
CPU: VIVT data cache, VIVT instruction cache
Machine model: ARM Versatile PB
....
EXT4-fs (sda): re-mounted. Opts: block_validity,barrier,user_xattr,errors=remount-ro
Starting logging: OK
Initializing random number generator... random: dd urandom read with 46 bits of entropy available
done.
Starting network: 8139cp 0000:00:0c.0 eth0: link up, 100Mbps, full-duplex, lpa 0x05E1
...
adding dns 10.0.2.3
OK

Welcome to Buildroot
buildroot login: root
#
</code></pre>

<p><a name="de_lk0_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://buildroot.org/downloads/manual/manual.html">The Buildroot user manual</a>

<ul>
<li>只有看部份，不過官方文件本來就是應該放在第一位</li>
</ul>
</li>
<li><a href="http://pressreset.net/2013/09/buildroot-and-qemu-the-quickest-receipe-for-your-own-linux/">Buildroot and QEMU – the quickest receipe for your own Linux</a>

<ul>
<li>東西弄完才看到的文章，入門好文</li>
</ul>
</li>
</ul>


<p><a name="de_lk0_ref_data"></a></p>

<h3>下次準備看的資料</h3>

<ul>
<li><a href="http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel">Qemu and the Kernel</a>

<ul>
<li>使用Qemu debug kernel的資料</li>
</ul>
</li>
<li><a href="http://unix.stackexchange.com/questions/90423/can-virtfs-9p-be-used-as-root-file-system">Stackoverflow: Can virtfs/9p be used as root file system?</a>

<ul>
<li>Qemu和Host主機共享資料，甚至直接把rootfs放host讓qemu去讀取的方式</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
