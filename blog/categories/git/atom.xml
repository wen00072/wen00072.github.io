<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-06-08T17:08:45+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[談談.git 目錄]]></title>
    <link href="http://wen00072.github.io/blog/2015/03/10/talk-git-directory/"/>
    <updated>2015-03-10T23:21:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/03/10/talk-git-directory</id>
    <content type="html"><![CDATA[<p>如果有使用git的朋友，可能會知道git是一個分散式版本控制系統。這表示repository會放一份在本機上面。仔細或是有看書的人，會知道這些repository沒有意外會放在工作目錄的<code>.git</code>下面。今天無聊來這個目錄戳戳看。</p>

<p>因為愈寫愈多，還是弄一下目錄好了</p>

<ul>
<li><a href="#g_env">測試環境</a></li>
<li><a href="#g_bkg">背景知識</a></li>
<li><a href="#g_list">.git目錄列表</a></li>
<li><a href="#g_1st_file">.git第一層檔案</a>

<ul>
<li><a href="#gidx">index</a></li>
<li><a href="#gpkref">packed-refs</a></li>
<li><a href="#gconf">config</a></li>
<li><a href="#gorg_head">ORIG_HEAD</a></li>
<li><a href="#gdesc">description</a></li>
<li><a href="#ghead">HEAD</a></li>
</ul>
</li>
<li><a href="#g_1st_dir">.git第一層目錄</a>

<ul>
<li><a href="#g_1st_dir_br">branches</a></li>
<li><a href="#g_1st_dir_hk">hooks</a></li>
<li><a href="#g_1st_dir_inf">info</a></li>
<li><a href="#g_1st_dir_log">logs</a></li>
<li><a href="#g_1st_dir_obj">objects</a></li>
<li><a href="#g_1st_dir_ref">refs</a></li>
</ul>
</li>
<li><a href="#g_ref">參考資料</a></li>
</ul>


<p><a name="g_env"></a></p>

<h2>測試環境</h2>

<pre><code>$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.2 LTS
Release:    14.04
Codename:   trusty

$ git --version
git version 2.3.0

$ git remote show 
origin
$ git remote show origin 
* remote origin
  Fetch URL: https://github.com/pcman-bbs/pcmanx.git
  Push  URL: https://github.com/pcman-bbs/pcmanx.git
  HEAD branch: master
  Remote branches:
    gtk3                          tracked
    master                        tracked
    next-release                  tracked
    show_web_search_in_popup_menu tracked
    transparent_background        tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
</code></pre>

<p><a name="g_list"></a></p>

<h2>.git目錄列表</h2>

<pre><code>/tmp/pcmanx$ ls -gG --group-directories-first .git
total 56
drwxrwxr-x 2  4096 Mar  3 23:36 branches
drwxrwxr-x 2  4096 Mar  3 23:36 hooks
drwxrwxr-x 2  4096 Mar  3 23:36 info
drwxrwxr-x 3  4096 Mar  3 23:37 logs
drwxrwxr-x 4  4096 Mar  3 23:36 objects
drwxrwxr-x 5  4096 Mar  3 23:37 refs
-rw-rw-r-- 1   264 Mar  3 23:37 config
-rw-rw-r-- 1    73 Mar  3 23:36 description
-rw-rw-r-- 1    23 Mar  3 23:37 HEAD
-rw-rw-r-- 1 12256 Mar  4 23:11 index
-rw-rw-r-- 1    41 Mar  4 23:11 ORIG_HEAD
-rw-rw-r-- 1   829 Mar  3 23:37 packed-refs
</code></pre>

<p><a name="g_bkg"></a></p>

<h2>背景知識</h2>

<p>這邊只列出需要的背景知識，可能有錯。</p>

<ul>
<li>Git 的基本上資料有分blob, tree, commit, tag這四種型態</li>
<li>Git 的branch可以視為放一個檔案，這個檔案存放某個commit的HASH資訊</li>
</ul>


<p>多說無益，直接操作，先來看這四種型態是三小
<code>
$ git log
commit fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304
...
</code></p>

<p>來看一下 fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304裏面是啥
<code>
$ git cat-file -p fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304
tree 2f6db7ea7db6b66cb4c07a98e78b580f67872db6
parent 3fb419f40c10d67bd1b9b18152fb43cca58ca411
...
</code></p>

<p>可以看到有放</p>

<ul>
<li>tree型態的HASH</li>
<li>上一個commit的HASH</li>
<li>commit的訊息</li>
</ul>


<p>接下來來看tree吧</p>

<pre><code>$ git cat-file -p 2f6db7ea7db6b66cb4c07a98e78b580f67872db6
...
100644 blob 5bc4b3f69d730535eb3a8aee28d7ef9273225d50    .gitignore
...
040000 tree b0b46378d75b1737257fef9d9eb433489b2d0ea0    build
</code></pre>

<p>有沒有和Linux的<a href="http://en.wikipedia.org/wiki/Ext2#Directories">File system</a>很像？<del>目錄</del>tree資料放的是<del>inode</del>HASH值和檔案名稱的對應表。</p>

<p>我們可以看到HASH的型態有tree和blob，理所當然來看看blob吧。</p>

<pre><code>$ git cat-file -p 5bc4b3f69d730535eb3a8aee28d7ef9273225d50
## autotools generated
Doxyfile
INSTALL
Makefile
Makefile.in
...
</code></pre>

<p>很明顯這是一個資料存放的地方。</p>

<p>然後我們來看branch是不是真的放在檔案，檔案內容是某個commit HASH吧，直接看範例。</p>

<pre><code>$ git checkout -b br1
Switched to a new branch 'br1'
$ git checkout -b br2
Switched to a new branch 'br2'
$ tree .git/refs/
.git/refs/
├── heads
│   ├── br1
│   ├── br2
│   └── master
├── remotes
│   └── origin
│       └── HEAD
└── tags

$ git log
commit fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304
...
$ cat .git/refs/heads/br1 
fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304
$ cat .git/refs/heads/br2
fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304
$ cat .git/refs/heads/master 
fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304
</code></pre>

<p><a name="g_1st_file"></a></p>

<h2>.git第一層檔案</h2>

<p>用file看一下，可以看到大部分都是純文字檔：</p>

<pre><code>/tmp/pcmanx$ find .git -maxdepth 1 -type f -exec file {} \;
.git/index: Git index, version 2, 144 entries
.git/packed-refs: ASCII text
.git/config: ASCII text
.git/ORIG_HEAD: ASCII text
.git/description: ASCII text
.git/HEAD: ASCII text
</code></pre>

<p>接下來分別討論</p>

<ul>
<li><a href="#gidx">index</a></li>
<li><a href="#gpkref">packed-refs</a></li>
<li><a href="#gconf">config</a></li>
<li><a href="#gorg_head">ORIG_HEAD</a></li>
<li><a href="#gdesc">description</a></li>
<li><a href="#ghead">HEAD</a></li>
</ul>


<p><a name="gidx"></a></p>

<h2>index</h2>

<p>先看下面的操作。</p>

<pre><code>$ file .git/index 
.git/index: Git index, version 2, 144 entries

$ find -type f | grep -v .git\/ | cut -c 3- | sort | wc -l
144

$ git ls-files | wc -l
144
</code></pre>

<p>有興趣的人可以把<code>| wc -l</code>去掉玩看看，基本上這個是在描述repository的目錄結構。也就是說，哪個檔案要放在那個目錄。更精確的來說，協助那個blob hash要放在哪個tree中。根據<a href="http://schacon.github.io/gitbook/7_the_git_index.html">這邊</a>的說法，這個檔案可以協助</p>

<ul>
<li>提供產生tree object時需要的資料</li>
<li>提供比對working directory和tree的資訊</li>
<li>merge產生衝突時，可以從index取得的資料協助解決衝突。不過這邊不是很懂，就單純字面翻譯了。</li>
</ul>


<p><a name="gpkref"></a></p>

<h2>packed-refs</h2>

<p>簡單來說，考量效率，git提供pack ref目錄的功能，ref的概念請看前面背景知識。</p>

<p>一樣，看例子比較快。</p>

<p>先用<code>git show-ref</code>看看我們有哪些reference
<code>
$ git show-ref
fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 refs/heads/master
fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 refs/remotes/origin/HEAD
c86b440bafe24caecfe0dbfbbd73031a1bcd1178 refs/remotes/origin/gtk3
fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 refs/remotes/origin/master
22da092eb00b78946fd70de24427d702a77b925b refs/remotes/origin/next-release
98ff18f84fad4686012bf6183734eeb1ec5d7f46 refs/remotes/origin/show_web_search_in_popup_menu
9542889d17d276321d6da2de8d1f9d95f76fb483 refs/remotes/origin/transparent_background
7a3629ab3da7c609cf3698319ab606ebae0998e7 refs/tags/0.3.2@221
f57350c72987263c2b745690bdc8013fbbd6067c refs/tags/0.3.3@243
522d1dc2568b5c7c256e05ca69412480e1afcfb3 refs/tags/0.3.4
8e9d9520125f64a0b894a5d575f0c2d98c3ec06b refs/tags/0.3.4@301
7031115a8ea1151efc1536b43a509774ca2c0777 refs/tags/0.3.7
3f4dcbe6e1aa0045fbeb9f1f761ce035e65defea refs/tags/1.1
098d158c8d8a7ce7c6b2c5c47c967c6137beced2 refs/tags/1.2
</code></p>

<p>看看<code>packed-refs</code>裏面是三小？有沒有發現和上面很像啊？
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat .git/packed-refs&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;pack-refs with: peeled fully-peeled&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;c86b440bafe24caecfe0dbfbbd73031a1bcd1178 refs/remotes/origin/gtk3
</span><span class='line'>fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 refs/remotes/origin/master
</span><span class='line'>22da092eb00b78946fd70de24427d702a77b925b refs/remotes/origin/next-release
</span><span class='line'>98ff18f84fad4686012bf6183734eeb1ec5d7f46 refs/remotes/origin/show_web_search_in_popup_menu
</span><span class='line'>9542889d17d276321d6da2de8d1f9d95f76fb483 refs/remotes/origin/transparent_background
</span><span class='line'>7a3629ab3da7c609cf3698319ab606ebae0998e7 refs/tags/0.3.2@221
</span><span class='line'>f57350c72987263c2b745690bdc8013fbbd6067c refs/tags/0.3.3@243
</span><span class='line'>522d1dc2568b5c7c256e05ca69412480e1afcfb3 refs/tags/0.3.4
</span><span class='line'>8e9d9520125f64a0b894a5d575f0c2d98c3ec06b refs/tags/0.3.4@301
</span><span class='line'>7031115a8ea1151efc1536b43a509774ca2c0777 refs/tags/0.3.7
</span><span class='line'>3f4dcbe6e1aa0045fbeb9f1f761ce035e65defea refs/tags/1.1
</span><span class='line'>098d158c8d8a7ce7c6b2c5c47c967c6137beced2 refs/tags/1.2</span></code></pre></td></tr></table></div></figure></p>

<p>看一下ref目錄，上面的那些reference並不存在在<code>.git/ref</code>裏面
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree .git/refs/
</span><span class='line'>.git/refs/
</span><span class='line'>├── heads
</span><span class='line'>│   └── master
</span><span class='line'>├── remotes
</span><span class='line'>│   └── origin
</span><span class='line'>│       └── HEAD
</span><span class='line'>└── tags&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4 directories, 2 files</span></code></pre></td></tr></table></div></figure></p>

<p>好，生一個branch看看。
<code>
$ git checkout -b I_got_a_new_ref
Switched to a new branch 'I_got_a_new_ref'
</code></p>

<p>喔喔！<code>.git/refs</code>出現了剛才產生的ref
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree .git/refs/
</span><span class='line'>.git/refs/
</span><span class='line'>├── heads
</span><span class='line'>│   ├── I_got_a_new_ref
</span><span class='line'>│   └── master
</span><span class='line'>├── remotes
</span><span class='line'>│   └── origin
</span><span class='line'>│       └── HEAD
</span><span class='line'>└── tags&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4 directories, 3 files</span></code></pre></td></tr></table></div></figure></p>

<p>跑一下<code>git gc</code>整理一下
<code>
$ git gc
Counting objects: 5002, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (1068/1068), done.
Writing objects: 100% (5002/5002), done.
Total 5002 (delta 3913), reused 5002 (delta 3913)
</code></p>

<p>疑？剛才的branch不見了。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree .git/refs/
</span><span class='line'>.git/refs/
</span><span class='line'>├── heads
</span><span class='line'>├── remotes
</span><span class='line'>│   └── origin
</span><span class='line'>│       └── HEAD
</span><span class='line'>└── tags&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4 directories, 1 file</span></code></pre></td></tr></table></div></figure></p>

<p>跑去pack-ref了
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat .git/packed-refs&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;pack-refs with: peeled fully-peeled&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 refs/heads/I_got_a_new_ref
</span><span class='line'>fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 refs/heads/master
</span><span class='line'>c86b440bafe24caecfe0dbfbbd73031a1bcd1178 refs/remotes/origin/gtk3
</span><span class='line'>fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 refs/remotes/origin/master
</span><span class='line'>22da092eb00b78946fd70de24427d702a77b925b refs/remotes/origin/next-release
</span><span class='line'>98ff18f84fad4686012bf6183734eeb1ec5d7f46 refs/remotes/origin/show_web_search_in_popup_menu
</span><span class='line'>9542889d17d276321d6da2de8d1f9d95f76fb483 refs/remotes/origin/transparent_background
</span><span class='line'>7a3629ab3da7c609cf3698319ab606ebae0998e7 refs/tags/0.3.2@221
</span><span class='line'>f57350c72987263c2b745690bdc8013fbbd6067c refs/tags/0.3.3@243
</span><span class='line'>522d1dc2568b5c7c256e05ca69412480e1afcfb3 refs/tags/0.3.4
</span><span class='line'>8e9d9520125f64a0b894a5d575f0c2d98c3ec06b refs/tags/0.3.4@301
</span><span class='line'>7031115a8ea1151efc1536b43a509774ca2c0777 refs/tags/0.3.7
</span><span class='line'>3f4dcbe6e1aa0045fbeb9f1f761ce035e65defea refs/tags/1.1
</span><span class='line'>098d158c8d8a7ce7c6b2c5c47c967c6137beced2 refs/tags/1.2</span></code></pre></td></tr></table></div></figure></p>

<p><a name="gconf"></a></p>

<h2>config</h2>

<p>其實這個是個大哉問，就值得專門開一個章節討論。所以我整理到<a href="http://wen00072.github.io/blog/2015/03/08/introduction-to-git-config">這個頁面</a>，請自行前往閱讀。</p>

<p><a name="gorg_head"></a></p>

<h2>ORIG_HEAD</h2>

<p>這個檔案很有趣，一開始其實不存在。後來不知道怎麼突然跑出來，問了估狗和男人(man git reset)後得到的答案就是當reset的時候會把舊的HEAD hash放到這邊。為什麼要這樣做呢，當然是反悔用的。你可以<code>man git commit</code>找<code>ORIG_HEAD</code>就可以看看<code>git commit --amend</code>同效果的範例了。</p>

<p><a name="gdesc"></a></p>

<h2>description</h2>

<p>懶得解釋，跳過</p>

<p><a name="ghead"></a></p>

<h2>HEAD</h2>

<p>望文生義，當然是指向目前所在的commit。</p>

<p>等等！</p>

<p>指向目前所在的commit是三小？
一樣，來看例子。</p>

<p>目前clone下來，裏面放的是一個檔案，檔案裏面是什麼呢？一樣是個commit HASH
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat .git/HEAD
</span><span class='line'>ref: refs/heads/master&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ cat .git/refs/heads/master
</span><span class='line'>fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git cat-file -t fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304
</span><span class='line'>commit</span></code></pre></td></tr></table></div></figure></p>

<p>那我直接checkout一個不是branch的可以嘛？當然沒問題。
可以看到git會把你checkout的commit HASH寫入.git/HEAD</p>

<pre><code>$ strace git checkout 93f0addca5b2723ff0f1b744b032f359
...
open("/tmp/pcmanx/.git/HEAD.lock", O_RDWR|O_CREAT|O_EXCL, 0666) = 3
write(3, "93f0addca5b2723ff0f1b744b032f359"..., 40) = 40
write(3, "\n", 1)                       = 1
close(3)                                = 0
...
rename("/tmp/pcmanx/.git/HEAD.lock", "/tmp/pcmanx/.git/HEAD") = 0
...

$ cat .git/HEAD 
93f0addca5b2723ff0f1b744b032f359938a286d
</code></pre>

<p><a name="g_1st_dir"></a></p>

<h2>第一層目錄</h2>

<ul>
<li><a href="#g_1st_dir_br">branches</a></li>
<li><a href="#g_1st_dir_hk">hooks</a></li>
<li><a href="#g_1st_dir_inf">info</a></li>
<li><a href="#g_1st_dir_log">logs</a></li>
<li><a href="#g_1st_dir_obj">objects</a></li>
<li><a href="#g_1st_dir_ref">refs</a></li>
</ul>


<p><a name="g_1st_dir_br"></a></p>

<h2>branches</h2>

<p>快過期的東西(<a href="http://git-scm.com/docs/gitrepository-layout">出處</a>)，跳過。</p>

<p><a name="g_1st_dir_hk"></a></p>

<h2>hooks</h2>

<p>hook，這個翻成中文很鳥，保留原文。基本上就是一組callback，特定的時候會去呼叫。我目前生意沒有做很大，有需要再去看。列出預設的檔案如下</p>

<pre><code>$ ll .git/hooks/
total 48
drwxrwxr-x 2 wen wen 4096 Mar  9 23:10 ./
drwxrwxr-x 8 wen wen 4096 Mar  9 23:21 ../
-rwxrwxr-x 1 wen wen  452 Mar  9 23:10 applypatch-msg.sample*
-rwxrwxr-x 1 wen wen  896 Mar  9 23:10 commit-msg.sample*
-rwxrwxr-x 1 wen wen  189 Mar  9 23:10 post-update.sample*
-rwxrwxr-x 1 wen wen  398 Mar  9 23:10 pre-applypatch.sample*
-rwxrwxr-x 1 wen wen 1642 Mar  9 23:10 pre-commit.sample*
-rwxrwxr-x 1 wen wen 1239 Mar  9 23:10 prepare-commit-msg.sample*
-rwxrwxr-x 1 wen wen 1348 Mar  9 23:10 pre-push.sample*
-rwxrwxr-x 1 wen wen 4898 Mar  9 23:10 pre-rebase.sample*
-rwxrwxr-x 1 wen wen 3611 Mar  9 23:10 update.sample*
</code></pre>

<p><a name="g_1st_dir_inf"></a></p>

<h2>info</h2>

<p>儲存資訊，廢話。目前裏面只有一個exclude，而且檔案內容還都是註解。但是<a href="http://git-scm.com/docs/gitrepository-layout">這邊</a>有說還有其他檔案。另外值得提的是exclude說明有提到<code>.gitignore</code>針對的是<code>git status</code>, <code>git rm</code>, <code>git add</code>, <code>git clean</code>。其他的操作還是得在<code>.git/log/exclude</code>中設定。</p>

<p><a name="g_1st_dir_log"></a></p>

<h2>logs</h2>

<p>這是存放log的地方。log是什麼呢？直接看個例子。</p>

<p>我們先新增一個測試檔案
<code>
$ touch test2
$ git add test2
$ git commit test2 -m "test2"
[master 09580e4] test2
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 test2
</code></p>

<p>執行<code>git reflog</code>，可以看到你剛才的動作以及有當次HEAD的commit HASH已經被記起來。
<code>
$ git reflog
09580e4 HEAD@{0}: commit: test2
fd5d6ab HEAD@{1}: checkout: moving from 93f0addca5b2723ff0f1b744b032f359938a286d to master
93f0add HEAD@{2}: checkout: moving from master to 93f0addca5b2723ff0f1b744b032f359938a286d
...
</code></p>

<p>這東西有什麼用處呢？當然是讓你反悔用的。再來看個例子</p>

<p>首先開一個branch
<code>
$ git checkout -b demo_reflog
Switched to a new branch 'demo_reflog'
</code></p>

<p>新增並commit file1
<code>
$ touch file1
$ git add file1
$ git commit file1 -m "file 1"
[demo_reflog c982c70] file 1
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file1
</code></p>

<p>然後新增並commit file2
<code>
$ touch file2
$ git add file2
$ git commit file2 -m "file 2"
[demo_reflog b85f4d4] file 2
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file2
</code></p>

<p>切回master並且宰掉剛才的branch
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout master
</span><span class='line'>Switched to branch &lsquo;master&rsquo;
</span><span class='line'>Your branch is up-to-date with &lsquo;origin/master&rsquo;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git branch -D demo_reflog&lt;br/&gt;
</span><span class='line'>Deleted branch demo_reflog (was b85f4d4).</span></code></pre></td></tr></table></div></figure></p>

<p>假設上一個動作是手滑誤刪，能不能反悔。
YES YOU CAN!</p>

<p>先看看log
<code>
$ git reflog
fd5d6ab HEAD@{0}: checkout: moving from demo_reflog to master
b85f4d4 HEAD@{1}: commit: file 2
c982c70 HEAD@{2}: commit: file 1
...
</code></p>

<p>可以知道上次branch最後commit的HASH，那麼我們就可以切過去然後開另外一個branch了。
<code>
$ git checkout -b i_am_back b85f4d4
Switched to a new branch 'i_am_back'
</code></p>

<p>可以看到資料回來了。
<code>
$ git log --pretty=oneline --abbrev-commit
b85f4d4 file 2
c982c70 file 1
fd5d6ab Fix invisible cairo caret issue.
...
</code></p>

<p>當然這還是險招，git本身保留是有保存期限的。有興趣問男人。<code>man git gc</code></p>

<p>不知道有沒有會問：「啊不是要介紹<code>.git/logs</code>嘛？」</p>

<p>問得好！猜猜剛才git reflogs檔案從哪裡讀出來？</p>

<p>一樣請出strace大大
<code>
$ strace -e open git reflog
...
open("/tmp/pcmanx/.git/logs/HEAD", O_RDONLY) = 3
...
</code></p>

<p>有看到<code>.git/logs/HEAD</code>吧？有沒有想看一下裏面是啥？至少我想看。</p>

<pre><code>$ cat .git/logs/HEAD
...
fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 c982c70f00875b83e4845ca35ef0ca4c70f73e64 Wen.Liao &lt;censored&gt; 1425997414 +0800  commit: file 1
c982c70f00875b83e4845ca35ef0ca4c70f73e64 b85f4d4dca4012a2d1785750061fae9e03e817e1 Wen.Liao &lt;censored&gt; 1425997438 +0800  commit: file 2
b85f4d4dca4012a2d1785750061fae9e03e817e1 fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 Wen.Liao &lt;censored&gt; 1425997673 +0800  checkout: moving from demo_reflog to master
fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304 b85f4d4dca4012a2d1785750061fae9e03e817e1 Wen.Liao &lt;censored&gt; 1425997732 +0800  checkout: moving from master to b85f4d4
b85f4d4dca4012a2d1785750061fae9e03e817e1 b85f4d4dca4012a2d1785750061fae9e03e817e1 Wen.Liao &lt;censored&gt; 1425997746 +0800  checkout: moving from b85f4d4dca4012a2d1785750061fae9e03e817e1 to i_am_back
</code></pre>

<p>精確的來說，<code>.git/logs</code>下面不只紀錄HEAD的log，還有各種ref的log。有興趣的朋友可以自行參考<a href="http://git-scm.com/docs/gitrepository-layout">這邊</a>，並且進去目錄逛逛。</p>

<p><a name="g_1st_dir_obj"></a></p>

<h2>objects</h2>

<p>先看剛clone下來的目錄結構
<code>
$ tree .git/objects/
.git/objects/
├── info
└── pack
    ├── pack-6042320de285747900cc3263a47f7bab429cabf8.idx
    └── pack-6042320de285747900cc3263a47f7bab429cabf8.pack
</code></p>

<p>來生一個目錄和並且commit一個東西進去。
<code>
$ mkdir tree
$ echo test &gt; tree/file
$ git add tree/file
$ git commit tree/file -m "test tree and file"
[master 2ba01ef] test tree and file
 1 file changed, 1 insertion(+)
 create mode 100644 tree/file
</code></p>

<p>然後看看這個目錄變化吧
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree .git/objects/
</span><span class='line'>.git/objects/
</span><span class='line'>├── 2b
</span><span class='line'>│   └── a01ef5583f35dd57b5fb5bde732f73bc315b6d
</span><span class='line'>├── 9d
</span><span class='line'>│   └── aeafb9864cf43055ae93beb0afd6c7d144bfa4
</span><span class='line'>├── de
</span><span class='line'>│   └── f69c2c316574aaf328e546486fa750eb9c53a0
</span><span class='line'>├── e1
</span><span class='line'>│   └── b8ecbb1f19709f3a4867a0ffe08bb2e07acf19
</span><span class='line'>├── info
</span><span class='line'>└── pack
</span><span class='line'>    ├── pack-6042320de285747900cc3263a47f7bab429cabf8.idx
</span><span class='line'>    └── pack-6042320de285747900cc3263a47f7bab429cabf8.pack&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;6 directories, 6 files</span></code></pre></td></tr></table></div></figure></p>

<p>接下來把目錄和檔案混起來，用<code>git cat-file -p</code>看看裏面是啥
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git cat-file -p 2ba01ef5583f35dd57b5fb5bde732f73bc315b6d
</span><span class='line'>tree def69c2c316574aaf328e546486fa750eb9c53a0
</span><span class='line'>parent fd5d6abe34f41f8687c1fc5e2ab0a2f65c570304
</span><span class='line'>author Wen.Liao &lt;censored&gt; 1425999641 +0800
</span><span class='line'>committer Wen.Liao &lt;censored&gt; 1425999641 +0800&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;test tree and file
</span><span class='line'>&lt;code&gt;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ git cat-file -p 9daeafb9864cf43055ae93beb0afd6c7d144bfa4
</span><span class='line'>test
</span><span class='line'>&lt;code&gt;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ git cat-file -p def69c2c316574aaf328e546486fa750eb9c53a0
</span><span class='line'>100644 blob 5bc4b3f69d730535eb3a8aee28d7ef9273225d50    .gitignore
</span><span class='line'>&hellip;
</span><span class='line'>040000 tree e1b8ecbb1f19709f3a4867a0ffe08bb2e07acf19    tree
</span><span class='line'>&lt;code&gt;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ git cat-file -p e1b8ecbb1f19709f3a4867a0ffe08bb2e07acf19
</span><span class='line'>100644 blob 9daeafb9864cf43055ae93beb0afd6c7d144bfa4    file</span></code></pre></td></tr></table></div></figure></p>

<p>其實不難猜，你local commit的東西會被處理後變成object，並且依照hash分門別類地存放。</p>

<p>接下來我們來做個測試
<code>
$ git gc
Counting objects: 5006, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (1070/1070), done.
Writing objects: 100% (5006/5006), done.
Total 5006 (delta 3914), reused 5001 (delta 3913)
</code></p>

<p>可以看到，剛才的目錄全部消失，而pack目錄的檔案名稱也和前面的不同了。對照上面<code>git gc</code>的訊息，可以知道<code>git gc</code>做了壓縮，並且將這些object一起壓到pack目錄的檔案中了。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree .git/objects/
</span><span class='line'>.git/objects/
</span><span class='line'>├── info
</span><span class='line'>│   └── packs
</span><span class='line'>└── pack
</span><span class='line'>    ├── pack-57d163604c430e1919a18e97c5b1312291b62721.idx
</span><span class='line'>    └── pack-57d163604c430e1919a18e97c5b1312291b62721.pack&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2 directories, 3 files</span></code></pre></td></tr></table></div></figure></p>

<p>所以我們可以從觀察中做出結論。Git object的存放有兩種型式</p>

<ul>
<li>loose object：就是剛才看到用[HASH前兩碼]/[剩下HASH] 的目錄檔案結構</li>
<li>packed object: 把object壓縮成兩個檔案</li>
</ul>


<p>而looose object型式經過<code>git gc</code>後會有可能轉換成packed object，反之亦然。詳細規則問男人。
由於<code>git gc</code>是用來<strong>清除</strong>和<strong>整理</strong>local repository，也就是說做了<code>git gc</code>是有可能刪除用不到的資料。詳細情況一樣請問男人<code>man git gc</code></p>

<p><a name="g_1st_dir_ref"></a></p>

<h2>refs</h2>

<ul>
<li><a href="#g_bkg">背景知識</a>和<a href="#gpkref">packed-ref</a>有提到，就不要拖台錢了。</li>
</ul>


<p><a name="g_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/4084921/what-does-the-git-index-contain-exactly">Stackoverflow: What does the git index contain EXACTLY?</a></li>
<li><a href="http://schacon.github.io/gitbook/7_the_git_index.html">Git Community Book: The Git Index</a></li>
<li><a href="http://stackoverflow.com/questions/964876/head-and-orig-head-in-git">Stackoverflow: HEAD and ORIG_HEAD in Git</a></li>
<li><a href="http://git-scm.com/book/en/v2/Git-Internals-Git-Objects">ProGit: 10.2 Git Internals - Git Objects</a></li>
<li><a href="http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html">what&rsquo;s inside your .git directory</a></li>
<li><a href="http://git-scm.com/docs/git-pack-refs">git-pack-refs - Pack heads and tags for efficient repository access</a></li>
<li><a href="http://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_git_config">ProGit: 8.1 Customizing Git - Git Configuration</a></li>
<li><a href="http://git-scm.com/docs/gitrepository-layout">gitrepository-layout - Git Repository Layout</a></li>
<li><a href="http://schacon.github.io/gitbook/7_how_git_stores_objects.html">Git Community Book: How Git Stores Objects</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ProGit: Customizing Git - Git Configuration導讀]]></title>
    <link href="http://wen00072.github.io/blog/2015/03/08/introduction-to-git-config/"/>
    <updated>2015-03-08T22:12:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/03/08/introduction-to-git-config</id>
    <content type="html"><![CDATA[<h2>目錄</h2>

<ul>
<li><a href="#g3_conf_env">測試環境</a></li>
<li><a href="#g3_conf_use">簡易使用方式</a></li>
<li><a href="#g3_conf_file">git config參考檔案以及順序</a></li>
<li><a href="#g3_conf_opt">git config 選項節錄</a>

<ul>
<li><a href="#g3_conf_ext">指定使用外部比較命令</a></li>
</ul>
</li>
<li><a href="#g3_conf_ref">參考資料</a></li>
</ul>


<p><a name="g3_conf_env"></a></p>

<h2>測試環境</h2>

<pre><code>$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.2 LTS
Release:    14.04
Codename:   trusty

$ git --version
git version 2.3.0

$ git remote -v
origin  https://github.com/pcman-bbs/pcmanx.git (fetch)
origin  https://github.com/pcman-bbs/pcmanx.git (push)
</code></pre>

<p><a name="g3_conf_use"></a></p>

<h2>簡易使用方式</h2>

<p>最簡單的使用方式</p>

<ul>
<li>新增/更改選項

<ul>
<li>git config 型態 名稱 你要設定的值

<ul>
<li>常見的型態有<code>--system</code>或是<code>--global</code></li>
</ul>
</li>
</ul>
</li>
<li>讀取選項

<ul>
<li>git config &ndash;get 名稱</li>
</ul>
</li>
</ul>


<p>值得注意的是，git config 的名稱一般來說會使用<code>.</code>作為分類的參考如
<code>git config test.user.name.first Liao</code>
<code>git config test.user.name.last Wen</code>
而在設定檔中，會用<code>[]</code>把第一個<code>.</code>的前面的字串放在前面，然後最後一個<code>.</code>後面的字串和你要設定的值變成
* <code>最後一個.後面的字串=你要設定的值</code></p>

<p>你應該要問，那中間的呢？好問題，中間的就放在<code>[]</code>裏面囉。</p>

<p>很模糊？看例子比較快。</p>

<pre><code>$ git config test.user.name.first Liao
$ git config test.user.name.last Wen
$ cat .git/config
...
[test "user.name"]
    first = Liao
    last = Wen
</code></pre>

<p><a name="g3_conf_file"></a></p>

<h2>git config參考檔案以及順序</h2>

<p>要注意的是/etc/gitconfig不一定存在，我的是沒有。所以生一個測試驗證用。</p>

<ul>
<li><code>/etc/gitconfig</code>

<ul>
<li>由<code>git config --system</code>產生</li>
</ul>
</li>
<li><code>~/.gitconfig</code>

<ul>
<li>由<code>git config --global</code>產生</li>
</ul>
</li>
<li><code>你的local repostiory/.git/config</code>

<ul>
<li>在<code>你的local repostiory</code>下面執行<code>git config</code>產生</li>
</ul>
</li>
</ul>


<p>檔案讀取順序是由上往下，全部都有資料的話。最後回傳值順序是由下而上。
要練習驗證，所以來看一下。</p>

<p>用strace看<code>git config --get user.name</code>開檔案的順序。
<code>
$ strace -e open git config --get user.name
...
open("/etc/gitconfig", O_RDONLY)        = 3
open("/home/user/.gitconfig", O_RDONLY)  = 3
open(".git/config", O_RDONLY)           = 3
...
Wen.Liao
+++ exited with 0 +++
</code></p>

<p>可以看到<code>/etc/gitcnfig</code>沒有user.name
<code>
$ cat /etc/gitconfig  | grep name
</code></p>

<p><code>~/.gitconfig</code>下有Wen.Liao的字串
<code>
$ cat ~/.gitconfig
[user]
    name = Wen.Liao
...
</code></p>

<p>同樣的，目前repository下面的config是沒有user.name資料
<code>
cat .git/config  | grep name
</code></p>

<p>接下來改一下user.name
<code>
$ strace -e open git config user.name qqq
...
open("/etc/gitconfig", O_RDONLY)        = 3
open("/home/user/.gitconfig", O_RDONLY)  = 3
open(".git/config", O_RDONLY)           = 3
...
+++ exited with 0 +++
</code></p>

<p>可以看到目前目錄下<code>.git/config</code>新增了user.name
<code>
$ cat .git/config
...
[user]
    name = qqq
</code></p>

<p>驗證是否<code>.git/config</code>的值真的會比<code>~/.gitconfig</code>優先
<code>
$ git config --get user.name
qqq
</code></p>

<p><a name="g3_conf_opt"></a></p>

<h2>git config 選項節錄</h2>

<p>Git config 選項有分為server端和client端，大部分選項和client有關，文件中節錄部份，我再節錄我有興趣的部份。想要知道全部的選項可以問男人。<code>man git config</code>。再次提醒，如果是你要套用到全部git repository請用<code>git config --global</code>，不然這些選項只會在你目前git repository生效。</p>

<ul>
<li><code>core.editor</code>

<ul>
<li>你要commit 時候會用的編輯器</li>
</ul>
</li>
<li><code>commit.template</code>

<ul>
<li>這個比較重要，如果你要套用commit template，就用這個。把你自己或是團隊的commit template引入吧。我自己會用# 為template加入註解。</li>
</ul>
</li>
<li><code>color.ui</code>

<ul>
<li>為你的UI文字上色。可以設成<code>true</code> 或是<code>false</code></li>
</ul>
</li>
</ul>


<p><a name="g3_conf_ext"></a></p>

<h2>指定使用外部比較命令</h2>

<p>git可以指令使用外部比較命令，首先要搞清楚git 會送什麼參數給外部命令，所以我們先寫個script印出參數，並且指定外部diff的時候使用這個script。</p>

<pre><code>$ cat ~/bin/git_diff.sh 
#!/bin/sh
echo $@

$ git config --global diff.external ~/bin/git_diff.sh

$ git diff HEAD^
src/core/caret.cpp /tmp/6nZQoO_caret.cpp 99fdca2d1d2b90e6452555572d3b0c3cf3ae75b0 100644 src/core/caret.cpp 15b662547eb5a853f02a6fc086e07feed2e45d4f 100644
</code></pre>

<p>這些參數的順序是</p>

<p>1 更動的檔案名稱
2 將被更動前的檔案內容另存新檔路徑
3 被更動前的檔案blob hash
4 被更動前檔案權限
5 將被更動後的檔案內容另存新檔路徑
6 被更動後的檔案blob hash
7 被更動後檔案權限</p>

<p>對我們來說，有興趣的是2和5，所以我們可以將命令更動為
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat ~/bin/git_diff.sh&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh -x&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;echo $@
</span><span class='line'>meld $2 $5</span></code></pre></td></tr></table></div></figure></p>

<p>meld是一個GUI程式的比對工具。接下來就來測試吧</p>

<pre><code>$ git diff HEAD^
+ echo src/core/caret.cpp /tmp/0M6Fgi_caret.cpp 99fdca2d1d2b90e6452555572d3b0c3cf3ae75b0 100644 src/core/caret.cpp 15b662547eb5a853f02a6fc086e07feed2e45d4f 100644
src/core/caret.cpp /tmp/0M6Fgi_caret.cpp 99fdca2d1d2b90e6452555572d3b0c3cf3ae75b0 100644 src/core/caret.cpp 15b662547eb5a853f02a6fc086e07feed2e45d4f 100644
+ meld /tmp/0M6Fgi_caret.cpp src/core/caret.cpp
</code></pre>

<p>GUI畫面如下:
<img src="https://www.dropbox.com/s/h68sor0kwkwtewg/meld_git.png?raw=1" alt="" /></p>

<p>手冊上面還有提到merge tools 的設定，本人不感興趣。跳過。</p>

<p><a name="g3_conf_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_git_config">ProGit: 8.1 Customizing Git - Git Configuration</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Successful Git Branching Model 導讀投影片上線]]></title>
    <link href="http://wen00072.github.io/blog/2015/01/10/-guide-to-a-successful-git-branching-model-slides-on-line/"/>
    <updated>2015-01-10T21:38:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/01/10/-guide-to-a-successful-git-branching-model-slides-on-line</id>
    <content type="html"><![CDATA[<iframe src="//www.slideshare.net/slideshow/embed_code/43382196" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/zzz00072/a-successful-git-branching-model-43382196" title="A successful git branching model 導讀" target="_blank">A successful git branching model 導讀</a> </strong> from <strong><a href="//www.slideshare.net/zzz00072" target="_blank">Wen Liao</a></strong> </div></p>

<script async class="speakerdeck-embed" data-id="c2525af07afb01328ff846860cd29960" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[筆記: [OpenStack] GIT Commit Good Practice]]></title>
    <link href="http://wen00072.github.io/blog/2013/09/08/note-openstackgit-commit-good-practice/"/>
    <updated>2013-09-08T12:00:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2013/09/08/note-openstackgit-commit-good-practice</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.openstack.org/wiki/GitCommitMessages">出處：[OpenStack] GIT Commit Good Practice</a></p>

<ul>
<li>大部份的程式碼是被閱讀的次數遠大於更動的次數，因此可讀性很重要。</li>
</ul>


<h2>如何結構化地切割變動？</h2>

<ul>
<li>原則：每次的commit應該只包含一個邏輯上的變動</li>
</ul>


<h3>commit時該避免的事</h3>

<ul>
<li>commit的部份把空白字元更動(如空白從8個換成4個、TAB換成空白字元)和程式變動混在一起</li>
<li>把和commit宣稱要改新功能無關的程式碼一起commit進去</li>
<li>一次commit 大量的程式碼</li>
</ul>


<h2>關於Commit訊息</h2>

<ul>
<li>不要假設審查者會瞭解該commit原本要處理的問題，所以不要忘記留下關於你要修掉的問題的描述和資訊，省去審查者自行查找的時間</li>
<li>由於git的特性，審查者不一定只在電腦可以連上網路時審查您的commit。因此請將在commit留下足夠的訊息而不是要求別人去連到某個外部連結去參考資料</li>
<li>不要自以為程式碼明顯易懂就在commit訊息偷懶省略資料。提供問題描述、解決方式和更動會比較週全</li>
<li>請描述更動程式碼的理由和目的</li>
<li>如果您的commit訊息需要長篇大論的說明時，也許是個好時機去分拆commit成更細小的commit</li>
<li>如果很不幸地必須要commit大量的程式碼，請務必在commit 訊息中提供資訊讓審查者便於審查這大堆頭的程式碼</li>
<li>commit訊息的第1行非常重要。可以用在email的標題、log viewer的提示等。請想辦法在一行的長度讓閱讀log的人瞭解你commit了什麼資訊</li>
<li>如果程式碼有已知錯誤、Todos、或是limitation也記得一併寫在commit訊息中</li>
</ul>


<h2>OpenStack 使用的commit 訊息格式</h2>

<ul>
<li>第1行簡略描述該commit更動的內容，字數小於50字元，結尾不得有句點</li>
<li>第2行單純為跳行符號</li>
<li>第3行以後開始詳細描述更動的範圍，長度不得超過72字元

<ul>
<li>描述問題狀況</li>
<li>對應問題的更動描述，以及更動的理由說明</li>
<li>提供更動後的結果範例</li>
<li>Limitation，改善空間等</li>
</ul>
</li>
<li>軟體管理用的辨別ID如Change-id等</li>
</ul>

]]></content>
  </entry>
  
</feed>
