<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-06-09T14:16:22+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[觀察編譯glibc的產出]]></title>
    <link href="http://wen00072.github.io/blog/2019/06/08/glibc-build-observing/"/>
    <updated>2019-06-08T18:48:03+08:00</updated>
    <id>http://wen00072.github.io/blog/2019/06/08/glibc-build-observing</id>
    <content type="html"><![CDATA[<p>這次介紹編譯glibc 並安裝後的一些發現</p>

<h2>目錄</h2>

<ul>
<li><a href="#glibc_env">測試環境</a></li>
<li><a href="#glibc_install">安裝步驟</a></li>
<li><a href="#glibc_conl">觀察與結論</a>

<ul>
<li><a href="#glibc_conl_lib">/lib</a></li>
<li><a href="#glibc_conl_bin">/bin</a></li>
<li><a href="#glibc_conl_sbin">/sbin</a></li>
<li><a href="#glibc_conl_etc">/etc</a></li>
<li><a href="#glibc_conl_share">/share</a></li>
<li><a href="#glibc_conl_var">/var</a></li>
<li><a href="#glibc_conl_libexec">/libexec</a></li>
<li><a href="#glibc_conl_inc">/include</a></li>
</ul>
</li>
<li><a href="#glibc_conl_ref">參考資料</a></li>
<li><a href="#glibc_conl_ex">附錄</a></li>
</ul>


<p><a name="glibc_env"></a></p>

<h2>測試環境</h2>

<pre><code>$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.2 LTS
Release:    18.04
Codename:   bionic
</code></pre>

<p><a name="glibc_install"></a></p>

<h2>安裝步驟</h2>

<ul>
<li>下載套件</li>
</ul>


<pre><code>git clone http://sourceware.org/git/glibc.git
cd glibc
git checkout --track origin/release/2.27
</code></pre>

<ul>
<li>在新的目錄編譯 glibc，你可以自行指定安裝路徑，<font color=red><strong>一定要指定安裝路徑，以免發生嚴重悲劇。</strong> </font></li>
</ul>


<p>本次設定主要是針對除錯最佳化，以及避免覆蓋系統原本的 <code>glibc</code></p>

<pre><code>cd ../
mkdir out
mkdir rootfs
cd out

# 設定
CFLAGS=-Og CPPFLAGS=-Og CXXFLAGS=-Og ../glibc/configure  --disable-werror --prefix=/tmp/rootfs/

# 編譯
make

# 安裝
make install
</code></pre>

<p><a name="glibc_conl"></a></p>

<h2>觀察與結論</h2>

<p>本來想說 <code>libc</code> 用來提供 C 標準函式庫的 binary，那麼了不起就是 <code>libc.so</code>和 <code>libc.a</code> 以及對應的 header files。安裝完畢後先看一下目錄，事情果然沒有像本組裝工想的那麼簡單。列出第一層目錄如下，除了預期中的<code>lib</code>和<code>include</code>以外，竟然還有不少預期以外的目錄。</p>

<pre><code>$ tree -L 1 -d /tmp/rootfs
.
├── bin
├── etc
├── include
├── lib
├── libexec
├── sbin
├── share
└── var
</code></pre>

<p>那麼我們來看一下這些目錄下面有什麼東西吧。</p>

<p><a name="glibc_conl_lib"></a></p>

<h3>/lib</h3>

<p>先來看目錄結構，多了和多國語言相關的函式庫目錄還有 trace shared object PLT (Procedure linkage table) 工具會用到的audio目錄</p>

<pre><code>$ tree lib -d
lib
├── audit
└── gconv
</code></pre>

<p>接下來看<code>/lib</code>的檔案</p>

<p>列出幾個我有興趣的檔案</p>

<ul>
<li><p><code>*.o</code></p>

<ul>
<li>在<code>/lib</code>裏面會發現幾個object file，它們檔名都有<code>crt</code>，crt全名是 <code>C runtime</code>，顯然和執行的時候有關。我有空會再找時間了解。先列出來介紹幾個如下</li>
</ul>
</li>
<li><p><code>Scrt1.o</code>: 這邊我們可以看到<code>T _start</code>以及<code>U main</code>，望文生義按圖說故事我們可以猜測執行程式的起始點其實是<code>_start</code>，做了一些事情後才會去呼叫你寫的<code>main()</code>，我做了一個實驗，想知道一個應用程式會連結哪些系統上的object檔案請參考<a href="#glibc_conl_ex">這邊</a></p></li>
</ul>


<pre><code>$ nm Scrt1.o 
0000000000000000 D __data_start
0000000000000000 W data_start
                 U _GLOBAL_OFFSET_TABLE_
0000000000000000 R _IO_stdin_used
                 U __libc_csu_fini
                 U __libc_csu_init
                 U __libc_start_main
                 U main
0000000000000000 T _start
</code></pre>

<ul>
<li><code>crtn.o</code>: 用<code>nm</code>去看會發現沒有<code>symbol</code>，不過反組譯後會發現有兩個<code>section</code>，看起來和main啟動前和使用者程式結束後會有關係。有空會再探討。</li>
</ul>


<pre><code>$ objdump -d crtn.o 

crtn.o:     file format elf64-x86-64


Disassembly of section .init:

0000000000000000 &lt;.init&gt;:
   0:   48 83 c4 08             add    $0x8,%rsp
   4:   c3                      retq   

Disassembly of section .fini:

0000000000000000 &lt;.fini&gt;:
   0:   48 83 c4 08             add    $0x8,%rsp
   4:   c3                      retq   
</code></pre>

<ul>
<li><code>ld-linux-x86_64.so.2</code>

<ul>
<li>就是<code>ld.so</code>，這個檔案有趣的點是他是一個shared object，但是同時又是可以執行。如果我的懶病沒有發作以後會常常看到這個東西。</li>
</ul>
</li>
<li><code>libc.*</code>:

<ul>
<li>直接看symbol就知道，<code>T</code>, <code>U</code>的定義請翻前面文章，我懶得找。</li>
</ul>
</li>
</ul>


<pre><code>$ nm libc.a | grep "^printf.o:" -A 10
printf.o:
0000000000000000 T _IO_printf
0000000000000000 T printf
0000000000000000 T __printf
                 U stdout
                 U __vfprintf_internal

snprintf.o:
0000000000000000 W snprintf
0000000000000000 T __snprintf
                 U __vsnprintf_internal    
</code></pre>

<ul>
<li><code>libm.*</code>: 一樣看symbol節錄</li>
</ul>


<pre><code>$ nm libm.so.6 |grep " sin"
000000000002eb24 i sin
0000000000034532 W sincos
00000000000419cc i sincosf
0000000000054f26 W sincosf128
00000000000419cc i sincosf32
0000000000034532 W sincosf32x
0000000000034532 W sincosf64
00000000000175c8 W sincosf64x
00000000000175c8 W sincosl
000000000004131e i sinf
0000000000054148 W sinf128
000000000004131e i sinf32
000000000002eb24 i sinf32x
000000000002eb24 i sinf64
0000000000016ead W sinf64x
000000000000ed11 W sinh
000000000001205d W sinhf
0000000000060407 W sinhf128
000000000001205d W sinhf32
000000000000ed11 W sinhf32x
000000000000ed11 W sinhf64
000000000000d9a4 W sinhf64x
000000000000d9a4 W sinhl
0000000000016ead W sinl
00000000000144b5 t sin_pi
0000000000027776 t sin_pi
</code></pre>

<ul>
<li><code>libdl</code>

<ul>
<li>動態載入函式庫相關函數如<code>dlvsym</code>, <code>dlsym</code>,</li>
</ul>
</li>
</ul>


<h4>完整檔案如下</h4>

<pre><code>$ ls lib
audit                         libc.a                 libmemusage.so              libnss_dns.so               librt-2.28.9000.so
crt1.o                        libc_nonshared.a       libm.so                     libnss_dns.so.2             librt.a
crti.o                        libcrypt-2.28.9000.so  libm.so.6                   libnss_files-2.28.9000.so   librt.so
crtn.o                        libcrypt.a             libmvec-2.28.9000.so        libnss_files.so             librt.so.1
gconv                         libcrypt.so            libmvec.a                   libnss_files.so.2           libSegFault.so
gcrt1.o                       libcrypt.so.1          libmvec_nonshared.a         libnss_hesiod-2.28.9000.so  libthread_db-1.0.so
ld-2.28.9000.so               libc.so                libmvec.so                  libnss_hesiod.so            libthread_db.so
ld-linux-x86-64.so.2          libc.so.6              libmvec.so.1                libnss_hesiod.so.2          libthread_db.so.1
libanl-2.28.9000.so           libdl-2.28.9000.so     libnsl-2.28.9000.so         libpcprofile.so             libutil-2.28.9000.so
libanl.a                      libdl.a                libnsl.so.1                 libpthread-2.28.9000.so     libutil.a
libanl.so                     libdl.so               libnss_compat-2.28.9000.so  libpthread.a                libutil.so
libanl.so.1                   libdl.so.2             libnss_compat.so            libpthread.so               libutil.so.1
libBrokenLocale-2.28.9000.so  libg.a                 libnss_compat.so.2          libpthread.so.0             Mcrt1.o
libBrokenLocale.a             libm-2.28.9000.a       libnss_db-2.28.9000.so      libresolv-2.28.9000.so      Scrt1.o
libBrokenLocale.so            libm-2.28.9000.so      libnss_db.so                libresolv.a
libBrokenLocale.so.1          libm.a                 libnss_db.so.2              libresolv.so
libc-2.28.9000.so             libmcheck.a            libnss_dns-2.28.9000.so     libresolv.so.2
</code></pre>

<p><a name="glibc_conl_bin"></a></p>

<h3>/bin</h3>

<p>是除了 <code>ldd</code>以外，我全部沒印象。有些甚至不在Ubuntu的預設安裝中。使用者需要另外安裝，如<code>xtrace</code>等。</p>

<p>列出幾個我有興趣的工具</p>

<ul>
<li><a href="http://man7.org/linux/man-pages/man1/pldd.1.html">pldd</a>: 列出process使用的shared library。奇怪的是我自己用卻只有列出process的執行檔名稱而已。</li>
<li><a href="http://manpages.org/sotruss">sotruss</a>: 經由PLT (Procedure Linkage Table) trace shared library calls</li>
<li><a href="http://manpages.org/sprof">sprof</a>: share object 的profile 工具</li>
</ul>


<pre><code>bin
├── catchsegv
├── gencat
├── getconf
├── getent
├── iconv
├── ldd
├── locale
├── localedef
├── makedb
├── mtrace
├── pcprofiledump
├── pldd
├── sotruss
├── sprof
├── tzselect
└── xtrace
</code></pre>

<p><a name="glibc_conl_sbin"></a></p>

<h3>/sbin</h3>

<ul>
<li>除了<code>ldconfig</code>外其他的不認識</li>
</ul>


<pre><code>$ tree sbin/
sbin/
├── iconvconfig
├── ldconfig
├── nscd
├── sln
├── zdump
etc
├── ld.so.conf
└── rpc
└── zic
</code></pre>

<p><a name="glibc_conl_etc"></a></p>

<h3>/etc</h3>

<p>很有趣，竟然有<code>rpc</code> (remote procedure call)的檔案，紀錄rpc通訊協定的資訊。</p>

<pre><code>etc
├── ld.so.conf
└── rpc
</code></pre>

<p><a name="glibc_conl_share"></a></p>

<h3>/share</h3>

<ul>
<li>存放時區以及多國語言相關檔案</li>
</ul>


<p><a name="glibc_conl_var"></a></p>

<h3>/var</h3>

<p>跳過</p>

<p><a name="glibc_conl_libexec"></a></p>

<h3>/libexec</h3>

<p>跳過</p>

<p><a name="glibc_conl_inc"></a></p>

<h3>/include</h3>

<p>跳過</p>

<p><a name="glibc_conl_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html">Linux x86 Program Start Up</a></li>
<li><a href="http://l4u-00.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/elf.html">ELF: From The Programmer&rsquo;s Perspective: The .init and .fini Sections (1995)</a></li>
<li><a href="https://stackoverflow.com/questions/29694564/what-is-the-use-of-start-in-c">Stackoverflow: What is the use of _start() in C?</a></li>
<li><a href="https://stackoverflow.com/questions/32700494/executing-init-and-fini">Stackoverflow: Executing init and fini</a></li>
</ul>


<p><a name="glibc_conl_ex"></a></p>

<h2>附錄</h2>

<ul>
<li>編譯hello.c 囉唆資訊節錄</li>
</ul>


<pre><code>/usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccnUW8Qj.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o hello /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. /tmp/ccTxSMPW.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o
</code></pre>

<ul>
<li>會連結系統提供的object檔案列出如下

<ul>
<li>crtn.o</li>
<li>Scrt1.o</li>
<li>crti.o</li>
<li>crtendS.o</li>
<li>crtbeginS.o</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu 18.04.2 Trace 程式呼叫 Glibc 函數]]></title>
    <link href="http://wen00072.github.io/blog/2019/06/08/glibc-surface-observing/"/>
    <updated>2019-06-08T15:39:12+08:00</updated>
    <id>http://wen00072.github.io/blog/2019/06/08/glibc-surface-observing</id>
    <content type="html"><![CDATA[<p>不囉唆，直接上懶人包。</p>

<h2>環境設定</h2>

<pre><code>#!/bin/bash
# 其實直接在剪下指令貼在終端機就就可以了
# 安裝套件並下載libcsource code
DBG_PATH=~/tmp/lib_debug
sudo apt install -y libc6-dbg
mkdir -p $DBG_PATH
cd $DBG_PATH
apt source libc6-dev
rm glibc_2.27-3ubuntu1.debian.tar.xz  glibc_2.27.orig.tar.xz glibc_2.27-3ubuntu1.dsc

# 設定load directory
LIBC_PATH=${DBG_PATH}/glibc-2.27
EX_FILES=~/tmp/lib_debug/ld_dir.ex
rm -f $EX_FILES
for i in $(find ${LIBC_PATH}/* -maxdepth 0 -type d); \
  do echo "directory $i" &gt;&gt; $EX_FILES ; 
done
</code></pre>

<h2>使用方式</h2>

<pre><code>gdb 你的執行檔 -x ~/tmp/lib_debug/ld_dir.ex
</code></pre>

<h2>範例</h2>

<h3>程式</h3>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    printf("Hello world\n");

    return 0;
}
</code></pre>

<h3>示範操作</h3>

<pre><code>$ gdb ./hello -x ~/tmp/lib_debug/ld_dir.ex
GNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git
....
Reading symbols from ./hello...done.
(gdb) b main
Breakpoint 1 at 0x63e: file hello.c, line 5.
(gdb) r
Starting program: /tmp/hello 

Breakpoint 1, main () at hello.c:5
5       printf("Hello world\n");
(gdb) s
_IO_puts (str=0x5555555546e4 "Hello world") at ioputs.c:33
33  {
(gdb) 
</code></pre>

<h2>參考資料</h2>

<ul>
<li><a href="http://fcamel-life.blogspot.com/2012/01/glibc.html">fcamel 技術隨手記: 追踪 glibc 裡的程式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on How to C 2016]]></title>
    <link href="http://wen00072.github.io/blog/2018/07/24/notes-on-how-to-c-2016/"/>
    <updated>2018-07-24T20:43:52+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/07/24/notes-on-how-to-c-2016</id>
    <content type="html"><![CDATA[<p>最近看了<a href="https://matt.sh/howto-c">How to C 2016</a>，反正很多記不起來乾脆寫起來以後剪貼。</p>

<h2>GNU Flags</h2>

<ul>
<li><code>-std=c99</code></li>
</ul>


<h3>Warning flags</h3>

<p><code>-Wall -Wextra -Werror -Wshadow -Wno-missing-field-initializers -Wstrict-overflow -fno-strict-aliasing</code></p>

<ul>
<li>延伸：<a href="https://stackoverflow.com/questions/3375697/useful-gcc-flags-for-c">Stackoverflow: Useful gcc flag for C</a></li>
</ul>


<h3>Links</h3>

<ul>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html">stdint.h</a>

<ul>
<li><code>intmax_t</code>，&hellip;</li>
<li><code>intptr_t</code>

<ul>
<li>根據platform int size 調整</li>
</ul>
</li>
</ul>
</li>
<li><a href="http://pubs.opengroup.org/onlinepubs/7908799/xsh/stddef.h.html">stdtype.h</a>

<ul>
<li><code>ptr_diff_t</code></li>
</ul>
</li>
</ul>


<h2>其他</h2>

<ul>
<li><code>size_t</code>和<code>ssize_t</code>差別：<code>s</code>->signed，當有錯誤時會為<code>-1</code></li>
<li><code>#pragma once</code> 可用來取代Header guard</li>
</ul>


<h3>名詞</h3>

<ul>
<li><a href="https://gcc.gnu.org/onlinedocs/gccint/LTO-Overview.html">LTO</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[給自己剪貼用的vim設定]]></title>
    <link href="http://wen00072.github.io/blog/2018/02/15/vim-setup-for-trace-c-code/"/>
    <updated>2018-02-15T04:03:41+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/02/15/vim-setup-for-trace-c-code</id>
    <content type="html"><![CDATA[<p>分享使用<code>vim</code> 的心得，加上使用Vundle plugin管理工具功能配合外部程式碼分享軟體<code>cscope</code>和<code>ctags</code>來trace <code>C</code>語言的程式碼以及編輯<code>Python</code>程式碼相關設定。</p>

<ul>
<li>致謝，感謝網友<a href="http://scottt.tw/">Scott</a>介紹vim register概念，<a href="http://yodalee.blogspot.tw/">葉闆</a>介紹的tagbar，和Kyle Lin介紹的airline。</li>
</ul>


<h2>目錄</h2>

<ul>
<li><a href="#vtr-env">測試環境</a></li>
<li><a href="#vtr-pkg">懶人包</a></li>
<li><a href="#vtr-set">設定.vimrc以及Vundle plugins</a>

<ul>
<li>  <a href="#vtr-set-prep">事前準備</a></li>
<li>  <a href="#vtr-set-insvd">安裝Vundle</a></li>
<li>  <a href="#vtr-set-vdplg">我安裝的Vundle Plugins</a>

<ul>
<li><a href="#vtr-set-vdplg-ed">編輯器相關</a>

<ul>
<li><a href="#vtr-set-vdplg-al">airline</a>

<ul>
<li><a href="#vtr-set-vdplg-al-pre">安裝準備</a></li>
<li><a href="#vtr-set-vdplg-al-set">設定airline</a></li>
</ul>
</li>
<li><a href="#vtr-set-vdplg-ed-itl">indentLine</a></li>
<li><a href="#vtr-set-vdplg-vbw">vim-better-whitespace</a></li>
</ul>
</li>
<li><a href="#vtr-set-vdplg-tr">Trace C語言程式碼相關</a>

<ul>
<li><a href="#vtr-set-vdplg-tr-cm">cscope_maps</a></li>
<li><a href="#vtr-set-vdplg-tr-se">SrcExpl</a></li>
<li><a href="#vtr-set-vdplg-tr-tl">taglist</a></li>
<li><a href="#vtr-set-vdplg-tr-nd">nerdtree</a></li>
<li><a href="#vtr-set-vdplg-tr-tri">Trinity</a></li>
<li><a href="#vtr-set-vdplg-tr-tgb">tagbar</a></li>
</ul>
</li>
<li><a href="#vtr-set-md">Markdown 語法支援</a>

<ul>
<li><a href="#vtr-set-md-pdoc">vim-pandoc-syntax</a></li>
</ul>
</li>
<li><a href="#vtr-set-py">Python開發相關</a>

<ul>
<li><a href="#vtr-set-py-prepare">準備工作</a></li>
<li><a href="#vtr-set-py-pm">python-mode</a></li>
<li><a href="#vtr-set-py-sc">syntastic</a></li>
<li><a href="#vtr-set-py-pt">python_match</a></li>
<li><a href="#vtr-set-py-id">indentpython</a></li>
</ul>
</li>
</ul>
</li>
<li>  <a href="#vtr-set-misc">和Plugin 無關的設定</a>

<ul>
<li><a href="#vtr-set-misc-ed">編輯器和顯示特殊字元相關設定</a></li>
<li><a href="#vtr-set-misc-ind">Indent相關設定</a></li>
<li><a href="#vtr-set-misc-msc">其他</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#vtr-test">參考資料</a></li>
</ul>


<p><a name="vtr-env"></a></p>

<h2>測試環境</h2>

<pre><code class="text">$ lsb_release  -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 16.04.3 LTS
Release:    16.04
Codename:   xenial


$ ctags --version
Exuberant Ctags 5.9~svn20110310, Copyright (C) 1996-2009 Darren Hiebert
...

$ cscope --version
cscope: version 15.8b

$ vim --version
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:44:48)
Included patches: 1-1689
...
</code></pre>

<p><a name="vtr-set"></a></p>

<h2>設定.vimrc以及Vundle plugins</h2>

<p><a name="vtr-set-prep"></a></p>

<h3>事前準備</h3>

<p>您需要確認</p>

<ul>
<li>vim版本為7.4以上</li>
<li>安裝ctags和cscope，指令如下
<code>sudo apt-get install exuberant-ctags cscope</code></li>
</ul>


<p><a name="vtr-set-insvd"></a></p>

<h3>安裝Vundle</h3>

<p><code>Vundle</code>是vim plugin 管理工具，他可以透過URL, github, 以及local FS等方式安裝甚至更新Plugin。類似的工具還有不少，我只是挑看到的第一個而已。</p>

<p><code>Vundle</code>常用的指令如下，還蠻容易望文生義所以我就不解釋了</p>

<ul>
<li><code>:PluginList</code></li>
<li><code>:PluginInstall</code></li>
<li><code>:PluginClean</code></li>
<li><code>:PluginUpdate</code></li>
</ul>


<p>安裝方式如下</p>

<ul>
<li><p>首先你要下載<code>Vundle</code>，指令如下
<code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></p></li>
<li><p>接下來在你的.vimrc加入下面這段，我是從<a href="https://github.com/VundleVim/Vundle.vim">官方網頁</a>改的，其實只是把他的範例Plugin幹掉並加上分隔線及分隔線內的註解而已</p></li>
</ul>


<pre><code class="text .vimrc 要加的部份">"====================================================================
" Start vundle
"====================================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"===============================================================
" Write your plugins here
"===============================================================
Plugin 'Yggdroot/indentLine'

"====================================================================
" Run vundle
"====================================================================
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
</code></pre>

<p>注意下面列出的這幾行statements，你要新增或移除Plugin就是改這個地方。這些Plugin將會在後面介紹。剛好我要安裝的Plugin都是在<a href="https://github.com">GitHub</a>上開發或有mirror。而<code>Vundle</code>可以用直接指定Plugin 專案在GitHub相對路徑即可安裝。這些描述也是<code>Vundle</code>載入Plugin　的順序，沒寫對順序有可能有相依問題請自行注意。</p>

<p>例如<code>https://github.com/Yggdroot/indentLine</code> 就寫成<code>Yggdroot/indentLine</code></p>

<pre><code class="text 我安裝的Plugin">"===============================================================
" Write your plugins here
"===============================================================
Plugin 'Yggdroot/indentLine'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'chazy/cscope_maps'
Plugin 'vim-scripts/taglist.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'wesleyche/SrcExpl'
Plugin 'wesleyche/Trinity'
Plugin 'majutsushi/tagbar'
</code></pre>

<ul>
<li>確定新增/刪除Plugin後，就可以執行vim/gvim，使用下面命令

<ul>
<li><code>:PluginInstall</code></li>
<li><code>:PluginClean</code></li>
</ul>
</li>
</ul>


<p><a name="vtr-set-vdplg"></a></p>

<h3>我安裝的Vundle Plugins</h3>

<p>因為安裝方式已經在上面了，這邊就以介紹為主</p>

<p><a name="vtr-set-vdplg-ed"></a></p>

<h4>編輯器相關</h4>

<p><a name="vtr-set-vdplg-al"></a></p>

<h5>airline</h5>

<p><a name="vtr-set-vdplg-al-pre"></a></p>

<h6>安裝準備</h6>

<p>先看圖，圖中最下方的那行就是airline，可以顯示一些有用的資訊
<img src=/images/vim_ind11.jpg></p>

<p>由左到右我們可以看到Vim 模式，Git branch 等資訊。以及一些比較特別的符號，這表示我們需要</p>

<ul>
<li>讓airline取得git資訊</li>
<li>讓airline取得特別符號</li>
</ul>


<p>也就是說，在安裝<code>airline</code>前要做一些前置動作如下</p>

<ul>
<li>讓airline取得git資訊

<ul>
<li>很簡單，安裝<code>vim-fugitive</code> plugin即可</li>
</ul>
</li>
<li>讓airline取得特別符號
這也不難，就是安裝特殊字型，並且設定GUI時存取這些字型。方式如下</li>
</ul>


<p><strong>取得字型</strong></p>

<pre><code class="text">git clone https://github.com/powerline/fonts
</code></pre>

<p><strong>安裝字型</strong></p>

<pre><code class="text">cd fonts &amp;&amp; ./install.sh
</code></pre>

<p><strong> .vimrc中指定安裝的字型 </strong></p>

<pre><code class="text">set guifont=Inconsolata\ for\ Powerline\ 20
</code></pre>

<p><a name="vtr-set-vdplg-al-set"></a></p>

<h6>設定airline</h6>

<p>把下面的資料放入<code>.vimrc</code>即可</p>

<pre><code class="text">let g:airline_powerline_fonts = 1
set laststatus=2
</code></pre>

<p><a name="vtr-set-vdplg-ed-itl"></a></p>

<h5>indentLine</h5>

<p>當Ident為空白增加以下的Indent 對齊參考資線
<img src=/images/vim_ind2.jpg></p>

<p><strong>注意此Plugin在Ident為tab同時又加上顯示tab字元時自動失效，目前workaround就是顯示tab字元為<code>|</code>，接下來以<code>.</code>延伸作為辨別。範例如下：</strong>
<img src=/images/vim_ind1.jpg></p>

<p><a name="vtr-set-vdplg-vbw"></a></p>

<h5>vim-better-whitespace</h5>

<p>將<a href="http://stackoverflow.com/questions/22273233/what-is-meant-by-%0Atrailing-space-and-whats-the-difference-between-it-and-a-blank">trailing space</a>顯示成明顯的紅色
<img src=/images/vim_ind3.jpg></p>

<p><a name="vtr-set-vdplg-tr"></a></p>

<h4>Trace 程式碼相關</h4>

<p><a name="vtr-set-vdplg-tr-cm"></a></p>

<h5>cscope_maps</h5>

<p>簡單來說，就是把cscope指令對應到Hot key</p>

<p>先列出find部份的指令
<code>text
find : Query for a pattern            (Usage: find c|d|e|f|g|i|s|t name)
       c: Find functions calling this function
       d: Find functions called by this function
       e: Find this egrep pattern
       f: Find this file
       g: Find this definition
       i: Find files #including this file
       s: Find this C symbol
       t: Find this text string   
</code></p>

<p>他的使用方法也很簡單，就是先把游標移動到你要查的statement，再按<code>ctrl</code> + <code>\</code> + <code>c|d|e|f|g|i|s|t 其中一個</code>。</p>

<p>舉例來說，我在下圖中把游標移動到<code>core_sys_select</code>函數後按下<code>ctrl</code> + <code>\</code> + <code>c</code>的結果如下
<img src=/images/vim_ind4.jpg></p>

<p><a name="vtr-set-vdplg-tr-se"></a></p>

<h5>SrcExpl</h5>

<p>當啟動時，您的游標在那個敘述，Source explorer 會切割視窗，印出該敘述的定義。舉例來說，當我游標在138行的<code>free_poll_entry</code>的話，顯示的畫面如下。</p>

<p><img src=/images/vim_ind5.jpg></p>

<p><a name="vtr-set-vdplg-tr-tl"></a></p>

<h5>taglist</h5>

<p>列出目前檔案所有symbol並且可以選擇symbol切換到該symbol在檔案中的位置
<img src=/images/vim_ind6.jpg></p>

<p><a name="vtr-set-vdplg-tr-nd"></a></p>

<h5>nerdtree</h5>

<p>以樹狀顯示目前檔案所在目錄結構，看圖就知道
<img src=/images/vim_ind7.jpg></p>

<p><a name="vtr-set-vdplg-tr-tri"></a></p>

<h5>Trinity</h5>

<p>看完以上三個，你可能會覺得奇怪好像沒提到怎麼啟動。這就是<code>Trinity</code>大顯身手的地方了。你安裝Trinity後，再Vundle後面加上下面的敘述就可以有</p>

<ul>
<li><code>F8</code> : 同時打開或關閉<code>nerdtree</code>, <code>Source explorer</code>, 以及<code>tag list</code></li>
<li><code>F9</code> : 打開或關閉<code>Source explorer</code></li>
<li><code>F10</code>: 打開或關閉<code>tag list</code></li>
<li><code>F11</code>: 打開或關閉<code>nerdtree</code></li>
</ul>


<pre><code class="text .vimrc 的Trinity設定">"====================================================================
" Trinity Settings
"====================================================================
" Open and close all the three plugins on the same time 
nmap &lt;F8&gt;  :TrinityToggleAll&lt;CR&gt; 

" Open and close the Source Explorer separately 
nmap &lt;F9&gt;  :TrinityToggleSourceExplorer&lt;CR&gt; 

" Open and close the Taglist separately 
nmap &lt;F10&gt; :TrinityToggleTagList&lt;CR&gt; 

" Open and close the NERD Tree separately 
nmap &lt;F11&gt; :TrinityToggleNERDTree&lt;CR&gt; 
</code></pre>

<p>以下是按下<code>F8</code> 的畫面
<img src=/images/vim_ind8.jpg></p>

<p><a name="vtr-set-vdplg-tr-tgb"></a></p>

<h5>tagbar</h5>

<p>網友推荐的taglist改良版 plugin，為什麼不換掉taglist呢？因為我喜歡source explorer。除了安裝Plugin外，我也順便設定按下<code>F7</code>可以切換，設定如下。</p>

<pre><code>"====================================================================
" Tagbar Settings
"====================================================================
" Open and close the tagbar separately 
nmap &lt;F7&gt; :TagbarToggle&lt;CR&gt; 
</code></pre>

<p>以下是按下<code>F7</code> 的畫面，可以注意右邊視窗會更進一步地顯示資料結構的成員名稱
<img src=/images/vim_ind10.jpg></p>

<p><a name="vtr-set-md"></a></p>

<h3>Markdown 語法支援</h3>

<p><a name="vtr-set-md-pdoc"></a></p>

<h4>vim-pandoc-syntax</h4>

<p>單純就是讓<code>vim</code>可以顯示<code>Markdown</code> syntax highlight，範例如下圖:
<img src=/images/vim_ind12.jpg></p>

<p><a name="vtr-set-py"></a></p>

<h3>Python開發相關</h3>

<p><a name="vtr-set-py-prepare"></a></p>

<h4>準備工作</h4>

<p>主要是語法檢查套件相關安裝，指令如下</p>

<pre><code>sudo apt install -y flake8 python-rope pylint
</code></pre>

<p><a name="vtr-set-py-pm"></a></p>

<h4>python-mode</h4>

<p><a href="blog/2014/12/06/introduction-to-python-mode-for-vim/">之前</a>有介紹過，偷懶跳過。也許Python用到一陣子可以上手後可以再分享心得。</p>

<p><a name="vtr-set-py-sc"></a></p>

<h4>syntastic</h4>

<p>泛用形語法檢查工具，請參考<a href="https://github.com/vim-syntastic/syntastic">Syntax checking hacks for vim</a>說明。
目前是我靠他幫忙檢查寫的程式是否符合<a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>規範，要注意的是Ubuntu 16.04中<code>vim</code> 套件預設只支援<code>Python 3</code>，要使用vim 編寫<code>Python 2</code>的朋友請自行估狗。我之前是自行編譯<code>vim</code>解決的。</p>

<p>語法檢查範例如下圖
<img src=/images/vim_ind13.jpg></p>

<p><a name="vtr-set-py-pt"></a></p>

<h4>python_match</h4>

<p>讓Python 也可以使用<code>vim</code>中切換配對的快捷鍵<code>%</code></p>

<p><a name="vtr-set-py-py"></a></p>

<h4>python</h4>

<p>提供下列快捷鍵，節錄自Plugin註解:</p>

<ul>
<li><code>]t</code>      &ndash; Jump to beginning of block</li>
<li><code>]e</code>      &ndash; Jump to end of block</li>
<li><code>]v</code>      &ndash; Select (Visual Line Mode) block</li>
<li><code>]&lt;</code>      &ndash; Shift block to left</li>
<li><code>]&gt;</code>      &ndash; Shift block to right</li>
<li><code>]#</code>      &ndash; Comment selection</li>
<li><code>]u</code>      &ndash; Uncomment selection</li>
<li><code>]c</code>      &ndash; Select current/previous class</li>
<li><code>]d</code>      &ndash; Select current/previous function</li>
<li><code>]&lt;up&gt;</code>   &ndash; Jump to previous line with the same/lower indentation</li>
<li><code>]&lt;down&gt;</code> &ndash; Jump to next line with the same/lower indentation</li>
</ul>


<p><a name="vtr-set-py-id"></a></p>

<h4>indentpython</h4>

<p>確保你的程式碼符合<a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>的indent規範</p>

<p><a name="vtr-set-misc"></a></p>

<h3>和Plugin 無關的設定</h3>

<p>以下都加在<code>.vimrc中</code>，建議加到<code>Vundle</code>設定結束後以確保可能會用到的Plugin已經啟動</p>

<p><a name="vtr-set-misc-ed"></a></p>

<h4>編輯器和顯示特殊字元相關設定</h4>

<ul>
<li>設定gvim 的配色，請自行找Color scheme

<ul>
<li><code>colorscheme koehler</code></li>
</ul>
</li>
<li>設定gvim 的字型和大小

<ul>
<li><code>set guifont=Inconsolata\ for\ Powerline\ 32</code></li>
</ul>
</li>
<li>將找到的字串設成高亮度

<ul>
<li><code>set hlsearch</code></li>
</ul>
</li>
<li>游標在的該行背景高亮度

<ul>
<li><code>set cursorline</code></li>
</ul>
</li>
<li>顯示行號

<ul>
<li><code>set nu</code></li>
</ul>
</li>
<li>第八十字元地方顯示高亮度區塊（這是連續兩個描述)

<ul>
<li><code>set colorcolumn=80</code></li>
<li><code>highlight ColorColumn guibg=#202020</code></li>
</ul>
</li>
<li>顯示tab （這是連續兩個描述)

<ul>
<li><code>set listchars=tab:»\</code>

<ul>
<li><strong>注意<code>\</code>後面有一個空白</strong></li>
</ul>
</li>
<li><code>set list</code></li>
</ul>
</li>
</ul>


<p>效果如下圖
<img src=/images/vim_ind9.jpg></p>

<p><a name="vtr-set-misc-ind"></a></p>

<h4>Indent相關設定</h4>

<ul>
<li>Tab相關設定

<ul>
<li><code>set ts=4</code>

<ul>
<li>tab space 為4個字元</li>
</ul>
</li>
<li><code>set expandtab</code>

<ul>
<li>不使用tab，用空白字元代替</li>
</ul>
</li>
<li><code>set shiftwidth=4</code>

<ul>
<li>Auto indent的移動字元數量</li>
</ul>
</li>
</ul>
</li>
<li>visual 模式下一次移動一個indent

<ul>
<li><code>vnoremap &lt; &lt;gv</code>

<ul>
<li>往左移動一個indent</li>
</ul>
</li>
<li><code>vnoremap &gt; &gt;gv</code>

<ul>
<li>往右移動一個indent</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><a name="vtr-set-misc-msc"></a></p>

<h4>其他</h4>

<ul>
<li><code>set clipboard+=unnamed</code>

<ul>
<li>PRIMARY selection的register <code>"*</code>包含vim的unnamed register。白話講就是其他的APP如gedit中滑鼠選字後可以用<code>"*p</code>貼到vim，同樣的<code>"*y6y</code>的結果可以貼在其他的APP如gedit上。這部份有vim <code>register</code>副本，建議到參考資料的副本區一讀。再次感謝<a href="http://scottt.tw/">Scott</a>大大。</li>
</ul>
</li>
</ul>


<p><a name="vtr-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://github.com/VundleVim/Vundle.vim">Vundle Github</a></li>
<li><a href="https://github.com/vim-airline/vim-airline">vim-airline</a></li>
<li><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></li>
<li><a href="https://github.com/powerline/fonts">Powerline fonts</a></li>
<li><a href="https://majutsushi.github.io/tagbar/">Tagbar</a></li>
<li><a href="https://github.com/Yggdroot/indentLine">indentLine</a></li>
<li><a href="https://github.com/ntpeters/vim-better-whitespace">Vim Better Whitespace Plugin</a></li>
<li><a href="https://github.com/chazy/cscope_maps">cscope maps</a></li>
<li><a href="https://github.com/vim-scripts/taglist.vim">taglist</a></li>
<li><a href="https://github.com/scrooloose/nerdtree">Nerd Tree</a></li>
<li><a href="https://github.com/wesleyche/SrcExpl">Source Explorer</a></li>
<li><a href="https://github.com/wesleyche/Trinity">Trinity</a></li>
<li><a href="http://stackoverflow.com/questions/4998582/show-whitespace-characters-in-gvim">Stackoverflow: Show white space and tab in vim</a></li>
<li>Python 相關

<ul>
<li>Plugins

<ul>
<li><a href="https://github.com/python-mode/python-mode">Python Mode</a></li>
<li><a href="https://github.com/vim-scripts/python.vim">Python</a></li>
<li><a href="https://github.com/vim-scripts/indentpython.vim">Indent Python</a></li>
<li><a href="https://github.com/vim-syntastic/syntastic">Syntax checking hacks for vim</a></li>
<li><a href="https://github.com/vim-scripts/python_match.vim">python_match</a></li>
<li><a href="https://stackoverflow.com/questions/19209139/syntastic-and-python-mode-together">Stackoverflow: Syntastic and Python-mode together?
</a></li>
</ul>
</li>
<li><code>vim</code>設定相關

<ul>
<li><a href="https://wiki.python.org/moin/Vim">Python Wiki: vim</a></li>
<li><a href="https://realpython.com/vim-and-python-a-match-made-in-heaven/">VIM and Python – A Match Made in Heaven</a></li>
</ul>
</li>
</ul>
</li>
<li>和plugin無關的vim trace code資料

<ul>
<li><a href="http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/">給程式設計師的Vim入門圖解說明</a></li>
<li><a href="http://wen00072.github.io/blog/2014/11/24/the-skin-slides-to-trace-code-on-line/">Trace 程式碼之皮投影片上線</a></li>
</ul>
</li>
<li>副本: vim 的register概念

<ul>
<li><a href="http://usevim.com/2012/04/13/registers/">usevim: Vim 101: Registers</a></li>
<li><a href="http://stackoverflow.com/questions/11489428/how-to-make-vim-paste-from-and-copy-to-systems-clipboard">Stackoverflow: How to make vim paste from (and copy to) system&rsquo;s clipboard?</a></li>
</ul>
</li>
</ul>


<p><a name="vtr-pkg"></a></p>

<h2>懶人包</h2>

<ul>
<li>安裝相關軟體，Vundle和airline字型</li>
</ul>


<pre><code class="text">sudo apt-get install -y exuberant-ctags cscope vim-gtk git flake8 python-rope pylint
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
git clone https://github.com/powerline/fonts
cd fonts &amp;&amp; ./install.sh
</code></pre>

<ul>
<li>剪貼下面的文字並存放到 ~/.vimrc</li>
</ul>


<pre><code class="text .vimrc">"====================================================================
" Start vundle
"====================================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"===============================================================
" Write your plugins here
"===============================================================
" Layouts
Plugin 'Yggdroot/indentLine'
Plugin 'ntpeters/vim-better-whitespace'

" Markdown
Plugin 'vim-pandoc/vim-pandoc-syntax'

" Python related
Plugin 'python-mode/python-mode'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'vim-scripts/python_match.vim'
Plugin 'vim-scripts/python.vim'

" Misc tools
Plugin 'kien/ctrlp.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'Valloric/YouCompleteMe'
Plugin 'chazy/cscope_maps'
Plugin 'vim-scripts/taglist.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'wesleyche/SrcExpl'
Plugin 'wesleyche/Trinity'
Plugin 'majutsushi/tagbar'

"====================================================================
" Run vundle
"====================================================================
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"====================================================================
" Tagbar Settings
"====================================================================
" Open and close the tagbar separately
nmap &lt;F7&gt; :TagbarToggle&lt;CR&gt;

"====================================================================
" Trinity Settings
"====================================================================
" Open and close all the three plugins on the same time
nmap &lt;F8&gt;  :TrinityToggleAll&lt;CR&gt;

" Open and close the Source Explorer separately
nmap &lt;F9&gt;  :TrinityToggleSourceExplorer&lt;CR&gt;

" Open and close the Taglist separately
nmap &lt;F10&gt; :TrinityToggleTagList&lt;CR&gt;

" Open and close the NERD Tree separately
nmap &lt;F11&gt; :TrinityToggleNERDTree&lt;CR&gt;

"====================================================================
" Airline settings
"====================================================================
let g:airline_powerline_fonts = 1
set laststatus=2

"====================================================================
" syntastic settings
"====================================================================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
autocmd VimEnter * SyntasticToggleMode " disable syntastic by default


"====================================================================
" pymode settings
"====================================================================
let g:pymode_lint = 0    " Prefer to use syntastic to check lint
let g:pymode_folding = 0 " Unfold all

"====================================================================
" Editor and display Settings
"====================================================================
colorscheme koehler         " Color for gvim

set hlsearch                " Highlight search
set guifont=Inconsolata\ for\ Powerline\ 32 " Font
set cursorline              " Hight background at current cursor line
set nu                      " Display line numbers

" Set background color at colum 80
set colorcolumn=80
highlight ColorColumn guibg=#202020

" Show tabs
set listchars=tab:\|.
set list

" Ensure syntax is on
syntax on

"====================================================================
" Indent Settings
"====================================================================
" Tabs
set ts=4
set expandtab
set shiftwidth=4

" visual indent shift
vnoremap &lt; &lt;gv
vnoremap &gt; &gt;gv

"====================================================================
" MISC Settings
"====================================================================
" Shared unamed regitered with primary selection
set clipboard+=unnamed

" uft-8 encoding: https://stackoverflow.com/questions/16507777/set-encoding-and-fileencoding-to-utf-8-in-vim
set encoding=utf-8
set fileencoding=utf-8

"====================================================================
" Python Settings
"====================================================================
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
let python_highlight_all=1
</code></pre>

<ul>
<li>gvim -> <code>:PluginInstall</code> 安裝Plugin重新開啟收工</li>
</ul>


<h3>其他</h3>

<ul>
<li>cscope產生database供vim使用

<ul>
<li><code>cscope -bqkR</code>

<ul>
<li>k表示使用kernel mode，不把/usr/include之類的加入資料庫。Cross compile也不會使用host 的header file，所以請自行斟酌。其他參數請自己問男人。</li>
</ul>
</li>
</ul>
</li>
<li>ctags產生database供vim使用

<ul>
<li><code>ctags -R</code></li>
</ul>
</li>
<li>要在vim使用到ctags和cscope的話，請記得<strong>vim一定要開在database同一層目錄!</strong></li>
</ul>


<p>舉例來說，你在/tmp/linux-stable目錄下了上面兩個指令。要開啟檔案請在/tmp/linux-stable目錄中指定對應路徑。範例如下</p>

<pre><code class="text">user@host:/tmp/linux-stable$ gvim fs/select.c
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix: Qemu X86_64下gdb Debug kernel出現Remote &#39;g' Packet Reply Is Too Long:]]></title>
    <link href="http://wen00072.github.io/blog/2017/06/04/qemu-x86-64-with-gdb/"/>
    <updated>2017-06-04T16:11:15+08:00</updated>
    <id>http://wen00072.github.io/blog/2017/06/04/qemu-x86-64-with-gdb</id>
    <content type="html"><![CDATA[<h2>問題描述</h2>

<p>本篇文章主要是解決使用gdb 設Qemu x86_64 模擬執行x86_64 buildroot kernel開機的中斷點時遇到下面的錯誤訊息</p>

<p><strong><font color="red">Remote &#39;g&#8217; packet reply is too long:</font></strong></p>

<p>詳細訊息如下
<code>
0x0000000000000000 in irq_stack_union ()
(gdb) b x86_64_start_kernel
Breakpoint 1 at 0xffffffff8188429b: file arch/x86/kernel/head64.c, line 134.
(gdb) c
Continuing.
Remote 'g' packet reply is too long: 9b428881ffffffff0000000000000000010100c000000000ffffffff00000000804001000000000080400100000000000000000000000000f03f8081ffffffff00a080010000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000009b428881ffffffff4600000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000
</code></p>

<h2>目錄</h2>

<ul>
<li><a href="#qxg-env">測試環境</a></li>
<li><a href="#qxg-prepare">buildroot 事先準備</a></li>
<li><a href="#qxg-fix">gdb 錯誤訊息解法</a></li>
<li><a href="#qxg-pkg">懶人包</a>

<ul>
<li><a href="#qxg-tty">讓qemu-system-x86_64 在console 可以登入</a></li>
</ul>
</li>
<li><a href="#qxg-ref">參考資料</a></li>
</ul>


<p><a name="qxg-env"></a></p>

<h2>測試環境</h2>

<ul>
<li><a href="https://git.buildroot.net/buildroot">Buildroot</a>

<ul>
<li>Commit: <code>bfc90a5621c680000f8b19e8afea944da5c2a469</code></li>
</ul>
</li>
<li>Target kernel 版本</li>
</ul>


<pre><code># uname -a
Linux buildroot 4.9.6 #2 SMP Sun Jun 4 18:46:27 CST 2017 x86_64 GNU/Linux
</code></pre>

<ul>
<li>Qemu 執行指令</li>
</ul>


<pre><code>$ qemu-system-x86_64 -M pc -kernel output/images/bzImage                        \
                     -drive file=output/images/rootfs.ext2,if=virtio,format=raw \
                     -append "root=/dev/vda console=ttyS0"                      \
                     -net nic,model=virtio -net user -nographic -S -s
</code></pre>

<p>基本上是從<a href="https://git.buildroot.net/buildroot/tree/board/qemu/x86_64/readme.txt">這邊</a>衍生出來的，挑幾個重點</p>

<ul>
<li><code>-append "root=/dev/vda console=ttyS0"</code>

<ul>
<li>指定serial port console，如此一來就可以在terminal 直接顯示Qemu 的執行文字，不過你需要<a href="#qxg-tty">修改</a>rootfs 的<code>/etc/inittab</code>才能在terminal login</li>
</ul>
</li>
<li><code>-S -s</code>

<ul>
<li>開機的時候就停下來，並開啟port 1234讓gdb從遠端連入除錯</li>
</ul>
</li>
<li><code>-nographic</code>

<ul>
<li>懶得跳一個視窗，直接terminal當console使用</li>
</ul>
</li>
</ul>


<p><a name="qxg-prepare"></a></p>

<h2>buildroot 事先準備</h2>

<ol>
<li>下載buildroot

<ul>
<li><code>git clone https://git.buildroot.net/buildroot</code></li>
</ul>
</li>
<li>設定預設config

<ul>
<li><code>make qemu_x86_64_defconfig</code></li>
</ul>
</li>
<li>手動設定buildroot config如gcc版本，客製化rootfs套件等

<ul>
<li><code>make menuconfig</code></li>
</ul>
</li>
<li>設定Linux kernel 選項，主要是打開debug symbol

<ul>
<li><code>make linux-menuconfig</code></li>
</ul>
</li>
<li>編譯rootfs及kernel

<ul>
<li><code>make</code></li>
</ul>
</li>
<li><a href="#qxg-tty">設定可以從console 登入</a></li>
</ol>


<p><a name="qxg-fix"></a></p>

<h2>gdb 錯誤訊息解法</h2>

<p>從<a href="http://wiki.osdev.org/QEMU_and_GDB_in_long_mode">OSDev: QEMU and GDB in long mode</a>可以看到可以使用下面指令頂著先（workaround）</p>

<ul>
<li><code>disconnect</code></li>
<li><code>set arch i386:x86-64</code></li>
<li><code>target remote 127.0.0.1:1234</code></li>
</ul>


<p>然而作為組裝工，信奉偷懶就是美德，每次要打這麼多指令實在很麻煩。因此我將這些麻煩的方式使用下面的指令自動化</p>

<pre><code>gdb ./vmlinux  -ex "target remote localhost:1234"       \
               -ex "break x86_64_start_kernel"          \
               -ex "continue"                           \
               -ex "disconnect"                         \
               -ex "set architecture i386:x86-64:intel" \
               -ex "target remote localhost:1234"
</code></pre>

<p>執行後畫面輸出部份節錄如下
<code>
Reading symbols from ./vmlinux...done.
Remote debugging using localhost:1234
0x0000000000000000 in irq_stack_union ()
Breakpoint 1 at 0xffffffff8188429b: file arch/x86/kernel/head64.c, line 134.
Continuing.
Remote 'g' packet reply is too long: 9b428881ffffffff0000000000000000010100c000000000ffffffff00000000804001000000000080400100000000000000000000000000f03f8081ffffffff00a080010000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000009b428881ffffffff4600000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000
Ending remote debugging.
The target architecture is assumed to be i386:x86-64:intel
Remote debugging using localhost:1234
x86_64_start_kernel (real_mode_data=0x14080 &lt;cpu_tss+6848&gt; &lt;error: Cannot access memory at address 0x14080&gt;) at arch/x86/kernel/head64.c:134
134 {
(gdb) n
151     cr4_init_shadow();
</code></p>

<p>由於gdb command file 遇到錯誤就會停下來，所以把上面的指令放到一個檔案中，執行gdb時將會停在<code>continue</code>這邊，目前懶的找解法了。有興趣的朋友可以自行研究。</p>

<p><a name="qxg-pkg"></a></p>

<h2>懶人包</h2>

<ul>
<li><p>Buildroot
<code>
git clone https://git.buildroot.net/buildroot
cd buildroot
make qemu_x86_64_defconfig
make menuconfig
make linux-menuconfig
make
</code></p></li>
<li><p>啟動Qemu
假設在buildroot top directory下
<code>
qemu-system-x86_64 -M pc -kernel output/images/bzImage                          \
                   -drive file=output/images/rootfs.ext2,if=virtio,format=raw \
                   -append "root=/dev/vda console=ttyS0"                      \
                   -net nic,model=virtio -net user -nographic -S -s
</code></p></li>
<li><p>gdb
假設在buildroot top directory下
<code>
cd output/build/linux-4.9.6
gdb ./vmlinux  -ex "target remote localhost:1234"       \
             -ex "break x86_64_start_kernel"          \
             -ex "continue"                           \
             -ex "disconnect"                         \
             -ex "set architecture i386:x86-64:intel" \
             -ex "target remote localhost:1234"
</code></p></li>
</ul>


<p><a name="qxg-tty"></a></p>

<h3>讓qemu-system-x86_64 在console 可以登入</h3>

<p>在<code>/etc/inittab</code>加入下面這行<code>ttyS0::respawn:/sbin/getty -L  ttyS0 0 vt100 # GENERIC_SERIAL</code></p>

<pre><code class="text /etc/inittab"> # Put a getty on the serial port
 tty1::respawn:/sbin/getty -L  tty1 0 vt100 # GENERIC_SERIAL
+ttyS0::respawn:/sbin/getty -L  ttyS0 0 vt100 # GENERIC_SERIAL
</code></pre>

<p><a name="qxg-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://wiki.osdev.org/QEMU_and_GDB_in_long_mode">OSDev: QEMU and GDB in long mode</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
