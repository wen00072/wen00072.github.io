<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2019-06-09T14:16:22+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[觀察編譯glibc的產出]]></title>
    <link href="http://wen00072.github.io/blog/2019/06/08/glibc-build-observing/"/>
    <updated>2019-06-08T18:48:03+08:00</updated>
    <id>http://wen00072.github.io/blog/2019/06/08/glibc-build-observing</id>
    <content type="html"><![CDATA[<p>這次介紹編譯glibc 並安裝後的一些發現</p>

<h2>目錄</h2>

<ul>
<li><a href="#glibc_env">測試環境</a></li>
<li><a href="#glibc_install">安裝步驟</a></li>
<li><a href="#glibc_conl">觀察與結論</a>

<ul>
<li><a href="#glibc_conl_lib">/lib</a></li>
<li><a href="#glibc_conl_bin">/bin</a></li>
<li><a href="#glibc_conl_sbin">/sbin</a></li>
<li><a href="#glibc_conl_etc">/etc</a></li>
<li><a href="#glibc_conl_share">/share</a></li>
<li><a href="#glibc_conl_var">/var</a></li>
<li><a href="#glibc_conl_libexec">/libexec</a></li>
<li><a href="#glibc_conl_inc">/include</a></li>
</ul>
</li>
<li><a href="#glibc_conl_ref">參考資料</a></li>
<li><a href="#glibc_conl_ex">附錄</a></li>
</ul>


<p><a name="glibc_env"></a></p>

<h2>測試環境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 18.04.2 LTS
</span><span class='line'>Release:  18.04
</span><span class='line'>Codename: bionic</span></code></pre></td></tr></table></div></figure>


<p><a name="glibc_install"></a></p>

<h2>安裝步驟</h2>

<ul>
<li>下載套件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone http://sourceware.org/git/glibc.git
</span><span class='line'>cd glibc
</span><span class='line'>git checkout --track origin/release/2.27</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在新的目錄編譯 glibc，你可以自行指定安裝路徑，<font color=red><strong>一定要指定安裝路徑，以免發生嚴重悲劇。</strong> </font></li>
</ul>


<p>本次設定主要是針對除錯最佳化，以及避免覆蓋系統原本的 <code>glibc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ../
</span><span class='line'>mkdir out
</span><span class='line'>mkdir rootfs
</span><span class='line'>cd out
</span><span class='line'>
</span><span class='line'># 設定
</span><span class='line'>CFLAGS=-Og CPPFLAGS=-Og CXXFLAGS=-Og ../glibc/configure  --disable-werror --prefix=/tmp/rootfs/
</span><span class='line'>
</span><span class='line'># 編譯
</span><span class='line'>make
</span><span class='line'>
</span><span class='line'># 安裝
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<p><a name="glibc_conl"></a></p>

<h2>觀察與結論</h2>

<p>本來想說 <code>libc</code> 用來提供 C 標準函式庫的 binary，那麼了不起就是 <code>libc.so</code>和 <code>libc.a</code> 以及對應的 header files。安裝完畢後先看一下目錄，事情果然沒有像本組裝工想的那麼簡單。列出第一層目錄如下，除了預期中的<code>lib</code>和<code>include</code>以外，竟然還有不少預期以外的目錄。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree -L 1 -d /tmp/rootfs
</span><span class='line'>.
</span><span class='line'>├── bin
</span><span class='line'>├── etc
</span><span class='line'>├── include
</span><span class='line'>├── lib
</span><span class='line'>├── libexec
</span><span class='line'>├── sbin
</span><span class='line'>├── share
</span><span class='line'>└── var</span></code></pre></td></tr></table></div></figure>


<p>那麼我們來看一下這些目錄下面有什麼東西吧。</p>

<p><a name="glibc_conl_lib"></a></p>

<h3>/lib</h3>

<p>先來看目錄結構，多了和多國語言相關的函式庫目錄還有 trace shared object PLT (Procedure linkage table) 工具會用到的audio目錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree lib -d
</span><span class='line'>lib
</span><span class='line'>├── audit
</span><span class='line'>└── gconv</span></code></pre></td></tr></table></div></figure>


<p>接下來看<code>/lib</code>的檔案</p>

<p>列出幾個我有興趣的檔案</p>

<ul>
<li><p><code>*.o</code></p>

<ul>
<li>在<code>/lib</code>裏面會發現幾個object file，它們檔名都有<code>crt</code>，crt全名是 <code>C runtime</code>，顯然和執行的時候有關。我有空會再找時間了解。先列出來介紹幾個如下</li>
</ul>
</li>
<li><p><code>Scrt1.o</code>: 這邊我們可以看到<code>T _start</code>以及<code>U main</code>，望文生義按圖說故事我們可以猜測執行程式的起始點其實是<code>_start</code>，做了一些事情後才會去呼叫你寫的<code>main()</code>，我做了一個實驗，想知道一個應用程式會連結哪些系統上的object檔案請參考<a href="#glibc_conl_ex">這邊</a></p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nm Scrt1.o 
</span><span class='line'>0000000000000000 D __data_start
</span><span class='line'>0000000000000000 W data_start
</span><span class='line'>                 U _GLOBAL_OFFSET_TABLE_
</span><span class='line'>0000000000000000 R _IO_stdin_used
</span><span class='line'>                 U __libc_csu_fini
</span><span class='line'>                 U __libc_csu_init
</span><span class='line'>                 U __libc_start_main
</span><span class='line'>                 U main
</span><span class='line'>0000000000000000 T _start</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>crtn.o</code>: 用<code>nm</code>去看會發現沒有<code>symbol</code>，不過反組譯後會發現有兩個<code>section</code>，看起來和main啟動前和使用者程式結束後會有關係。有空會再探討。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ objdump -d crtn.o 
</span><span class='line'>
</span><span class='line'>crtn.o:     file format elf64-x86-64
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Disassembly of section .init:
</span><span class='line'>
</span><span class='line'>0000000000000000 &lt;.init&gt;:
</span><span class='line'>   0: 48 83 c4 08             add    $0x8,%rsp
</span><span class='line'>   4: c3                      retq   
</span><span class='line'>
</span><span class='line'>Disassembly of section .fini:
</span><span class='line'>
</span><span class='line'>0000000000000000 &lt;.fini&gt;:
</span><span class='line'>   0: 48 83 c4 08             add    $0x8,%rsp
</span><span class='line'>   4: c3                      retq   
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ld-linux-x86_64.so.2</code>

<ul>
<li>就是<code>ld.so</code>，這個檔案有趣的點是他是一個shared object，但是同時又是可以執行。如果我的懶病沒有發作以後會常常看到這個東西。</li>
</ul>
</li>
<li><code>libc.*</code>:

<ul>
<li>直接看symbol就知道，<code>T</code>, <code>U</code>的定義請翻前面文章，我懶得找。</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nm libc.a | grep "^printf.o:" -A 10
</span><span class='line'>printf.o:
</span><span class='line'>0000000000000000 T _IO_printf
</span><span class='line'>0000000000000000 T printf
</span><span class='line'>0000000000000000 T __printf
</span><span class='line'>                 U stdout
</span><span class='line'>                 U __vfprintf_internal
</span><span class='line'>
</span><span class='line'>snprintf.o:
</span><span class='line'>0000000000000000 W snprintf
</span><span class='line'>0000000000000000 T __snprintf
</span><span class='line'>                 U __vsnprintf_internal    </span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>libm.*</code>: 一樣看symbol節錄</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nm libm.so.6 |grep " sin"
</span><span class='line'>000000000002eb24 i sin
</span><span class='line'>0000000000034532 W sincos
</span><span class='line'>00000000000419cc i sincosf
</span><span class='line'>0000000000054f26 W sincosf128
</span><span class='line'>00000000000419cc i sincosf32
</span><span class='line'>0000000000034532 W sincosf32x
</span><span class='line'>0000000000034532 W sincosf64
</span><span class='line'>00000000000175c8 W sincosf64x
</span><span class='line'>00000000000175c8 W sincosl
</span><span class='line'>000000000004131e i sinf
</span><span class='line'>0000000000054148 W sinf128
</span><span class='line'>000000000004131e i sinf32
</span><span class='line'>000000000002eb24 i sinf32x
</span><span class='line'>000000000002eb24 i sinf64
</span><span class='line'>0000000000016ead W sinf64x
</span><span class='line'>000000000000ed11 W sinh
</span><span class='line'>000000000001205d W sinhf
</span><span class='line'>0000000000060407 W sinhf128
</span><span class='line'>000000000001205d W sinhf32
</span><span class='line'>000000000000ed11 W sinhf32x
</span><span class='line'>000000000000ed11 W sinhf64
</span><span class='line'>000000000000d9a4 W sinhf64x
</span><span class='line'>000000000000d9a4 W sinhl
</span><span class='line'>0000000000016ead W sinl
</span><span class='line'>00000000000144b5 t sin_pi
</span><span class='line'>0000000000027776 t sin_pi</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>libdl</code>

<ul>
<li>動態載入函式庫相關函數如<code>dlvsym</code>, <code>dlsym</code>,</li>
</ul>
</li>
</ul>


<h4>完整檔案如下</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls lib
</span><span class='line'>audit                         libc.a                 libmemusage.so              libnss_dns.so               librt-2.28.9000.so
</span><span class='line'>crt1.o                        libc_nonshared.a       libm.so                     libnss_dns.so.2             librt.a
</span><span class='line'>crti.o                        libcrypt-2.28.9000.so  libm.so.6                   libnss_files-2.28.9000.so   librt.so
</span><span class='line'>crtn.o                        libcrypt.a             libmvec-2.28.9000.so        libnss_files.so             librt.so.1
</span><span class='line'>gconv                         libcrypt.so            libmvec.a                   libnss_files.so.2           libSegFault.so
</span><span class='line'>gcrt1.o                       libcrypt.so.1          libmvec_nonshared.a         libnss_hesiod-2.28.9000.so  libthread_db-1.0.so
</span><span class='line'>ld-2.28.9000.so               libc.so                libmvec.so                  libnss_hesiod.so            libthread_db.so
</span><span class='line'>ld-linux-x86-64.so.2          libc.so.6              libmvec.so.1                libnss_hesiod.so.2          libthread_db.so.1
</span><span class='line'>libanl-2.28.9000.so           libdl-2.28.9000.so     libnsl-2.28.9000.so         libpcprofile.so             libutil-2.28.9000.so
</span><span class='line'>libanl.a                      libdl.a                libnsl.so.1                 libpthread-2.28.9000.so     libutil.a
</span><span class='line'>libanl.so                     libdl.so               libnss_compat-2.28.9000.so  libpthread.a                libutil.so
</span><span class='line'>libanl.so.1                   libdl.so.2             libnss_compat.so            libpthread.so               libutil.so.1
</span><span class='line'>libBrokenLocale-2.28.9000.so  libg.a                 libnss_compat.so.2          libpthread.so.0             Mcrt1.o
</span><span class='line'>libBrokenLocale.a             libm-2.28.9000.a       libnss_db-2.28.9000.so      libresolv-2.28.9000.so      Scrt1.o
</span><span class='line'>libBrokenLocale.so            libm-2.28.9000.so      libnss_db.so                libresolv.a
</span><span class='line'>libBrokenLocale.so.1          libm.a                 libnss_db.so.2              libresolv.so
</span><span class='line'>libc-2.28.9000.so             libmcheck.a            libnss_dns-2.28.9000.so     libresolv.so.2</span></code></pre></td></tr></table></div></figure>


<p><a name="glibc_conl_bin"></a></p>

<h3>/bin</h3>

<p>是除了 <code>ldd</code>以外，我全部沒印象。有些甚至不在Ubuntu的預設安裝中。使用者需要另外安裝，如<code>xtrace</code>等。</p>

<p>列出幾個我有興趣的工具</p>

<ul>
<li><a href="http://man7.org/linux/man-pages/man1/pldd.1.html">pldd</a>: 列出process使用的shared library。奇怪的是我自己用卻只有列出process的執行檔名稱而已。</li>
<li><a href="http://manpages.org/sotruss">sotruss</a>: 經由PLT (Procedure Linkage Table) trace shared library calls</li>
<li><a href="http://manpages.org/sprof">sprof</a>: share object 的profile 工具</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin
</span><span class='line'>├── catchsegv
</span><span class='line'>├── gencat
</span><span class='line'>├── getconf
</span><span class='line'>├── getent
</span><span class='line'>├── iconv
</span><span class='line'>├── ldd
</span><span class='line'>├── locale
</span><span class='line'>├── localedef
</span><span class='line'>├── makedb
</span><span class='line'>├── mtrace
</span><span class='line'>├── pcprofiledump
</span><span class='line'>├── pldd
</span><span class='line'>├── sotruss
</span><span class='line'>├── sprof
</span><span class='line'>├── tzselect
</span><span class='line'>└── xtrace</span></code></pre></td></tr></table></div></figure>


<p><a name="glibc_conl_sbin"></a></p>

<h3>/sbin</h3>

<ul>
<li>除了<code>ldconfig</code>外其他的不認識</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree sbin/
</span><span class='line'>sbin/
</span><span class='line'>├── iconvconfig
</span><span class='line'>├── ldconfig
</span><span class='line'>├── nscd
</span><span class='line'>├── sln
</span><span class='line'>├── zdump
</span><span class='line'>etc
</span><span class='line'>├── ld.so.conf
</span><span class='line'>└── rpc
</span><span class='line'>└── zic</span></code></pre></td></tr></table></div></figure>


<p><a name="glibc_conl_etc"></a></p>

<h3>/etc</h3>

<p>很有趣，竟然有<code>rpc</code> (remote procedure call)的檔案，紀錄rpc通訊協定的資訊。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>etc
</span><span class='line'>├── ld.so.conf
</span><span class='line'>└── rpc</span></code></pre></td></tr></table></div></figure>


<p><a name="glibc_conl_share"></a></p>

<h3>/share</h3>

<ul>
<li>存放時區以及多國語言相關檔案</li>
</ul>


<p><a name="glibc_conl_var"></a></p>

<h3>/var</h3>

<p>跳過</p>

<p><a name="glibc_conl_libexec"></a></p>

<h3>/libexec</h3>

<p>跳過</p>

<p><a name="glibc_conl_inc"></a></p>

<h3>/include</h3>

<p>跳過</p>

<p><a name="glibc_conl_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html">Linux x86 Program Start Up</a></li>
<li><a href="http://l4u-00.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/elf.html">ELF: From The Programmer&rsquo;s Perspective: The .init and .fini Sections (1995)</a></li>
<li><a href="https://stackoverflow.com/questions/29694564/what-is-the-use-of-start-in-c">Stackoverflow: What is the use of _start() in C?</a></li>
<li><a href="https://stackoverflow.com/questions/32700494/executing-init-and-fini">Stackoverflow: Executing init and fini</a></li>
</ul>


<p><a name="glibc_conl_ex"></a></p>

<h2>附錄</h2>

<ul>
<li>編譯hello.c 囉唆資訊節錄</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccnUW8Qj.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o hello /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. /tmp/ccTxSMPW.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o</span></code></pre></td></tr></table></div></figure>


<ul>
<li>會連結系統提供的object檔案列出如下

<ul>
<li>crtn.o</li>
<li>Scrt1.o</li>
<li>crti.o</li>
<li>crtendS.o</li>
<li>crtbeginS.o</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu 18.04.2 Trace 程式呼叫 Glibc 函數]]></title>
    <link href="http://wen00072.github.io/blog/2019/06/08/glibc-surface-observing/"/>
    <updated>2019-06-08T15:39:12+08:00</updated>
    <id>http://wen00072.github.io/blog/2019/06/08/glibc-surface-observing</id>
    <content type="html"><![CDATA[<p>不囉唆，直接上懶人包。</p>

<h2>環境設定</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'># 其實直接在剪下指令貼在終端機就就可以了
</span><span class='line'># 安裝套件並下載libcsource code
</span><span class='line'>DBG_PATH=~/tmp/lib_debug
</span><span class='line'>sudo apt install -y libc6-dbg
</span><span class='line'>mkdir -p $DBG_PATH
</span><span class='line'>cd $DBG_PATH
</span><span class='line'>apt source libc6-dev
</span><span class='line'>rm glibc_2.27-3ubuntu1.debian.tar.xz  glibc_2.27.orig.tar.xz glibc_2.27-3ubuntu1.dsc
</span><span class='line'>
</span><span class='line'># 設定load directory
</span><span class='line'>LIBC_PATH=${DBG_PATH}/glibc-2.27
</span><span class='line'>EX_FILES=~/tmp/lib_debug/ld_dir.ex
</span><span class='line'>rm -f $EX_FILES
</span><span class='line'>for i in $(find ${LIBC_PATH}/* -maxdepth 0 -type d); \
</span><span class='line'>  do echo "directory $i" &gt;&gt; $EX_FILES ; 
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<h2>使用方式</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb 你的執行檔 -x ~/tmp/lib_debug/ld_dir.ex</span></code></pre></td></tr></table></div></figure>


<h2>範例</h2>

<h3>程式</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int main(void)
</span><span class='line'>{
</span><span class='line'>    printf("Hello world\n");
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>示範操作</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdb ./hello -x ~/tmp/lib_debug/ld_dir.ex
</span><span class='line'>GNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git
</span><span class='line'>....
</span><span class='line'>Reading symbols from ./hello...done.
</span><span class='line'>(gdb) b main
</span><span class='line'>Breakpoint 1 at 0x63e: file hello.c, line 5.
</span><span class='line'>(gdb) r
</span><span class='line'>Starting program: /tmp/hello 
</span><span class='line'>
</span><span class='line'>Breakpoint 1, main () at hello.c:5
</span><span class='line'>5     printf("Hello world\n");
</span><span class='line'>(gdb) s
</span><span class='line'>_IO_puts (str=0x5555555546e4 "Hello world") at ioputs.c:33
</span><span class='line'>33    {
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<h2>參考資料</h2>

<ul>
<li><a href="http://fcamel-life.blogspot.com/2012/01/glibc.html">fcamel 技術隨手記: 追踪 glibc 裡的程式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[從gdb Dump Process 記憶體資料]]></title>
    <link href="http://wen00072.github.io/blog/2019/03/20/dump-process-memory-block-via-gdb/"/>
    <updated>2019-03-20T22:29:54+08:00</updated>
    <id>http://wen00072.github.io/blog/2019/03/20/dump-process-memory-block-via-gdb</id>
    <content type="html"><![CDATA[<p>無聊在trace <a href="http://man7.org/linux/man-pages/man7/vdso.7.html">vdso</a> 找到的技巧。整理如下</p>

<h2>方法說明</h2>

<ul>
<li><code>gdb 你要的程式</code></li>
<li><code>gdb</code> 設常用的 <code>system call</code> 如 <code>open</code></li>
<li>執行程式</li>
<li>中斷後

<ul>
<li><code>info proc mappings</code></li>
<li><code>dump memory 檔名 開始位址 結束位址</code></li>
<li>離開</li>
</ul>
</li>
<li>剩下看你拿要dump 的檔案做啥了</li>
</ul>


<h2>範例： dump process中的vdso記憶體區塊，觀察vdso symbol</h2>

<ul>
<li><code>gdb 你要的程式</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdb /bin/ls
</span><span class='line'>GNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git
</span><span class='line'>...
</span><span class='line'>Reading symbols from /bin/ls...(no debugging symbols found)...done.
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>gdb</code> 設常用的 <code>system call</code> 如 <code>open</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) b open
</span><span class='line'>Breakpoint 1 at 0x3d30</span></code></pre></td></tr></table></div></figure>


<ul>
<li>執行程式</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r
</span><span class='line'>Starting program: /bin/ls 
</span><span class='line'>
</span><span class='line'>Breakpoint 1, __libc_open64 (file=file@entry=0x7ffff7df6428 "/etc/ld.so.cache", oflag=oflag@entry=524288)
</span><span class='line'>    at ../sysdeps/unix/sysv/linux/open64.c:39
</span><span class='line'>39    ../sysdeps/unix/sysv/linux/open64.c: No such file or directory.</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>info proc mapings</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) info proc mappings 
</span><span class='line'>process 30094
</span><span class='line'>Mapped address spaces:
</span><span class='line'>
</span><span class='line'>          Start Addr           End Addr       Size     Offset objfile
</span><span class='line'>      0x555555554000     0x555555573000    0x1f000        0x0 /bin/ls
</span><span class='line'>      0x555555772000     0x555555775000     0x3000    0x1e000 /bin/ls
</span><span class='line'>      0x555555775000     0x555555776000     0x1000        0x0 [heap]
</span><span class='line'>      0x7ffff7dd5000     0x7ffff7dfc000    0x27000        0x0 /lib/x86_64-linux-gnu/ld-2.27.so
</span><span class='line'>      0x7ffff7ff7000     0x7ffff7ffa000     0x3000        0x0 [vvar]
</span><span class='line'>      0x7ffff7ffa000     0x7ffff7ffc000     0x2000        0x0 [vdso]
</span><span class='line'>      0x7ffff7ffc000     0x7ffff7ffe000     0x2000    0x27000 /lib/x86_64-linux-gnu/ld-2.27.so
</span><span class='line'>      0x7ffff7ffe000     0x7ffff7fff000     0x1000        0x0 
</span><span class='line'>      0x7ffffffde000     0x7ffffffff000    0x21000        0x0 [stack]
</span><span class='line'>  0xffffffffff600000 0xffffffffff601000     0x1000        0x0 [vsyscall]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>dump memory 檔名 開始位址 結束位址</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) dump memory vdso 0x7ffff7ffa000  0x7ffff7ffc000
</span><span class='line'>(gdb) quit
</span><span class='line'>A debugging session is active.
</span><span class='line'>
</span><span class='line'>  Inferior 1 [process 30094] will be killed.
</span><span class='line'>
</span><span class='line'>Quit anyway? (y or n) y</span></code></pre></td></tr></table></div></figure>


<ul>
<li>看dump 檔案 symbol</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ file vdso 
</span><span class='line'>vdso: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=cef5ed3c3dc2b39082ae093560c168a8b427ebb6, stripped
</span><span class='line'>$ nm -D vdso 
</span><span class='line'>0000000000000a30 W clock_gettime
</span><span class='line'>0000000000000f30 W getcpu
</span><span class='line'>0000000000000d40 W gettimeofday
</span><span class='line'>0000000000000000 A LINUX_2.6
</span><span class='line'>0000000000000f10 W time
</span><span class='line'>0000000000000a30 T __vdso_clock_gettime
</span><span class='line'>0000000000000f30 T __vdso_getcpu
</span><span class='line'>0000000000000d40 T __vdso_gettimeofday
</span><span class='line'>0000000000000f10 T __vdso_time</span></code></pre></td></tr></table></div></figure>


<h2>加碼，觀察ASLR</h2>

<p>懶的說明ASLR，請自行參考<a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">連結</a>。
另外請自行比較下面兩個 <code>cat</code> 的記憶體區塊位址。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /proc/self/maps
</span><span class='line'>5601e5311000-5601e5319000 r-xp 00000000 103:02 13631603                  /bin/cat
</span><span class='line'>...
</span><span class='line'>5601e6814000-5601e6835000 rw-p 00000000 00:00 0                          [heap]
</span><span class='line'>...
</span><span class='line'>7ffe6edcf000-7ffe6edf0000 rw-p 00000000 00:00 0                          [stack]
</span><span class='line'>7ffe6edfb000-7ffe6edfe000 r--p 00000000 00:00 0                          [vvar]
</span><span class='line'>7ffe6edfe000-7ffe6ee00000 r-xp 00000000 00:00 0                          [vdso]
</span><span class='line'>ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$ cat /proc/self/maps
</span><span class='line'>556ef8185000-556ef818d000 r-xp 00000000 103:02 13631603                  /bin/cat
</span><span class='line'>...
</span><span class='line'>556ef91df000-556ef9200000 rw-p 00000000 00:00 0                          [heap]
</span><span class='line'>...
</span><span class='line'>7ffc83c55000-7ffc83c76000 rw-p 00000000 00:00 0                          [stack]
</span><span class='line'>7ffc83d4a000-7ffc83d4d000 r--p 00000000 00:00 0                          [vvar]
</span><span class='line'>7ffc83d4d000-7ffc83d4f000 r-xp 00000000 00:00 0                          [vdso]
</span><span class='line'>ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Binary 縮寫和連結]]></title>
    <link href="http://wen00072.github.io/blog/2018/12/12/linux-binary-resources/"/>
    <updated>2018-12-12T21:48:22+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/12/12/linux-binary-resources</id>
    <content type="html"><![CDATA[<p>整理目前看過的資料縮寫以及網路連結，可能會更新。</p>

<h2>ELF header</h2>

<ul>
<li><code>hdr</code>: header</li>
<li><code>Ehdr</code>: ELF header</li>
<li><code>EI</code>: ELF ident</li>
<li><code>ET</code>: ELF type</li>
<li><code>EM</code>: ELF machine</li>
</ul>


<h2>Program header</h2>

<ul>
<li><code>Phdr</code>: Program header</li>
<li><code>PT</code>: Program header type</li>
<li><code>PF</code>: Prgram header flag</li>
</ul>


<h2>Section header</h2>

<ul>
<li><code>Shdr</code>: Section header</li>
<li><code>SHN</code>: Section header index</li>
<li><code>sh_</code>: Section header</li>
<li><code>SHT</code>: Section header type</li>
<li><code>SHF</code>: Section header flag</li>
</ul>


<h2>Symbol table</h2>

<ul>
<li><code>st</code>: Symbol table</li>
<li><code>STT</code>: Symbol table type</li>
<li><code>STV</code>: Symbol table visibility</li>
</ul>


<h2>Dynamic section</h2>

<ul>
<li><code>DT</code>: Dynamic section type</li>
</ul>


<h2>Note section</h2>

<ul>
<li><code>NT</code>: Note type</li>
</ul>


<h2>Auxiliary vector</h2>

<ul>
<li><code>AT</code>: auxiliary vector type</li>
</ul>


<h2>資源</h2>

<ul>
<li><a href="http://man7.org/linux/man-pages/man5/elf.5.html">man 5 elf</a></li>
<li><a href="http://man7.org/linux/man-pages/man1/ld.1.html">man ld</a></li>
<li><a href="http://man7.org/linux/man-pages/man1/readelf.1.html">man readelf</a></li>
<li><a href="http://man7.org/linux/man-pages/man1/objdump.1.html">man objdump</a></li>
<li><a href="http://man7.org/linux/man-pages/man8/ld.so.8.html">man ld.so</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 16.04更新到Ubuntu 18.04後Octopress 環境變動]]></title>
    <link href="http://wen00072.github.io/blog/2018/12/06/update-octopress-environment-for-ubuntu-18-dot-04/"/>
    <updated>2018-12-06T22:24:01+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/12/06/update-octopress-environment-for-ubuntu-18-dot-04</id>
    <content type="html"><![CDATA[<p>本來想要寫一些東西，結果發現<code>rake</code>在Ubuntu 無法執行，只好先處理了。</p>

<p>主要的問題是更新後<code>Ruby</code>版本從16.04使用的<code>2.3</code>升級成<code>2.5</code>了。以下是我紀錄過的測試指令，必須承認這是網路上的東西剪貼，我不想知道後面的原理，後果自行負責。寫這篇文章另一個目的是確定上傳到網路上後可以正常發佈才證明真的解決問題了。</p>

<h2>預安裝套件</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt -y gcc libcurl4-openssl-dev libxml2-dev</span></code></pre></td></tr></table></div></figure>


<h2>Ruby 相關更新，完全不知道做啥</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>sudo gem install rake</span></code></pre></td></tr></table></div></figure>


<h2>更新Octopress Gemfile</h2>

<p>由於更新後<code>rake</code>版本也從<code>10.5.0</code>變成<code>12.3.1</code>，所以一跑<code>rake</code>就會出現版本不合的錯誤，因此我把<code>Gemfile</code> <code>rake</code>的版本檢查改成<code>12</code>，diff 檔案如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Gemfile b/Gemfile</span>
</span><span class='line'><span class="gh">index 153dd3d..9f5048b 100644</span>
</span><span class='line'><span class="gd">--- a/Gemfile</span>
</span><span class='line'><span class="gi">+++ b/Gemfile</span>
</span><span class='line'><span class="gu">@@ -1,7 +1,7 @@</span>
</span><span class='line'> source &quot;https://rubygems.org&quot;
</span><span class='line'>
</span><span class='line'> group :development do
</span><span class='line'><span class="gd">-  gem &#39;rake&#39;, &#39;~&gt; 10.0&#39;</span>
</span><span class='line'><span class="gi">+  gem &#39;rake&#39;, &#39;~&gt; 12.0&#39;</span>
</span><span class='line'>   gem &#39;jekyll&#39;, &#39;~&gt; 2.0&#39;
</span><span class='line'>   gem &#39;octopress-hooks&#39;, &#39;~&gt; 2.2&#39;
</span><span class='line'>   gem &#39;octopress-date-format&#39;, &#39;~&gt; 2.0&#39;
</span></code></pre></td></tr></table></div></figure>


<h2>參考資料</h2>

<ul>
<li><a href="https://github.com/cliffe/SecGen/issues/113">[Ubuntu 18.04] Error installing on step &lsquo;bundle install&rsquo; (fix in comments)</a></li>
<li><a href="https://stackoverflow.com/questions/7483515/rake-aborted-no-such-file-to-load-bundler-setup-rails-3-1">Rake aborted! no such file to load &ndash;bundler/setup Rails 3.1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim POSIX Group Regex 使用方式]]></title>
    <link href="http://wen00072.github.io/blog/2018/08/26/vim-posix-group-regex/"/>
    <updated>2018-08-26T16:22:09+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/08/26/vim-posix-group-regex</id>
    <content type="html"><![CDATA[<p>由於個人需求，需要在<code>vim</code>下面使用稍微複雜的字串搜尋取代。故整理這篇以後可以參考。</p>

<h2>目錄</h2>

<ul>
<li><a href="#vreg-grp-env">測試環境</a></li>
<li><a href="#vreg-grp-intro">問題描述以及POSIX regex grouping 簡介</a></li>
<li><a href="#vreg-grp-syn">參考語法</a></li>
<li><a href="#vreg-grp-ex">範例</a></li>
</ul>


<p><a name="vreg-grp-env"></a></p>

<h2>測試環境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 18.04.1 LTS
</span><span class='line'>Release:  18.04
</span><span class='line'>Codename: bionic
</span><span class='line'>
</span><span class='line'>$ vim --version
</span><span class='line'>VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Apr 10 2018 21:31:58)</span></code></pre></td></tr></table></div></figure>


<p><a name="vreg-grp-intro"></a></p>

<h2>問題描述以及POSIX regex grouping 簡介</h2>

<p>Regular express 的特色是他可以match不同的pattern，所以用於搜尋和取代是非常的方便，然而當要把<strong>符合條件的字串前面或後面加上字串</strong>就會有一個問題，那就是<strong>符合的字串要怎麼表示？</strong>舉例來說，當我們想要在下面log<code>[mem....]</code> 之後放入<code>test</code>，要怎麼做到? 這時候我們就可以使用<code>reguler expression</code>的<code>group</code> 功能了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x0000000000057fff] usable
</span><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000058000-0x0000000000058fff] reserved
</span><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000059000-0x000000000009dfff] usable</span></code></pre></td></tr></table></div></figure>


<p><a name="vreg-grp-syn"></a></p>

<h2>參考語法</h2>

<ul>
<li>指定<code>group</code>，一組regex可以指定零到多個<code>group</code>

<ul>
<li><code>\(match_patter\)</code></li>
</ul>
</li>
<li>取值

<ul>
<li><code>\0</code>

<ul>
<li>前項所有的<code>group</code></li>
</ul>
</li>
<li><code>\1</code>

<ul>
<li>第一組<code>group</code></li>
</ul>
</li>
<li><code>\2</code>

<ul>
<li>第二組<code>group</code></li>
</ul>
</li>
<li><code>\3</code>

<ul>
<li>第三組<code>group</code></li>
</ul>
</li>
<li>千秋萬世直到永遠</li>
</ul>
</li>
</ul>


<p><a name="vreg-grp-ex"></a></p>

<h2>範例</h2>

<p>就用上面的訊息當範例吧</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x0000000000057fff] usable
</span><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000058000-0x0000000000058fff] reserved
</span><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000059000-0x000000000009dfff] usable</span></code></pre></td></tr></table></div></figure>


<h3>範例一： 在[mem &hellip;]之後插入test</h3>

<ul>
<li>指令: <code>:%s/\(\[mem.*\]\)/\1 test/g</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x0000000000057fff] test usable
</span><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000058000-0x0000000000058fff] test reserved
</span><span class='line'>[    0.000000] BIOS-e820: [mem 0x0000000000059000-0x000000000009dfff] test usable</span></code></pre></td></tr></table></div></figure>


<h3>範例二： 設定三組<code>group</code>，都插入<code>test</code></h3>

<ul>
<li>指令: <code>:%s/\(^\[.*\]\) \(\BIOS-e820:\) \(\[mem.*\]\)/\1 test1 \2 test2 \3 test3 /g</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[    0.000000] test1 BIOS-e820: test2 [mem 0x0000000000000000-0x0000000000057fff] test3  usable
</span><span class='line'>[    0.000000] test1 BIOS-e820: test2 [mem 0x0000000000058000-0x0000000000058fff] test3  reserved
</span><span class='line'>[    0.000000] test1 BIOS-e820: test2 [mem 0x0000000000059000-0x000000000009dfff] test3  usable</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on How to C 2016]]></title>
    <link href="http://wen00072.github.io/blog/2018/07/24/notes-on-how-to-c-2016/"/>
    <updated>2018-07-24T20:43:52+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/07/24/notes-on-how-to-c-2016</id>
    <content type="html"><![CDATA[<p>最近看了<a href="https://matt.sh/howto-c">How to C 2016</a>，反正很多記不起來乾脆寫起來以後剪貼。</p>

<h2>GNU Flags</h2>

<ul>
<li><code>-std=c99</code></li>
</ul>


<h3>Warning flags</h3>

<p><code>-Wall -Wextra -Werror -Wshadow -Wno-missing-field-initializers -Wstrict-overflow -fno-strict-aliasing</code></p>

<ul>
<li>延伸：<a href="https://stackoverflow.com/questions/3375697/useful-gcc-flags-for-c">Stackoverflow: Useful gcc flag for C</a></li>
</ul>


<h3>Links</h3>

<ul>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html">stdint.h</a>

<ul>
<li><code>intmax_t</code>，&hellip;</li>
<li><code>intptr_t</code>

<ul>
<li>根據platform int size 調整</li>
</ul>
</li>
</ul>
</li>
<li><a href="http://pubs.opengroup.org/onlinepubs/7908799/xsh/stddef.h.html">stdtype.h</a>

<ul>
<li><code>ptr_diff_t</code></li>
</ul>
</li>
</ul>


<h2>其他</h2>

<ul>
<li><code>size_t</code>和<code>ssize_t</code>差別：<code>s</code>->signed，當有錯誤時會為<code>-1</code></li>
<li><code>#pragma once</code> 可用來取代Header guard</li>
</ul>


<h3>名詞</h3>

<ul>
<li><a href="https://gcc.gnu.org/onlinedocs/gccint/LTO-Overview.html">LTO</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[給自己剪貼用的vim設定]]></title>
    <link href="http://wen00072.github.io/blog/2018/02/15/vim-setup-for-trace-c-code/"/>
    <updated>2018-02-15T04:03:41+08:00</updated>
    <id>http://wen00072.github.io/blog/2018/02/15/vim-setup-for-trace-c-code</id>
    <content type="html"><![CDATA[<p>分享使用<code>vim</code> 的心得，加上使用Vundle plugin管理工具功能配合外部程式碼分享軟體<code>cscope</code>和<code>ctags</code>來trace <code>C</code>語言的程式碼以及編輯<code>Python</code>程式碼相關設定。</p>

<ul>
<li>致謝，感謝網友<a href="http://scottt.tw/">Scott</a>介紹vim register概念，<a href="http://yodalee.blogspot.tw/">葉闆</a>介紹的tagbar，和Kyle Lin介紹的airline。</li>
</ul>


<h2>目錄</h2>

<ul>
<li><a href="#vtr-env">測試環境</a></li>
<li><a href="#vtr-pkg">懶人包</a></li>
<li><a href="#vtr-set">設定.vimrc以及Vundle plugins</a>

<ul>
<li>  <a href="#vtr-set-prep">事前準備</a></li>
<li>  <a href="#vtr-set-insvd">安裝Vundle</a></li>
<li>  <a href="#vtr-set-vdplg">我安裝的Vundle Plugins</a>

<ul>
<li><a href="#vtr-set-vdplg-ed">編輯器相關</a>

<ul>
<li><a href="#vtr-set-vdplg-al">airline</a>

<ul>
<li><a href="#vtr-set-vdplg-al-pre">安裝準備</a></li>
<li><a href="#vtr-set-vdplg-al-set">設定airline</a></li>
</ul>
</li>
<li><a href="#vtr-set-vdplg-ed-itl">indentLine</a></li>
<li><a href="#vtr-set-vdplg-vbw">vim-better-whitespace</a></li>
</ul>
</li>
<li><a href="#vtr-set-vdplg-tr">Trace C語言程式碼相關</a>

<ul>
<li><a href="#vtr-set-vdplg-tr-cm">cscope_maps</a></li>
<li><a href="#vtr-set-vdplg-tr-se">SrcExpl</a></li>
<li><a href="#vtr-set-vdplg-tr-tl">taglist</a></li>
<li><a href="#vtr-set-vdplg-tr-nd">nerdtree</a></li>
<li><a href="#vtr-set-vdplg-tr-tri">Trinity</a></li>
<li><a href="#vtr-set-vdplg-tr-tgb">tagbar</a></li>
</ul>
</li>
<li><a href="#vtr-set-md">Markdown 語法支援</a>

<ul>
<li><a href="#vtr-set-md-pdoc">vim-pandoc-syntax</a></li>
</ul>
</li>
<li><a href="#vtr-set-py">Python開發相關</a>

<ul>
<li><a href="#vtr-set-py-prepare">準備工作</a></li>
<li><a href="#vtr-set-py-pm">python-mode</a></li>
<li><a href="#vtr-set-py-sc">syntastic</a></li>
<li><a href="#vtr-set-py-pt">python_match</a></li>
<li><a href="#vtr-set-py-id">indentpython</a></li>
</ul>
</li>
</ul>
</li>
<li>  <a href="#vtr-set-misc">和Plugin 無關的設定</a>

<ul>
<li><a href="#vtr-set-misc-ed">編輯器和顯示特殊字元相關設定</a></li>
<li><a href="#vtr-set-misc-ind">Indent相關設定</a></li>
<li><a href="#vtr-set-misc-msc">其他</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#vtr-test">參考資料</a></li>
</ul>


<p><a name="vtr-env"></a></p>

<h2>測試環境</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ lsb_release  -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 16.04.3 LTS
</span><span class='line'>Release:  16.04
</span><span class='line'>Codename: xenial
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$ ctags --version
</span><span class='line'>Exuberant Ctags 5.9~svn20110310, Copyright (C) 1996-2009 Darren Hiebert
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>$ cscope --version
</span><span class='line'>cscope: version 15.8b
</span><span class='line'>
</span><span class='line'>$ vim --version
</span><span class='line'>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:44:48)
</span><span class='line'>Included patches: 1-1689
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p><a name="vtr-set"></a></p>

<h2>設定.vimrc以及Vundle plugins</h2>

<p><a name="vtr-set-prep"></a></p>

<h3>事前準備</h3>

<p>您需要確認</p>

<ul>
<li>vim版本為7.4以上</li>
<li>安裝ctags和cscope，指令如下
<code>sudo apt-get install exuberant-ctags cscope</code></li>
</ul>


<p><a name="vtr-set-insvd"></a></p>

<h3>安裝Vundle</h3>

<p><code>Vundle</code>是vim plugin 管理工具，他可以透過URL, github, 以及local FS等方式安裝甚至更新Plugin。類似的工具還有不少，我只是挑看到的第一個而已。</p>

<p><code>Vundle</code>常用的指令如下，還蠻容易望文生義所以我就不解釋了</p>

<ul>
<li><code>:PluginList</code></li>
<li><code>:PluginInstall</code></li>
<li><code>:PluginClean</code></li>
<li><code>:PluginUpdate</code></li>
</ul>


<p>安裝方式如下</p>

<ul>
<li><p>首先你要下載<code>Vundle</code>，指令如下
<code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></p></li>
<li><p>接下來在你的.vimrc加入下面這段，我是從<a href="https://github.com/VundleVim/Vundle.vim">官方網頁</a>改的，其實只是把他的範例Plugin幹掉並加上分隔線及分隔線內的註解而已</p></li>
</ul>


<figure class='code'><figcaption><span>.vimrc 要加的部份</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Start vundle
</span><span class='line'>&quot;====================================================================
</span><span class='line'>set nocompatible              &quot; be iMproved, required
</span><span class='line'>filetype off                  &quot; required
</span><span class='line'>
</span><span class='line'>&quot; set the runtime path to include Vundle and initialize
</span><span class='line'>set rtp+=~/.vim/bundle/Vundle.vim
</span><span class='line'>call vundle#begin()
</span><span class='line'>
</span><span class='line'>&quot; alternatively, pass a path where Vundle should install plugins
</span><span class='line'>&quot;call vundle#begin(&#39;~/some/path/here&#39;)
</span><span class='line'>
</span><span class='line'>&quot; let Vundle manage Vundle, required
</span><span class='line'>Plugin &#39;VundleVim/Vundle.vim&#39;
</span><span class='line'>
</span><span class='line'>&quot;===============================================================
</span><span class='line'>&quot; Write your plugins here
</span><span class='line'>&quot;===============================================================
</span><span class='line'>Plugin &#39;Yggdroot/indentLine&#39;
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Run vundle
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; All of your Plugins must be added before the following line
</span><span class='line'>call vundle#end()            &quot; required
</span><span class='line'>filetype plugin indent on    &quot; required
</span><span class='line'>&quot; To ignore plugin indent changes, instead use:
</span><span class='line'>&quot;filetype plugin on
</span><span class='line'>&quot;
</span><span class='line'>&quot; Brief help
</span><span class='line'>&quot; :PluginList       - lists configured plugins
</span><span class='line'>&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
</span><span class='line'>&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache
</span><span class='line'>&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
</span><span class='line'>&quot;
</span><span class='line'>&quot; see :h vundle for more details or wiki for FAQ
</span><span class='line'>&quot; Put your non-Plugin stuff after this line
</span></code></pre></td></tr></table></div></figure>


<p>注意下面列出的這幾行statements，你要新增或移除Plugin就是改這個地方。這些Plugin將會在後面介紹。剛好我要安裝的Plugin都是在<a href="https://github.com">GitHub</a>上開發或有mirror。而<code>Vundle</code>可以用直接指定Plugin 專案在GitHub相對路徑即可安裝。這些描述也是<code>Vundle</code>載入Plugin　的順序，沒寫對順序有可能有相依問題請自行注意。</p>

<p>例如<code>https://github.com/Yggdroot/indentLine</code> 就寫成<code>Yggdroot/indentLine</code></p>

<figure class='code'><figcaption><span>我安裝的Plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&quot;===============================================================
</span><span class='line'>&quot; Write your plugins here
</span><span class='line'>&quot;===============================================================
</span><span class='line'>Plugin &#39;Yggdroot/indentLine&#39;
</span><span class='line'>Plugin &#39;ntpeters/vim-better-whitespace&#39;
</span><span class='line'>Plugin &#39;vim-airline/vim-airline&#39;
</span><span class='line'>Plugin &#39;tpope/vim-fugitive&#39;
</span><span class='line'>Plugin &#39;chazy/cscope_maps&#39;
</span><span class='line'>Plugin &#39;vim-scripts/taglist.vim&#39;
</span><span class='line'>Plugin &#39;scrooloose/nerdtree&#39;
</span><span class='line'>Plugin &#39;wesleyche/SrcExpl&#39;
</span><span class='line'>Plugin &#39;wesleyche/Trinity&#39;
</span><span class='line'>Plugin &#39;majutsushi/tagbar&#39;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>確定新增/刪除Plugin後，就可以執行vim/gvim，使用下面命令

<ul>
<li><code>:PluginInstall</code></li>
<li><code>:PluginClean</code></li>
</ul>
</li>
</ul>


<p><a name="vtr-set-vdplg"></a></p>

<h3>我安裝的Vundle Plugins</h3>

<p>因為安裝方式已經在上面了，這邊就以介紹為主</p>

<p><a name="vtr-set-vdplg-ed"></a></p>

<h4>編輯器相關</h4>

<p><a name="vtr-set-vdplg-al"></a></p>

<h5>airline</h5>

<p><a name="vtr-set-vdplg-al-pre"></a></p>

<h6>安裝準備</h6>

<p>先看圖，圖中最下方的那行就是airline，可以顯示一些有用的資訊
<img src=/images/vim_ind11.jpg></p>

<p>由左到右我們可以看到Vim 模式，Git branch 等資訊。以及一些比較特別的符號，這表示我們需要</p>

<ul>
<li>讓airline取得git資訊</li>
<li>讓airline取得特別符號</li>
</ul>


<p>也就是說，在安裝<code>airline</code>前要做一些前置動作如下</p>

<ul>
<li>讓airline取得git資訊

<ul>
<li>很簡單，安裝<code>vim-fugitive</code> plugin即可</li>
</ul>
</li>
<li>讓airline取得特別符號
這也不難，就是安裝特殊字型，並且設定GUI時存取這些字型。方式如下</li>
</ul>


<p><strong>取得字型</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git clone https://github.com/powerline/fonts
</span></code></pre></td></tr></table></div></figure>


<p><strong>安裝字型</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>cd fonts &amp;&amp; ./install.sh
</span></code></pre></td></tr></table></div></figure>


<p><strong> .vimrc中指定安裝的字型 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>set guifont=Inconsolata\ for\ Powerline\ 20
</span></code></pre></td></tr></table></div></figure>


<p><a name="vtr-set-vdplg-al-set"></a></p>

<h6>設定airline</h6>

<p>把下面的資料放入<code>.vimrc</code>即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>let g:airline_powerline_fonts = 1
</span><span class='line'>set laststatus=2
</span></code></pre></td></tr></table></div></figure>


<p><a name="vtr-set-vdplg-ed-itl"></a></p>

<h5>indentLine</h5>

<p>當Ident為空白增加以下的Indent 對齊參考資線
<img src=/images/vim_ind2.jpg></p>

<p><strong>注意此Plugin在Ident為tab同時又加上顯示tab字元時自動失效，目前workaround就是顯示tab字元為<code>|</code>，接下來以<code>.</code>延伸作為辨別。範例如下：</strong>
<img src=/images/vim_ind1.jpg></p>

<p><a name="vtr-set-vdplg-vbw"></a></p>

<h5>vim-better-whitespace</h5>

<p>將<a href="http://stackoverflow.com/questions/22273233/what-is-meant-by-%0Atrailing-space-and-whats-the-difference-between-it-and-a-blank">trailing space</a>顯示成明顯的紅色
<img src=/images/vim_ind3.jpg></p>

<p><a name="vtr-set-vdplg-tr"></a></p>

<h4>Trace 程式碼相關</h4>

<p><a name="vtr-set-vdplg-tr-cm"></a></p>

<h5>cscope_maps</h5>

<p>簡單來說，就是把cscope指令對應到Hot key</p>

<p>先列出find部份的指令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>find : Query for a pattern            (Usage: find c|d|e|f|g|i|s|t name)
</span><span class='line'>       c: Find functions calling this function
</span><span class='line'>       d: Find functions called by this function
</span><span class='line'>       e: Find this egrep pattern
</span><span class='line'>       f: Find this file
</span><span class='line'>       g: Find this definition
</span><span class='line'>       i: Find files #including this file
</span><span class='line'>       s: Find this C symbol
</span><span class='line'>       t: Find this text string
</span></code></pre></td></tr></table></div></figure>


<p>他的使用方法也很簡單，就是先把游標移動到你要查的statement，再按<code>ctrl</code> + <code>\</code> + <code>c|d|e|f|g|i|s|t 其中一個</code>。</p>

<p>舉例來說，我在下圖中把游標移動到<code>core_sys_select</code>函數後按下<code>ctrl</code> + <code>\</code> + <code>c</code>的結果如下
<img src=/images/vim_ind4.jpg></p>

<p><a name="vtr-set-vdplg-tr-se"></a></p>

<h5>SrcExpl</h5>

<p>當啟動時，您的游標在那個敘述，Source explorer 會切割視窗，印出該敘述的定義。舉例來說，當我游標在138行的<code>free_poll_entry</code>的話，顯示的畫面如下。</p>

<p><img src=/images/vim_ind5.jpg></p>

<p><a name="vtr-set-vdplg-tr-tl"></a></p>

<h5>taglist</h5>

<p>列出目前檔案所有symbol並且可以選擇symbol切換到該symbol在檔案中的位置
<img src=/images/vim_ind6.jpg></p>

<p><a name="vtr-set-vdplg-tr-nd"></a></p>

<h5>nerdtree</h5>

<p>以樹狀顯示目前檔案所在目錄結構，看圖就知道
<img src=/images/vim_ind7.jpg></p>

<p><a name="vtr-set-vdplg-tr-tri"></a></p>

<h5>Trinity</h5>

<p>看完以上三個，你可能會覺得奇怪好像沒提到怎麼啟動。這就是<code>Trinity</code>大顯身手的地方了。你安裝Trinity後，再Vundle後面加上下面的敘述就可以有</p>

<ul>
<li><code>F8</code> : 同時打開或關閉<code>nerdtree</code>, <code>Source explorer</code>, 以及<code>tag list</code></li>
<li><code>F9</code> : 打開或關閉<code>Source explorer</code></li>
<li><code>F10</code>: 打開或關閉<code>tag list</code></li>
<li><code>F11</code>: 打開或關閉<code>nerdtree</code></li>
</ul>


<figure class='code'><figcaption><span>.vimrc 的Trinity設定</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Trinity Settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Open and close all the three plugins on the same time
</span><span class='line'>nmap &lt;F8&gt;  :TrinityToggleAll&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>&quot; Open and close the Source Explorer separately
</span><span class='line'>nmap &lt;F9&gt;  :TrinityToggleSourceExplorer&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>&quot; Open and close the Taglist separately
</span><span class='line'>nmap &lt;F10&gt; :TrinityToggleTagList&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>&quot; Open and close the NERD Tree separately
</span><span class='line'>nmap &lt;F11&gt; :TrinityToggleNERDTree&lt;CR&gt;
</span></code></pre></td></tr></table></div></figure>


<p>以下是按下<code>F8</code> 的畫面
<img src=/images/vim_ind8.jpg></p>

<p><a name="vtr-set-vdplg-tr-tgb"></a></p>

<h5>tagbar</h5>

<p>網友推荐的taglist改良版 plugin，為什麼不換掉taglist呢？因為我喜歡source explorer。除了安裝Plugin外，我也順便設定按下<code>F7</code>可以切換，設定如下。</p>

<figure class='code'><figcaption><span>.vimrc 的Trinity設定</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Tagbar Settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Open and close the tagbar separately
</span><span class='line'>nmap &lt;F7&gt; :TagbarToggle&lt;CR&gt;
</span></code></pre></td></tr></table></div></figure>


<p>以下是按下<code>F7</code> 的畫面，可以注意右邊視窗會更進一步地顯示資料結構的成員名稱
<img src=/images/vim_ind10.jpg></p>

<p><a name="vtr-set-md"></a></p>

<h3>Markdown 語法支援</h3>

<p><a name="vtr-set-md-pdoc"></a></p>

<h4>vim-pandoc-syntax</h4>

<p>單純就是讓<code>vim</code>可以顯示<code>Markdown</code> syntax highlight，範例如下圖:
<img src=/images/vim_ind12.jpg></p>

<p><a name="vtr-set-py"></a></p>

<h3>Python開發相關</h3>

<p><a name="vtr-set-py-prepare"></a></p>

<h4>準備工作</h4>

<p>主要是語法檢查套件相關安裝，指令如下</p>

<figure class='code'><figcaption><span>.vimrc 的Trinity設定</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sudo apt install -y flake8 python-rope pylint
</span></code></pre></td></tr></table></div></figure>


<p><a name="vtr-set-py-pm"></a></p>

<h4>python-mode</h4>

<p><a href="blog/2014/12/06/introduction-to-python-mode-for-vim/">之前</a>有介紹過，偷懶跳過。也許Python用到一陣子可以上手後可以再分享心得。</p>

<p><a name="vtr-set-py-sc"></a></p>

<h4>syntastic</h4>

<p>泛用形語法檢查工具，請參考<a href="https://github.com/vim-syntastic/syntastic">Syntax checking hacks for vim</a>說明。
目前是我靠他幫忙檢查寫的程式是否符合<a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>規範，要注意的是Ubuntu 16.04中<code>vim</code> 套件預設只支援<code>Python 3</code>，要使用vim 編寫<code>Python 2</code>的朋友請自行估狗。我之前是自行編譯<code>vim</code>解決的。</p>

<p>語法檢查範例如下圖
<img src=/images/vim_ind13.jpg></p>

<p><a name="vtr-set-py-pt"></a></p>

<h4>python_match</h4>

<p>讓Python 也可以使用<code>vim</code>中切換配對的快捷鍵<code>%</code></p>

<p><a name="vtr-set-py-py"></a></p>

<h4>python</h4>

<p>提供下列快捷鍵，節錄自Plugin註解:</p>

<ul>
<li><code>]t</code>      &ndash; Jump to beginning of block</li>
<li><code>]e</code>      &ndash; Jump to end of block</li>
<li><code>]v</code>      &ndash; Select (Visual Line Mode) block</li>
<li><code>]&lt;</code>      &ndash; Shift block to left</li>
<li><code>]&gt;</code>      &ndash; Shift block to right</li>
<li><code>]#</code>      &ndash; Comment selection</li>
<li><code>]u</code>      &ndash; Uncomment selection</li>
<li><code>]c</code>      &ndash; Select current/previous class</li>
<li><code>]d</code>      &ndash; Select current/previous function</li>
<li><code>]&lt;up&gt;</code>   &ndash; Jump to previous line with the same/lower indentation</li>
<li><code>]&lt;down&gt;</code> &ndash; Jump to next line with the same/lower indentation</li>
</ul>


<p><a name="vtr-set-py-id"></a></p>

<h4>indentpython</h4>

<p>確保你的程式碼符合<a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>的indent規範</p>

<p><a name="vtr-set-misc"></a></p>

<h3>和Plugin 無關的設定</h3>

<p>以下都加在<code>.vimrc中</code>，建議加到<code>Vundle</code>設定結束後以確保可能會用到的Plugin已經啟動</p>

<p><a name="vtr-set-misc-ed"></a></p>

<h4>編輯器和顯示特殊字元相關設定</h4>

<ul>
<li>設定gvim 的配色，請自行找Color scheme

<ul>
<li><code>colorscheme koehler</code></li>
</ul>
</li>
<li>設定gvim 的字型和大小

<ul>
<li><code>set guifont=Inconsolata\ for\ Powerline\ 32</code></li>
</ul>
</li>
<li>將找到的字串設成高亮度

<ul>
<li><code>set hlsearch</code></li>
</ul>
</li>
<li>游標在的該行背景高亮度

<ul>
<li><code>set cursorline</code></li>
</ul>
</li>
<li>顯示行號

<ul>
<li><code>set nu</code></li>
</ul>
</li>
<li>第八十字元地方顯示高亮度區塊（這是連續兩個描述)

<ul>
<li><code>set colorcolumn=80</code></li>
<li><code>highlight ColorColumn guibg=#202020</code></li>
</ul>
</li>
<li>顯示tab （這是連續兩個描述)

<ul>
<li><code>set listchars=tab:»\</code>

<ul>
<li><strong>注意<code>\</code>後面有一個空白</strong></li>
</ul>
</li>
<li><code>set list</code></li>
</ul>
</li>
</ul>


<p>效果如下圖
<img src=/images/vim_ind9.jpg></p>

<p><a name="vtr-set-misc-ind"></a></p>

<h4>Indent相關設定</h4>

<ul>
<li>Tab相關設定

<ul>
<li><code>set ts=4</code>

<ul>
<li>tab space 為4個字元</li>
</ul>
</li>
<li><code>set expandtab</code>

<ul>
<li>不使用tab，用空白字元代替</li>
</ul>
</li>
<li><code>set shiftwidth=4</code>

<ul>
<li>Auto indent的移動字元數量</li>
</ul>
</li>
</ul>
</li>
<li>visual 模式下一次移動一個indent

<ul>
<li><code>vnoremap &lt; &lt;gv</code>

<ul>
<li>往左移動一個indent</li>
</ul>
</li>
<li><code>vnoremap &gt; &gt;gv</code>

<ul>
<li>往右移動一個indent</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><a name="vtr-set-misc-msc"></a></p>

<h4>其他</h4>

<ul>
<li><code>set clipboard+=unnamed</code>

<ul>
<li>PRIMARY selection的register <code>"*</code>包含vim的unnamed register。白話講就是其他的APP如gedit中滑鼠選字後可以用<code>"*p</code>貼到vim，同樣的<code>"*y6y</code>的結果可以貼在其他的APP如gedit上。這部份有vim <code>register</code>副本，建議到參考資料的副本區一讀。再次感謝<a href="http://scottt.tw/">Scott</a>大大。</li>
</ul>
</li>
</ul>


<p><a name="vtr-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://github.com/VundleVim/Vundle.vim">Vundle Github</a></li>
<li><a href="https://github.com/vim-airline/vim-airline">vim-airline</a></li>
<li><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></li>
<li><a href="https://github.com/powerline/fonts">Powerline fonts</a></li>
<li><a href="https://majutsushi.github.io/tagbar/">Tagbar</a></li>
<li><a href="https://github.com/Yggdroot/indentLine">indentLine</a></li>
<li><a href="https://github.com/ntpeters/vim-better-whitespace">Vim Better Whitespace Plugin</a></li>
<li><a href="https://github.com/chazy/cscope_maps">cscope maps</a></li>
<li><a href="https://github.com/vim-scripts/taglist.vim">taglist</a></li>
<li><a href="https://github.com/scrooloose/nerdtree">Nerd Tree</a></li>
<li><a href="https://github.com/wesleyche/SrcExpl">Source Explorer</a></li>
<li><a href="https://github.com/wesleyche/Trinity">Trinity</a></li>
<li><a href="http://stackoverflow.com/questions/4998582/show-whitespace-characters-in-gvim">Stackoverflow: Show white space and tab in vim</a></li>
<li>Python 相關

<ul>
<li>Plugins

<ul>
<li><a href="https://github.com/python-mode/python-mode">Python Mode</a></li>
<li><a href="https://github.com/vim-scripts/python.vim">Python</a></li>
<li><a href="https://github.com/vim-scripts/indentpython.vim">Indent Python</a></li>
<li><a href="https://github.com/vim-syntastic/syntastic">Syntax checking hacks for vim</a></li>
<li><a href="https://github.com/vim-scripts/python_match.vim">python_match</a></li>
<li><a href="https://stackoverflow.com/questions/19209139/syntastic-and-python-mode-together">Stackoverflow: Syntastic and Python-mode together?
</a></li>
</ul>
</li>
<li><code>vim</code>設定相關

<ul>
<li><a href="https://wiki.python.org/moin/Vim">Python Wiki: vim</a></li>
<li><a href="https://realpython.com/vim-and-python-a-match-made-in-heaven/">VIM and Python – A Match Made in Heaven</a></li>
</ul>
</li>
</ul>
</li>
<li>和plugin無關的vim trace code資料

<ul>
<li><a href="http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/">給程式設計師的Vim入門圖解說明</a></li>
<li><a href="http://wen00072.github.io/blog/2014/11/24/the-skin-slides-to-trace-code-on-line/">Trace 程式碼之皮投影片上線</a></li>
</ul>
</li>
<li>副本: vim 的register概念

<ul>
<li><a href="http://usevim.com/2012/04/13/registers/">usevim: Vim 101: Registers</a></li>
<li><a href="http://stackoverflow.com/questions/11489428/how-to-make-vim-paste-from-and-copy-to-systems-clipboard">Stackoverflow: How to make vim paste from (and copy to) system&rsquo;s clipboard?</a></li>
</ul>
</li>
</ul>


<p><a name="vtr-pkg"></a></p>

<h2>懶人包</h2>

<ul>
<li>安裝相關軟體，Vundle和airline字型</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sudo apt-get install -y exuberant-ctags cscope vim-gtk git flake8 python-rope pylint
</span><span class='line'>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</span><span class='line'>git clone https://github.com/powerline/fonts
</span><span class='line'>cd fonts &amp;&amp; ./install.sh
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>剪貼下面的文字並存放到 ~/.vimrc</li>
</ul>


<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Start vundle
</span><span class='line'>&quot;====================================================================
</span><span class='line'>set nocompatible              &quot; be iMproved, required
</span><span class='line'>filetype off                  &quot; required
</span><span class='line'>
</span><span class='line'>&quot; set the runtime path to include Vundle and initialize
</span><span class='line'>set rtp+=~/.vim/bundle/Vundle.vim
</span><span class='line'>call vundle#begin()
</span><span class='line'>
</span><span class='line'>&quot; alternatively, pass a path where Vundle should install plugins
</span><span class='line'>&quot;call vundle#begin(&#39;~/some/path/here&#39;)
</span><span class='line'>
</span><span class='line'>&quot; let Vundle manage Vundle, required
</span><span class='line'>Plugin &#39;VundleVim/Vundle.vim&#39;
</span><span class='line'>
</span><span class='line'>&quot;===============================================================
</span><span class='line'>&quot; Write your plugins here
</span><span class='line'>&quot;===============================================================
</span><span class='line'>&quot; Layouts
</span><span class='line'>Plugin &#39;Yggdroot/indentLine&#39;
</span><span class='line'>Plugin &#39;ntpeters/vim-better-whitespace&#39;
</span><span class='line'>
</span><span class='line'>&quot; Markdown
</span><span class='line'>Plugin &#39;vim-pandoc/vim-pandoc-syntax&#39;
</span><span class='line'>
</span><span class='line'>&quot; Python related
</span><span class='line'>Plugin &#39;python-mode/python-mode&#39;
</span><span class='line'>Plugin &#39;vim-scripts/indentpython.vim&#39;
</span><span class='line'>Plugin &#39;vim-syntastic/syntastic&#39;
</span><span class='line'>Plugin &#39;vim-scripts/python_match.vim&#39;
</span><span class='line'>Plugin &#39;vim-scripts/python.vim&#39;
</span><span class='line'>
</span><span class='line'>&quot; Misc tools
</span><span class='line'>Plugin &#39;kien/ctrlp.vim&#39;
</span><span class='line'>Plugin &#39;vim-airline/vim-airline&#39;
</span><span class='line'>Plugin &#39;tpope/vim-fugitive&#39;
</span><span class='line'>Plugin &#39;Valloric/YouCompleteMe&#39;
</span><span class='line'>Plugin &#39;chazy/cscope_maps&#39;
</span><span class='line'>Plugin &#39;vim-scripts/taglist.vim&#39;
</span><span class='line'>Plugin &#39;scrooloose/nerdtree&#39;
</span><span class='line'>Plugin &#39;wesleyche/SrcExpl&#39;
</span><span class='line'>Plugin &#39;wesleyche/Trinity&#39;
</span><span class='line'>Plugin &#39;majutsushi/tagbar&#39;
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Run vundle
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; All of your Plugins must be added before the following line
</span><span class='line'>call vundle#end()            &quot; required
</span><span class='line'>filetype plugin indent on    &quot; required
</span><span class='line'>&quot; To ignore plugin indent changes, instead use:
</span><span class='line'>&quot;filetype plugin on
</span><span class='line'>&quot;
</span><span class='line'>&quot; Brief help
</span><span class='line'>&quot; :PluginList       - lists configured plugins
</span><span class='line'>&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
</span><span class='line'>&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache
</span><span class='line'>&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
</span><span class='line'>&quot;
</span><span class='line'>&quot; see :h vundle for more details or wiki for FAQ
</span><span class='line'>&quot; Put your non-Plugin stuff after this line
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Tagbar Settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Open and close the tagbar separately
</span><span class='line'>nmap &lt;F7&gt; :TagbarToggle&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Trinity Settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Open and close all the three plugins on the same time
</span><span class='line'>nmap &lt;F8&gt;  :TrinityToggleAll&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>&quot; Open and close the Source Explorer separately
</span><span class='line'>nmap &lt;F9&gt;  :TrinityToggleSourceExplorer&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>&quot; Open and close the Taglist separately
</span><span class='line'>nmap &lt;F10&gt; :TrinityToggleTagList&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>&quot; Open and close the NERD Tree separately
</span><span class='line'>nmap &lt;F11&gt; :TrinityToggleNERDTree&lt;CR&gt;
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Airline settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>let g:airline_powerline_fonts = 1
</span><span class='line'>set laststatus=2
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; syntastic settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>set statusline+=%#warningmsg#
</span><span class='line'>set statusline+=%{SyntasticStatuslineFlag()}
</span><span class='line'>set statusline+=%*
</span><span class='line'>
</span><span class='line'>let g:syntastic_always_populate_loc_list = 1
</span><span class='line'>let g:syntastic_auto_loc_list = 1
</span><span class='line'>let g:syntastic_check_on_open = 1
</span><span class='line'>let g:syntastic_check_on_wq = 0
</span><span class='line'>autocmd VimEnter * SyntasticToggleMode &quot; disable syntastic by default
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; pymode settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>let g:pymode_lint = 0    &quot; Prefer to use syntastic to check lint
</span><span class='line'>let g:pymode_folding = 0 &quot; Unfold all
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Editor and display Settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>colorscheme koehler         &quot; Color for gvim
</span><span class='line'>
</span><span class='line'>set hlsearch                &quot; Highlight search
</span><span class='line'>set guifont=Inconsolata\ for\ Powerline\ 32 &quot; Font
</span><span class='line'>set cursorline              &quot; Hight background at current cursor line
</span><span class='line'>set nu                      &quot; Display line numbers
</span><span class='line'>
</span><span class='line'>&quot; Set background color at colum 80
</span><span class='line'>set colorcolumn=80
</span><span class='line'>highlight ColorColumn guibg=#202020
</span><span class='line'>
</span><span class='line'>&quot; Show tabs
</span><span class='line'>set listchars=tab:\|.
</span><span class='line'>set list
</span><span class='line'>
</span><span class='line'>&quot; Ensure syntax is on
</span><span class='line'>syntax on
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Indent Settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Tabs
</span><span class='line'>set ts=4
</span><span class='line'>set expandtab
</span><span class='line'>set shiftwidth=4
</span><span class='line'>
</span><span class='line'>&quot; visual indent shift
</span><span class='line'>vnoremap &lt; &lt;gv
</span><span class='line'>vnoremap &gt; &gt;gv
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; MISC Settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Shared unamed regitered with primary selection
</span><span class='line'>set clipboard+=unnamed
</span><span class='line'>
</span><span class='line'>&quot; uft-8 encoding: https://stackoverflow.com/questions/16507777/set-encoding-and-fileencoding-to-utf-8-in-vim
</span><span class='line'>set encoding=utf-8
</span><span class='line'>set fileencoding=utf-8
</span><span class='line'>
</span><span class='line'>&quot;====================================================================
</span><span class='line'>&quot; Python Settings
</span><span class='line'>&quot;====================================================================
</span><span class='line'>au BufNewFile,BufRead *.py
</span><span class='line'>    \ set tabstop=4 |
</span><span class='line'>    \ set softtabstop=4 |
</span><span class='line'>    \ set shiftwidth=4 |
</span><span class='line'>    \ set textwidth=79 |
</span><span class='line'>    \ set expandtab |
</span><span class='line'>    \ set autoindent |
</span><span class='line'>    \ set fileformat=unix
</span><span class='line'>let python_highlight_all=1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>gvim -> <code>:PluginInstall</code> 安裝Plugin重新開啟收工</li>
</ul>


<h3>其他</h3>

<ul>
<li>cscope產生database供vim使用

<ul>
<li><code>cscope -bqkR</code>

<ul>
<li>k表示使用kernel mode，不把/usr/include之類的加入資料庫。Cross compile也不會使用host 的header file，所以請自行斟酌。其他參數請自己問男人。</li>
</ul>
</li>
</ul>
</li>
<li>ctags產生database供vim使用

<ul>
<li><code>ctags -R</code></li>
</ul>
</li>
<li>要在vim使用到ctags和cscope的話，請記得<strong>vim一定要開在database同一層目錄!</strong></li>
</ul>


<p>舉例來說，你在/tmp/linux-stable目錄下了上面兩個指令。要開啟檔案請在/tmp/linux-stable目錄中指定對應路徑。範例如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user@host:/tmp/linux-stable$ gvim fs/select.c
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix: Qemu X86_64下gdb Debug kernel出現Remote &#39;g' Packet Reply Is Too Long:]]></title>
    <link href="http://wen00072.github.io/blog/2017/06/04/qemu-x86-64-with-gdb/"/>
    <updated>2017-06-04T16:11:15+08:00</updated>
    <id>http://wen00072.github.io/blog/2017/06/04/qemu-x86-64-with-gdb</id>
    <content type="html"><![CDATA[<h2>問題描述</h2>

<p>本篇文章主要是解決使用gdb 設Qemu x86_64 模擬執行x86_64 buildroot kernel開機的中斷點時遇到下面的錯誤訊息</p>

<p><strong><font color="red">Remote &#39;g&#8217; packet reply is too long:</font></strong></p>

<p>詳細訊息如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0x0000000000000000 in irq_stack_union ()
</span><span class='line'>(gdb) b x86_64_start_kernel
</span><span class='line'>Breakpoint 1 at 0xffffffff8188429b: file arch/x86/kernel/head64.c, line 134.
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>Remote 'g' packet reply is too long: 9b428881ffffffff0000000000000000010100c000000000ffffffff00000000804001000000000080400100000000000000000000000000f03f8081ffffffff00a080010000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000009b428881ffffffff4600000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000</span></code></pre></td></tr></table></div></figure>


<h2>目錄</h2>

<ul>
<li><a href="#qxg-env">測試環境</a></li>
<li><a href="#qxg-prepare">buildroot 事先準備</a></li>
<li><a href="#qxg-fix">gdb 錯誤訊息解法</a></li>
<li><a href="#qxg-pkg">懶人包</a>

<ul>
<li><a href="#qxg-tty">讓qemu-system-x86_64 在console 可以登入</a></li>
</ul>
</li>
<li><a href="#qxg-ref">參考資料</a></li>
</ul>


<p><a name="qxg-env"></a></p>

<h2>測試環境</h2>

<ul>
<li><a href="https://git.buildroot.net/buildroot">Buildroot</a>

<ul>
<li>Commit: <code>bfc90a5621c680000f8b19e8afea944da5c2a469</code></li>
</ul>
</li>
<li>Target kernel 版本</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># uname -a
</span><span class='line'>Linux buildroot 4.9.6 #2 SMP Sun Jun 4 18:46:27 CST 2017 x86_64 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Qemu 執行指令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ qemu-system-x86_64 -M pc -kernel output/images/bzImage                        \
</span><span class='line'>                     -drive file=output/images/rootfs.ext2,if=virtio,format=raw \
</span><span class='line'>                     -append "root=/dev/vda console=ttyS0"                      \
</span><span class='line'>                     -net nic,model=virtio -net user -nographic -S -s</span></code></pre></td></tr></table></div></figure>


<p>基本上是從<a href="https://git.buildroot.net/buildroot/tree/board/qemu/x86_64/readme.txt">這邊</a>衍生出來的，挑幾個重點</p>

<ul>
<li><code>-append "root=/dev/vda console=ttyS0"</code>

<ul>
<li>指定serial port console，如此一來就可以在terminal 直接顯示Qemu 的執行文字，不過你需要<a href="#qxg-tty">修改</a>rootfs 的<code>/etc/inittab</code>才能在terminal login</li>
</ul>
</li>
<li><code>-S -s</code>

<ul>
<li>開機的時候就停下來，並開啟port 1234讓gdb從遠端連入除錯</li>
</ul>
</li>
<li><code>-nographic</code>

<ul>
<li>懶得跳一個視窗，直接terminal當console使用</li>
</ul>
</li>
</ul>


<p><a name="qxg-prepare"></a></p>

<h2>buildroot 事先準備</h2>

<ol>
<li>下載buildroot

<ul>
<li><code>git clone https://git.buildroot.net/buildroot</code></li>
</ul>
</li>
<li>設定預設config

<ul>
<li><code>make qemu_x86_64_defconfig</code></li>
</ul>
</li>
<li>手動設定buildroot config如gcc版本，客製化rootfs套件等

<ul>
<li><code>make menuconfig</code></li>
</ul>
</li>
<li>設定Linux kernel 選項，主要是打開debug symbol

<ul>
<li><code>make linux-menuconfig</code></li>
</ul>
</li>
<li>編譯rootfs及kernel

<ul>
<li><code>make</code></li>
</ul>
</li>
<li><a href="#qxg-tty">設定可以從console 登入</a></li>
</ol>


<p><a name="qxg-fix"></a></p>

<h2>gdb 錯誤訊息解法</h2>

<p>從<a href="http://wiki.osdev.org/QEMU_and_GDB_in_long_mode">OSDev: QEMU and GDB in long mode</a>可以看到可以使用下面指令頂著先（workaround）</p>

<ul>
<li><code>disconnect</code></li>
<li><code>set arch i386:x86-64</code></li>
<li><code>target remote 127.0.0.1:1234</code></li>
</ul>


<p>然而作為組裝工，信奉偷懶就是美德，每次要打這麼多指令實在很麻煩。因此我將這些麻煩的方式使用下面的指令自動化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb ./vmlinux  -ex "target remote localhost:1234"       \
</span><span class='line'>               -ex "break x86_64_start_kernel"          \
</span><span class='line'>               -ex "continue"                           \
</span><span class='line'>               -ex "disconnect"                         \
</span><span class='line'>               -ex "set architecture i386:x86-64:intel" \
</span><span class='line'>               -ex "target remote localhost:1234"</span></code></pre></td></tr></table></div></figure>


<p>執行後畫面輸出部份節錄如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Reading symbols from ./vmlinux...done.
</span><span class='line'>Remote debugging using localhost:1234
</span><span class='line'>0x0000000000000000 in irq_stack_union ()
</span><span class='line'>Breakpoint 1 at 0xffffffff8188429b: file arch/x86/kernel/head64.c, line 134.
</span><span class='line'>Continuing.
</span><span class='line'>Remote 'g' packet reply is too long: 9b428881ffffffff0000000000000000010100c000000000ffffffff00000000804001000000000080400100000000000000000000000000f03f8081ffffffff00a080010000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000009b428881ffffffff4600000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000
</span><span class='line'>Ending remote debugging.
</span><span class='line'>The target architecture is assumed to be i386:x86-64:intel
</span><span class='line'>Remote debugging using localhost:1234
</span><span class='line'>x86_64_start_kernel (real_mode_data=0x14080 &lt;cpu_tss+6848&gt; &lt;error: Cannot access memory at address 0x14080&gt;) at arch/x86/kernel/head64.c:134
</span><span class='line'>134   {
</span><span class='line'>(gdb) n
</span><span class='line'>151       cr4_init_shadow();</span></code></pre></td></tr></table></div></figure>


<p>由於gdb command file 遇到錯誤就會停下來，所以把上面的指令放到一個檔案中，執行gdb時將會停在<code>continue</code>這邊，目前懶的找解法了。有興趣的朋友可以自行研究。</p>

<p><a name="qxg-pkg"></a></p>

<h2>懶人包</h2>

<ul>
<li>Buildroot</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://git.buildroot.net/buildroot
</span><span class='line'>cd buildroot
</span><span class='line'>make qemu_x86_64_defconfig
</span><span class='line'>make menuconfig
</span><span class='line'>make linux-menuconfig
</span><span class='line'>make</span></code></pre></td></tr></table></div></figure>


<ul>
<li>啟動Qemu
假設在buildroot top directory下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu-system-x86_64 -M pc -kernel output/images/bzImage                          \
</span><span class='line'>                     -drive file=output/images/rootfs.ext2,if=virtio,format=raw \
</span><span class='line'>                     -append "root=/dev/vda console=ttyS0"                      \
</span><span class='line'>                     -net nic,model=virtio -net user -nographic -S -s</span></code></pre></td></tr></table></div></figure>


<ul>
<li>gdb
假設在buildroot top directory下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd output/build/linux-4.9.6
</span><span class='line'>gdb ./vmlinux  -ex "target remote localhost:1234"       \
</span><span class='line'>               -ex "break x86_64_start_kernel"          \
</span><span class='line'>               -ex "continue"                           \
</span><span class='line'>               -ex "disconnect"                         \
</span><span class='line'>               -ex "set architecture i386:x86-64:intel" \
</span><span class='line'>               -ex "target remote localhost:1234"</span></code></pre></td></tr></table></div></figure>


<p><a name="qxg-tty"></a></p>

<h3>讓qemu-system-x86_64 在console 可以登入</h3>

<p>在<code>/etc/inittab</code>加入下面這行<code>ttyS0::respawn:/sbin/getty -L  ttyS0 0 vt100 # GENERIC_SERIAL</code></p>

<figure class='code'><figcaption><span>/etc/inittab</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'> # Put a getty on the serial port
</span><span class='line'> tty1::respawn:/sbin/getty -L  tty1 0 vt100 # GENERIC_SERIAL
</span><span class='line'>+ttyS0::respawn:/sbin/getty -L  ttyS0 0 vt100 # GENERIC_SERIAL
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><a name="qxg-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://wiki.osdev.org/QEMU_and_GDB_in_long_mode">OSDev: QEMU and GDB in long mode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash下自動完成gvim --remote-tab]]></title>
    <link href="http://wen00072.github.io/blog/2017/03/28/gvim-remote-tabzi-dong-wan-cheng/"/>
    <updated>2017-03-28T21:15:16+08:00</updated>
    <id>http://wen00072.github.io/blog/2017/03/28/gvim-remote-tabzi-dong-wan-cheng</id>
    <content type="html"><![CDATA[<p>在gvim需要開tab要打<code>--remote-tab</code>，打久就開始厭煩想偷懶。後來整理網路上的bash_completion相關資料拼湊一個堪用的版本分享一下。因為我只是想偷懶，所以完全沒有去了解bash_completion的細節。嘛，反正可以組裝需要的功能就好。</p>

<h2>目錄</h2>

<ul>
<li><a href="#ac_env">測試環境</a></li>
<li><a href="#ac_inst">安裝方式</a></li>
<li><a href="#ac_use">使用方式</a></li>
<li><a href="#ac_gvf">gvim bash_completion script</a></li>
<li><a href="#ac_ref">參考資料</a></li>
</ul>


<p><a name="ac_env"></a></p>

<h2>測試環境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lsb_release  -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 16.04.2 LTS
</span><span class='line'>Release:  16.04
</span><span class='line'>Codename: xenial</span></code></pre></td></tr></table></div></figure>


<p><a name="ac_inst"></a></p>

<h2>安裝方式</h2>

<ol>
<li>將<a href="#ac_gvf">下面</a>文字貼到編輯器，存成<code>/etc/bash_completion.d/gvim</code></li>
<li>使用下面指令新增gvim completion</li>
</ol>


<figure class='code'><figcaption><span>新增gvim completion指令</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ . /etc/bash_completion.d/gvim
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><a name="ac_use"></a></p>

<h2>使用方式</h2>

<ul>
<li>一般使用，直接gvim <code>tab</code> 顯示檔案或目錄</li>
</ul>


<figure class='code'><figcaption><span>新增gvim completion指令</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ gvim `tab`
</span><span class='line'>changelog.Debian.gz  copyright            README.emacs         RelNotes/
</span><span class='line'>changelog.gz         NEWS.Debian.gz       README.md
</span><span class='line'>contrib/             README.Debian        README.source
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>要使用tab時，下gvim -<code>tab</code> 就會自動填入<code>--remote-tab</code>，接下來再按<code>tab</code>即可選擇檔案或目錄</li>
</ul>


<figure class='code'><figcaption><span>新增gvim completion指令</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ gvim --remote-tab
</span><span class='line'>changelog.Debian.gz  copyright            README.emacs         RelNotes/
</span><span class='line'>changelog.gz         NEWS.Debian.gz       README.md
</span><span class='line'>contrib/             README.Debian        README.source
</span></code></pre></td></tr></table></div></figure>


<p><a name="ac_gvf"></a></p>

<h2>gvim bash_completion script</h2>

<figure class='code'><figcaption><span>gvim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>_gvim<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span>cur prev
</span><span class='line'>    <span class="nv">COMPREPLY</span><span class="o">=()</span>
</span><span class='line'>    <span class="nv">cur</span><span class="o">=</span><span class="s2">&quot;${COMP_WORDS[COMP_CWORD]}&quot;</span>
</span><span class='line'>    <span class="nv">prev</span><span class="o">=</span><span class="s2">&quot;${COMP_WORDS[COMP_CWORD-1]}&quot;</span>
</span><span class='line'>    <span class="nv">opts</span><span class="o">=</span><span class="s2">&quot;--remote-tab&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="k">${</span><span class="nv">cur</span><span class="k">}</span> <span class="o">==</span> -* <span class="o">]]</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">&quot;${opts}&quot;</span> -- <span class="k">${</span><span class="nv">cur</span><span class="k">})</span> <span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> 0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>    compopt -o default<span class="p">;</span> <span class="nv">COMPREPLY</span><span class="o">=()</span>
</span><span class='line'>    <span class="k">return</span> 0
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -F _gvim gvim
</span></code></pre></td></tr></table></div></figure>


<p><a name="ac_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://debian-administration.org/article/316/An_introduction_to_bash_completion_part_1">An introduction to bash completion: part 1</a></li>
<li><a href="https://debian-administration.org/article/317/An_introduction_to_bash_completion_part_2">An introduction to bash completion: part 2</a></li>
<li><a href="http://stackoverflow.com/questions/12933362/getting-compgen-to-include-slashes-on-directories-when-looking-for-files">stackoverflow: Getting compgen to include slashes on directories when looking for files</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[筆記 - GNU Coding Style]]></title>
    <link href="http://wen00072.github.io/blog/2016/12/18/review-gnu-coding-style/"/>
    <updated>2016-12-18T21:34:23+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/12/18/review-gnu-coding-style</id>
    <content type="html"><![CDATA[<p>這是沒事亂看的，主要找和C 語言相關的描述，就不要在意文章組織和可讀性了。</p>

<p>閱讀版本：<code>July 25, 2016</code></p>

<h2>CH 3</h2>

<ul>
<li>要保證C程式碼可移植性，compile flag可以使用<code>--ansi</code>, <code>--posix</code>, <code>--compatible</code></li>
<li>可以使用下面的方式取代原本的巨集條件編譯，現在的gcc已經可以產生一樣的結果了。</li>
</ul>


<figure class='code'><figcaption><span>原本程式碼</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef HAS_FOO</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>建議使用方式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">HAS_FOO</span><span class="p">)</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ch 4</h2>

<ul>
<li><code>--pedantic</code>：產生所有ISO C和ISO C++規範的警告訊息，並將所有C的extension退貨</li>
<li>冷門：POSIX 2.0規範du/df的unit是512 bytes</li>
</ul>


<h3>4.2 Writing Robust Programs</h3>

<ul>
<li>使用動態配置資料方式避免資料長度限制，包含檔案名稱長度、一行長度等</li>
<li>讀檔案時不得丟棄<code>NUL</code>字元以及不可列印字元，並需相容多位元編碼方式如<code>UTF-8</code></li>
<li>除非要刻意忽略錯誤，使用system call必定檢查回傳值，並使用<code>perror</code>或<code>strerror</code>等方式列印出錯誤訊息</li>
<li>使用<code>mallic</code>及<code>relloc</code>一定要檢查回傳值是否為NULL。當使用<code>relloc</code>要求分配比原本空間更小時更需要注意，因為實作關係可能最後分配的空間block可能和原本的不同</li>
<li>使用<code>free</code>後就不要留戀還在裏面的資料了吧</li>
<li>一旦<code>malloc</code>出現錯誤時，非互動程式請將他視為嚴重錯誤。互動程式就儘早自殺(<code>abort()</code>)吧</li>
<li>使用<code>getopt_long</code>處理命令列參數</li>
<li>避免操作低階UNIX介面，以減少相容性問題</li>
<li>在程式中檢查到不可能發生的狀況，直接給他死。既然不可能發生了，顯然那邊出大問題，儘早發現儘早處理。因為就是不可能發生，而死掉一定從這邊找起，寫程式時就在這邊提供更多註解和資訊吧</li>
<li>使用全域變數或static 變數儘量給初值。（不確定是否有看懂，<a href="https://www.gnu.org/prep/standards/html_node/Semantics.html#Semantics">出處</a>）</li>
<li>不要從回傳值傳回發生錯誤的次數，因為只有256個狀態而已，很容易overflow的。</li>
<li>使用存放暫存檔到<code>$TMP_DIR</code>環境變數而不是閉著眼睛寫到<code>/tmp</code>下面</li>
<li>同樣的，暫存檔請將權限設為0600確保資訊不會洩漏</li>
</ul>


<h3>CH 4.3 Library Behavior</h3>

<ul>
<li>儘量讓函數reentrant</li>
<li>Name covention 很重要，因為library是給別人用，粗心大意就出現name conflict 的問題，以下是GNU的建議

<ul>
<li>external 函數和變數需加<code>prefix</code>，prefix為兩個字元以上（後面英文太爛看不懂）</li>
<li>external 但是不想讓使用者看到（或是文件不會提到的）的函數以<code>_</code>開頭加上prefix用來辨識這是內部函數</li>
<li>內部static 就請自便</li>
</ul>
</li>
</ul>


<h3>CH 4.4 Formatting Error Messages</h3>

<ul>
<li>錯誤訊息格式，我只挑一個，有興趣看全文請參考<a href="https://www.gnu.org/prep/standards/html_node/Errors.html#Errors">這邊</a>

<ul>
<li><code>sourcefile:lineno: message</code></li>
</ul>
</li>
</ul>


<h3><a href="https://www.gnu.org/prep/standards/html_node/User-Interfaces.html#User-Interfaces">CH 4.5 Standards for Interfaces Generally</a></h3>

<p>很奇怪的，單字句子都看懂，就是不懂他要表達啥。只能猜測說不要生出一堆很功能類似的執行檔，而是用最少執行檔加上參數取代。以及執行檔儘量device independent</p>

<h3>4.12 File Usage</h3>

<p>檔案有可能會存放在readonly FS，如果要寫東西寫到必定是可寫的目錄如<code>/var</code>或是<code>/tmp</code>目錄中</p>

<h2>Writing C</h2>

<ul>
<li>單行最多79個字元</li>
</ul>


<h3>註解</h3>

<ul>
<li>檔案開頭請加註解說明該檔案的用途</li>
<li>用英文寫註解</li>
<li>每個函數都要說明該函數的用法，參數，回傳值等資訊</li>
<li><code>#endif</code> 後加上對應的<code>#ifdef</code>或<code>#ifndef</code> 說明，範例如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef ASDF</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#else  </span><span class="cm">/* ASDF */</span><span class="cp"></span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* not ASDF */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifnef QWER</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* not QWER */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Clean Use of C Constructs</h3>

<ul>
<li>所有的宣告都要明確，例如不要因為預設回傳值是<code>int</code>就省略要回傳<code>int</code>的函數對應宣告</li>
<li>視情況自行決定是否要使用嚴格的語法檢查如<code>-Wall</code>，編譯器是我們的奴隸，你自己清楚要做什麼就好。不要為了避免嚴格語法檢查硬上一些奇怪的語法導致可讀性變差</li>
<li><code>extern</code> 要嘛全部放在C檔案的同一塊地方，要嘛集中到header file，不要東一撮西一撮。更嚴禁在函數內使用</li>
<li>不要在函數中重複使用一些無意義名稱的變數如<code>tmp</code>之類的，個別變數就給予個別有意義的變數名稱，不要偷懶。也可以在需要的最小scope宣告變數增加可讀性。</li>
<li>變數要注意是否和global 變數或是更大scope名稱相同，您可以開啟<code>-Wshadow</code>協助偵測這類的錯誤</li>
<li>多個變數就個別宣告型態，一方面增加可註解的空間，一方面可讀性也較佳。範例如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Bad */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i_am_bad</span><span class="p">,</span> <span class="n">i_am_super_bad</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Good */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i_am_good</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i_am_better</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不要在判斷式加入assign，這樣很容易出錯，範例如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Bad */</span>
</span><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">my_id</span> <span class="o">=</span> <span class="n">get_id</span><span class="p">(</span><span class="n">my_record</span><span class="p">))</span> <span class="o">!=</span> <span class="n">NONE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Prcess data */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO_DATA</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Good */</span>
</span><span class='line'><span class="n">my_id</span> <span class="o">=</span> <span class="n">get_id</span><span class="p">(</span><span class="n">my_record</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">my_id</span> <span class="o">==</span> <span class="n">NONE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO_DATA</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* Prcess data */</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Naming Variables, Functions, and Files</h3>

<ul>
<li>Global name 要有意義，不要亂取。

<ul>
<li>ps: 個人會加個<code>g</code> prefix提醒一下</li>
</ul>
</li>
<li>縮寫如src等可以使用。但是請確定讀者可以知道該縮寫或是該縮寫可能造成讀者模糊混淆</li>
<li>使用常數時儘量用<code>enum</code>取代巨集</li>
</ul>


<h3>Portability between CPUs</h3>

<p><strong><font color="red">完全看不懂，抱歉</font></strong></p>

<h3>剩下的是平台相容性和國際化字元等，沒興趣所以跳過</h3>

<h3>參考資料</h3>

<ul>
<li><a href="https://www.gnu.org/prep/standards/html_node/">GNU Coding Standards</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel Pratice 0.5: 使用gdb 加 Qemu Trace Linux Kernel Runtime 行為]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/31/trace-linux-kernel-via-qemu-and-gdb/"/>
    <updated>2016-10-31T19:46:25+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/31/trace-linux-kernel-via-qemu-and-gdb</id>
    <content type="html"><![CDATA[<h2>目錄</h2>

<ul>
<li><a href="#lk0_5_env">測試環境</a></li>
<li><a href="#lk0_5_kr">Linux kernel環境設定</a></li>
<li><a href="#lk0_5_test">測試</a>

<ul>
<li><a href="#lk0_5_test_qemu">Qemu</a></li>
<li><a href="#lk0_5_test_gdb">gdb</a></li>
</ul>
</li>
<li><a href="#lk0_5_ref">參考資料</a></li>
<li><a href="#lk0_5_add">補充</a></li>
</ul>


<p><a name="lk0_5_env"></a></p>

<h2>測試環境</h2>

<h3>Host</h3>

<ul>
<li>Host OS</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 14.04.5 LTS
</span><span class='line'>Release:  14.04
</span><span class='line'>Codename: trusty
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Qemu</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>qemu-system-arm --version
</span><span class='line'>QEMU emulator version 2.0.0 <span class="o">(</span>Debian 2.0.0+dfsg-2ubuntu1.27<span class="o">)</span>, Copyright <span class="o">(</span>c<span class="o">)</span> 2003-2008 Fabrice Bellard
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>gdb</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ arm-none-eabi-gdb --version
</span><span class='line'>GNU gdb (GNU Tools for ARM Embedded Processors) 7.10.1.20160923-cvs
</span><span class='line'>Copyright (C) 2015 Free Software Foundation, Inc.
</span><span class='line'>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>buildroot 版本

<ul>
<li>commit hash: <code>14b24726a81b719b35fee70c8ba8be2d682a7313</code></li>
</ul>
</li>
</ul>


<h3>Target</h3>

<ul>
<li>Linux kernerl 版本

<ul>
<li>4.4.2</li>
</ul>
</li>
<li>模擬平台

<ul>
<li>Vexpress</li>
</ul>
</li>
</ul>


<p><a name="lk0_5_kr"></a></p>

<h2>Linux kernel環境設定</h2>

<p>我目前只打開加入debug資訊的選項。接下來重編，編譯的方式請參考<a href="http://wen00072.github.io/blog/2016/10/01/linux-kernel-pratice-0-buildroot-2-customized-kernel/">這邊</a></p>

<ul>
<li>Kernel hacking -> Compile-time checks and compiler options ->

<ul>
<li>Compile the kernel with debug info</li>
</ul>
</li>
</ul>


<p><a name="lk0_5_test"></a></p>

<h2>測試</h2>

<p>依照下面兩個步驟執行</p>

<ol>
<li>執行qemu，並且加入支援gdb以及開始馬上freeze CPU的參數</li>
<li>執行gdb，載入symbol並聯到qemu除錯</li>
</ol>


<p><a name="lk0_5_test_qemu"></a></p>

<h3>Qemu</h3>

<p>基本上就是原本的指令加入兩個選項</p>

<ul>
<li><code>-S</code>

<ul>
<li>qemu一開始立即Freeze CPU</li>
</ul>
</li>
<li><code>-s</code>

<ul>
<li><code>-gdb tcp::1234</code>的縮寫，也就是說gdb可以透過port 1234和連到Qemu除錯</li>
</ul>
</li>
</ul>


<p>假設你在buildroot最上層，就可以使用下面指令執行qemu 並使用gdb 除錯</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>qemu-system-arm -M vexpress-a9 -smp 1 -m 256 \
</span><span class='line'>                -kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage  \
</span><span class='line'>                -dtb /tmp/kernel/linux-stable/vexpress-v2p-ca9.dtb     \
</span><span class='line'>                -drive file=output/images/rootfs.ext2,if=sd,format=raw \
</span><span class='line'>                -append &quot;console=ttyAMA0,115200 root=/dev/mmcblk0&quot;     \
</span><span class='line'>                -serial stdio -net nic,model=lan9118 -net user -s -S
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_5_test_gdb"></a></p>

<h3>gdb</h3>

<p>這邊有點瑣碎，先講一下步驟</p>

<ol>
<li>載入Linux kernel symbol

<ul>
<li>假設你在kernel最上層目錄有三種方式載入

<ul>
<li>直接<code>arm-none-eabi-gdb ./vmlinux</code></li>
<li><code>arm-none-eabi-gdb -ex "file ./vmlinux"</code></li>
<li>進入gdb後打<code>file ./vmlinux</code>指令</li>
</ul>
</li>
</ul>
</li>
<li>連上qemu

<ul>
<li>一樣兩種方式

<ul>
<li><code>arm-none-eabi-gdb -ex "target remote :1234"</code></li>
<li>進入gdb後打<code>target remote :1234</code>指令</li>
</ul>
</li>
</ul>
</li>
<li>設定breakpoint等你要觀察的資訊

<ul>
<li>如<code>b printk</code></li>
</ul>
</li>
<li>告訴qemu開始執行

<ul>
<li><code>continue</code></li>
</ul>
</li>
</ol>


<p>1和2可以一起使用如下</p>

<figure class='code'><figcaption><span>懶人包</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>arm-none-eabi-gdb -ex &quot;file ./vmlinux&quot;  -ex &quot;target remote :1234&quot;
</span></code></pre></td></tr></table></div></figure>


<p>現在看一下操作範例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ arm-none-eabi-gdb -ex &quot;file ./vmlinux&quot;  -ex &quot;target remote :1234&quot;
</span><span class='line'>GNU gdb (GNU Tools for ARM Embedded Processors) 7.10.1.20160923-cvs
</span><span class='line'>...
</span><span class='line'>Reading symbols from ./vmlinux...done.
</span><span class='line'>Remote debugging using :1234
</span><span class='line'>0x60000000 in ?? ()
</span><span class='line'>(gdb) b printk
</span><span class='line'>Breakpoint 1 at 0x800a2260: file kernel/printk/printk.c, line 1900.
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, printk (fmt=0x0 &lt;__vectors_start&gt;) at kernel/printk/printk.c:1900
</span><span class='line'>1900  {
</span><span class='line'>(gdb) bt
</span><span class='line'>#0  printk (fmt=0x0 &lt;__vectors_start&gt;) at kernel/printk/printk.c:1900
</span><span class='line'>#1  0x806178e0 in start_kernel () at init/main.c:508
</span><span class='line'>#2  0x6000807c in ?? ()
</span><span class='line'>Backtrace stopped: previous frame identical to this frame (corrupt stack?)
</span></code></pre></td></tr></table></div></figure>


<p>另外如果有興趣使用Linux kernel提供的指令，在kernel config設定打開gdb script後，可以使用下面的方式在啟動gdb時載入，只要把下面的描述加到你的<code>~/.gdbinit</code>即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>add-auto-load-safe-path /tmp/kernel/scripts/gdb/vmlinux-gdb.py
</span></code></pre></td></tr></table></div></figure>


<p>那麼你就可以使用Linux kernel提供的gdb script，詳細的設定和指令說明在<a href="http://lxr.free-electrons.com/source/Documentation/gdb-kernel-debugging.txt?v=4.4">這邊</a>。</p>

<p><a name="lk0_5_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel">Linux Magazine: Qemu and the Kernel</a></li>
<li><a href="http://lxr.free-electrons.com/source/Documentation/gdb-kernel-debugging.txt?v=4.4">Linux kernel document (4.4): Debugging kernel and modules via gdb</a>

<ul>
<li>感謝學弟ajmachine 回報，原本<a href="https://www.kernel.org/doc/Documentation/gdb-kernel-debugging.txt">官方網站連結</a>失效，找一個代替。</li>
</ul>
</li>
<li><a href="http://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu">stackoverflow: How to debug the Linux kernel with GDB and QEMU?</a></li>
</ul>


<p><a name="lk0_5_add"></a></p>

<h2>補充</h2>

<p>當初犯了蠢事載入不正確的kernel image導致一堆不必要的除錯。不過多學到一個gdb Python script除錯指令，當Python script發生exception時可以用下面的指令印出Python錯誤call stack</p>

<ul>
<li>gdb內：<code>set python print-stack full</code></li>
<li>啟動gdb時加入參數： <code>-ex "set python print-stack full"</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel Pratice 0: Buildroot (2/2) - 自行編譯kernel]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/31/linux-kernel-pratice-0-buildroot-2-customized-kernel/"/>
    <updated>2016-10-31T09:40:54+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/31/linux-kernel-pratice-0-buildroot-2-customized-kernel</id>
    <content type="html"><![CDATA[<h2>前情提要</h2>

<p><a href="http://wen00072.github.io/blog/2016/10/29/linux-kernel-pratice-0-buildroot-setup-with-qemu/">上一篇</a>提到，設定實習環境的目標有：</p>

<ol>
<li>可以使用ARM 平台。一方面追求流行，一方面我不想再開x86這個副本</li>
<li>可以方便地建立ARM平台的Linux Rootfs和kernel版本</li>
<li>可以方便地更改指定要編譯的Kernel版本</li>
<li>透過Qemu ，使用2的Rootfs和kernel開機</li>
<li>透過Qemu和搭配的工具可以分析Linux kernel的run time 行為</li>
</ol>


<p>今天就是來解決3 的項目。更細分的話，這次目標是</p>

<ol>
<li>使用官方Linux kernel 編譯Vexpress 平台kernel及產生Buildroot支援的開發版device tree</li>
<li>編譯出來的kernel binary可以在Qemu上順利載入</li>
<li>編譯出來的kernel binary可以順利的載入buildroot產生的rootfs，以及網路介面和相關設備</li>
</ol>


<h2>目錄</h2>

<ul>
<li><a href="#lk0_1_env">測試環境</a></li>
<li><a href="#lk0_1_dl">下載Linux Kernel Source</a></li>
<li><a href="#lk0_1_conf">設定和編譯</a>

<ul>
<li><a href="#lk0_1_conf_sw">切換版本</a></li>
<li><a href="#lk0_1_conf_arm_def">設定ARM Vexpress預設config</a></li>
<li><a href="#lk0_1_conf_qemu">更改Kernel Config讓Qemu使用</a></li>
<li><a href="#lk0_1_conf_build">編譯</a>

<ul>
<li><a href="#lk0_1_conf_build_broot">Buildroot</a></li>
<li><a href="#lk0_1_conf_build_lk">Linux kernel</a></li>
</ul>
</li>
<li><a href="#lk0_1_conf_dtb">產生Device tree binary</a></li>
</ul>
</li>
<li><a href="#lk0_1_test">測試</a></li>
<li><a href="#lk0_1_ref">參考資料</a></li>
<li><a href="#lk0_1_app">附錄</a>

<ul>
<li><a href="#lk0_1_app_brot">使用Buildroot 內建套件指定編譯Linux kernel 4.2.2</a></li>
</ul>
</li>
</ul>


<p><a name="lk0_1_env"></a></p>

<h2>測試環境</h2>

<p>做組裝的最重要的原則之一就是要能夠reproduce，所以交代測試環境是一定要的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 14.04.5 LTS
</span><span class='line'>Release:  14.04
</span><span class='line'>Codename: trusty
</span><span class='line'>
</span><span class='line'>$ git --version
</span><span class='line'>git version 2.10.0
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>buildroot 版本

<ul>
<li>commit hash: <code>14b24726a81b719b35fee70c8ba8be2d682a7313</code></li>
</ul>
</li>
</ul>


<p><a name="lk0_1_dl"></a></p>

<h2>下載Linux Kernel Source</h2>

<p>沒啥好講的，就剪貼指令吧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_1_conf"></a></p>

<h2>設定和編譯</h2>

<p>東西下載完不是就閉著眼睛開幹，因為我們在開始編譯前需要</p>

<ol>
<li>切換到你想要研究的版本</li>
<li>如果不是x86，你需要指定平台</li>
<li>細項Kernel config設定</li>
</ol>


<p>那麼就來見招拆招吧</p>

<p><a name="lk0_1_conf_sw"></a></p>

<h3>切換版本</h3>

<p>非常簡單，先<code>git tag</code>，切過去就好。我要切到4.4.2就是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git tag                 <span class="c"># 找你要的版本</span>
</span><span class='line'>git checkout v4.4.2     <span class="c"># 切到tag</span>
</span><span class='line'>git checkout -b v4.4.2  <span class="c"># 理論上會這邊改東改西，就先開branch吧</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_1_conf_arm_def"></a></p>

<h3>設定ARM Vexpress預設config</h3>

<p>先講結論</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>make <span class="nv">ARCH</span><span class="o">=</span>arm vexpress_defconfig
</span></code></pre></td></tr></table></div></figure>


<p>開始<del>沒人要看</del>的解釋吧。基本上也亂看找出來的，簡單講一下當初的「脈絡」</p>

<ol>
<li>我知道我們平台是vexpress，所以就<code>find | grep vexpress</code>。從一堆檔案中我看到有趣的檔案<code>./arch/arm/configs/vexpress_defconfig</code>。</li>
<li>接下來就是要找make 的時候怎麼和這個檔案勾起來。網路上找一下會發現一個變數<code>ARCH</code>，剩下就試看看<code>make ARCH=arm vexpress_defconfig</code>，能不能動，可以動所以打完收工。</li>
</ol>


<p>然後你就知道</p>

<ol>
<li>Linux kernel source中有些平台會提供default config</li>
<li>透過<code>ARCH</code>可以讓make時自動參考這些檔案產生config</li>
</ol>


<p><a name="lk0_1_conf_qemu"></a></p>

<h3>更改Kernel Config讓Qemu使用</h3>

<p><font color="red"><strong>建議不要把buildroot compile cache打開。我花了很多時間在kernel 編譯後Qemu還是沒有使用編譯後的kernel的問題，最後發現關閉buildroot compile cache問題就消失了。</strong></font></p>

<p>如果閉著眼睛開始<a href="#lk0_1_conf_build">編譯</a>，你會很高興地發現可以開機了，但是接下來就會很失望的發現出現mount完rootfs找不到<code>/dev/ttyAMA0</code>，以至於沒辦法進入login畫面。這是因為雖然serial driver偵測到設備，但是/dev下面沒有相對的device node。解法就是確認下面kernel option有開啟。想要知道真正的原因<a href="https://buildroot.org/downloads/manual/manual.html#_dev_management">手冊這邊</a>有提到，請參考<code>Dynamic using devtmpfs only</code>段落。</p>

<ul>
<li>Device Drivers -> Generic Driver Options ->

<ul>
<li>Maintain a devtmpfs filesystem to mount at /dev</li>
<li>Automount devtmpfs at /dev, after the kernel mounted the rootfs</li>
</ul>
</li>
</ul>


<p>建議順便巡一下其他kernel選項，用不到的可以關一下。比如說一堆有的沒的網卡，音效支援之類的。</p>

<p><a name="lk0_1_conf_build"></a></p>

<h3>編譯</h3>

<p><a name="lk0_1_conf_build_broot"></a></p>

<h4>Buildroot</h4>

<ol>
<li><code>make menuconfig</code>

<ul>
<li>Toolchain -> Custom kernel headers series

<ul>
<li>改成你現在Linux 版本</li>
</ul>
</li>
</ul>
</li>
<li><code>make</code></li>
</ol>


<p><a name="lk0_1_conf_build_lk"></a></p>

<h4>Linux kernel</h4>

<p>指令如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>make <span class="nv">CROSS_COMPILE</span><span class="o">=</span>/tmp/buildroot/output/host/usr/bin/arm-buildroot-linux-gnueabihf- <span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">V</span><span class="o">=</span><span class="m">1</span> bzImage
</span></code></pre></td></tr></table></div></figure>


<p>這其實就是<code>make bzImage</code>的囉唆版，多了</p>

<ul>
<li><code>ARCH=arm</code>

<ul>
<li>指定ARM平台</li>
</ul>
</li>
<li><code>CROSS_COMPILE=..</code>

<ul>
<li>Cross compile prefix，既然我們使用buildroot內建toolchain，就用他們來編譯kernel</li>
</ul>
</li>
<li><code>V=1</code>

<ul>
<li>身為組裝工，沒看到編譯指令訊息跳出來就會沒安全感</li>
</ul>
</li>
</ul>


<p><a name="lk0_1_conf_dtb"></a></p>

<h3>產生Device tree binary</h3>

<p>由於Kernel的演進，可以存放平台硬體相關設定讓kernel啟動時存取。此方式稱為device tree，詳細資訊可以參考這份<a href="https://events.linuxfoundation.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf">簡介(pdf投影片)</a>。</p>

<p>以論述文來說，儘量先說結論再解釋。因此懶人包如下，假設在kernel top 目錄中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sudo apt-get install device-tree-compiler
</span><span class='line'>dtc -O dtb -o vexpress-v2p-ca9.dtb arch/arm/boot/dts/vexpress-v2p-ca9.dts
</span></code></pre></td></tr></table></div></figure>


<p><del>沒人要看的</del>說明如下，懶得看推論的就剪貼上面就好
對於組裝工來說，我關心的是</p>

<ol>
<li>Kernel 軟體包中是否有存在已經有的device tree?</li>
<li>有的話，我要選那一個？</li>
<li>怎麼產生出最後成果？</li>
<li>Qemu怎麼使用device tree？</li>
</ol>


<p>要回上面的問題，最簡單的方式就是回顧buildroot中啟動qemu Vepress的命令參數，你就會發現有個東西似乎和我們關心的device tree有關聯</p>

<ul>
<li><code>-dtb output/images/vexpress-v2p-ca9.dtb</code></li>
</ul>


<p>這邊顯示了幾個資訊</p>

<ul>
<li>有一個檔案叫dtb</li>
<li>檔名的v2p-ca9有可能和平台有關係</li>
</ul>


<p>那麼我們在Kernel中找一下檔名中有vexpress-v2p-ca9的檔案</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>user@host:/tmp/kernel/linux-stable$ find | grep vexpress-v2p-ca9
</span><span class='line'>./arch/arm/boot/dts/vexpress-v2p-ca9.dts
</span></code></pre></td></tr></table></div></figure>


<p>這邊一樣透露了這是一個和<code>dtb</code>很類似的檔案，那麼我們進一步做一些確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ # dtb 是binary檔案
</span><span class='line'>$ file output/images/vexpress-v2p-ca9.dtb
</span><span class='line'>output/images/vexpress-v2p-ca9.dtb: data
</span><span class='line'>
</span><span class='line'>$ # dts是文字檔
</span><span class='line'>$ file ./arch/arm/boot/dts/vexpress-v2p-ca9.dts
</span><span class='line'>./arch/arm/boot/dts/vexpress-v2p-ca9.dts: ASCII text
</span><span class='line'>
</span><span class='line'>$ # cat 後會發現是一種描述檔
</span></code></pre></td></tr></table></div></figure>


<p>剩下就是估狗大法，發現需要編譯器才能把dts轉換成dtb檔案。
所以就用上面的方式產稱dtb檔囉。</p>

<h2>測試</h2>

<p>剩下就剪貼了</p>

<p><strong>我在buildroot top目錄執行的</strong>，你要嘛就切到buildroot目錄下，要嘛就指定<code>-drive file</code>到你自己rootfs的路徑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>qemu-system-arm -M vexpress-a9 -smp <span class="m">1</span> -m <span class="m">256</span> -kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage -dtb /tmp/kernel/linux-stable/vexpress-v2p-ca9.dtb  -drive <span class="nv">file</span><span class="o">=</span>output/images/rootfs.ext2,if<span class="o">=</span>sd,format<span class="o">=</span>raw -append <span class="s2">&quot;console=ttyAMA0,115200 root=/dev/mmcblk0&quot;</span> -serial stdio -net nic,model<span class="o">=</span>lan9118 -net user
</span></code></pre></td></tr></table></div></figure>


<p>提出來兩個參數表示這是我編譯出來的kernel而不是buildroot的</p>

<ul>
<li><code>-kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage</code></li>
<li><code>-dtb /tmp/kernel/linux-stable/vexpress-v2p-ca9.dtb</code></li>
</ul>


<p>開機畫面節錄如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Booting Linux on physical CPU 0x0
</span><span class='line'>Initializing cgroup subsys cpuset
</span><span class='line'>Linux version 4.4.2 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #10 SMP Sat Oct 29 15:25:36 CST 2016
</span><span class='line'>CPU: ARMv7 Processor [410fc090] revision 0 (ARMv7), cr=10c5387d
</span><span class='line'>CPU: PIPT / VIPT nonaliasing data cache, VIPT aliasing instruction cache
</span><span class='line'>Machine model: V2P-CA9
</span><span class='line'>Memory policy: Data cache writeback
</span><span class='line'>CPU: All CPU(s) started in SVC mode.
</span><span class='line'>PERCPU: Embedded 12 pages/cpu @8fdbd000 s18188 r8192 d22772 u49152
</span><span class='line'>Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 65024
</span><span class='line'>Kernel command line: console=ttyAMA0,115200 root=/dev/mmcblk0
</span><span class='line'>log_buf_len individual max cpu contribution: 4096 bytes
</span><span class='line'>log_buf_len total cpu_extra contributions: 12288 bytes
</span><span class='line'>log_buf_len min size: 16384 bytes
</span><span class='line'>log_buf_len: 32768 bytes
</span><span class='line'>early log buf free: 14956(91%)
</span><span class='line'>PID hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>Dentry cache hash table entries: 32768 (order: 5, 131072 bytes)
</span><span class='line'>Inode-cache hash table entries: 16384 (order: 4, 65536 bytes)
</span><span class='line'>Memory: 252732K/262144K available (4816K kernel code, 155K rwdata, 1384K rodata, 284K init, 152K bss, 9412K reserved, 0K cma-reserved)
</span><span class='line'>Virtual kernel memory layout:
</span><span class='line'>    vector  : 0xffff0000 - 0xffff1000   (   4 kB)
</span><span class='line'>    fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)
</span><span class='line'>    vmalloc : 0x90800000 - 0xff800000   (1776 MB)
</span><span class='line'>    lowmem  : 0x80000000 - 0x90000000   ( 256 MB)
</span><span class='line'>    modules : 0x7f000000 - 0x80000000   (  16 MB)
</span><span class='line'>....
</span><span class='line'>buildroot login:
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_1_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://buildroot.org/downloads/manual/manual.html">Buildroot 官方手冊</a></li>
<li><a href="https://events.linuxfoundation.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf">Device Tree for Dummies! (pdf投影片)</a></li>
<li><a href="http://stackoverflow.com/questions/21670967/compiling-source-device-tree-file">Stackoverflow: COMPILING source device tree file</a></li>
</ul>


<p><a name="lk0_1_app"></a></p>

<h2>附錄</h2>

<p><a name="lk0_1_app_brot"></a></p>

<h3>使用Buildroot 內建套件指定編譯Linux kernel 4.2.2</h3>

<p>當初會去做這個主要是因為開始編譯獨立的Linux kernel前要先驗證buildroot自己編的Linux 4.4.2是否可以用qemu開機。另外的好處的就是buildroot編譯出來的kernel config (在output/build/linux-4.4.2/.config) 可以和你自己的kernel config比對。這邊只要在buildroot中make menuconfig中和kernel有關設定指定4.4.2即可，比Versatile簡單太多了故省略，如果有人遇到問題我再補上這邊說明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel Pratice 0: Buildroot (1/2)]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/29/linux-kernel-pratice-0-buildroot-setup-with-qemu/"/>
    <updated>2016-10-29T09:43:20+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/29/linux-kernel-pratice-0-buildroot-setup-with-qemu</id>
    <content type="html"><![CDATA[<p>理論上不應該要邊移動邊開火，延長戰線。不過計劃趕不上變化，既來之則安之。</p>

<p>最近因為特別因素開始學習Linux kernel，看能不能Linux kernel和STM32兩邊都不要漏掉。不管怎樣，學習和實習絕對分不開，所以還是從環境架設開始吧。這次的實習環境架設的目標是：</p>

<ol>
<li>可以使用ARM 平台。一方面追求流行，一方面我不想再開x86這個副本</li>
<li>可以方便地建立ARM平台的Linux Rootfs和kernel版本</li>
<li>可以方便地更改指定要編譯的Kernel版本</li>
<li>透過Qemu ，使用2的Rootfs和kernel開機</li>
<li>透過Qemu和搭配的工具可以分析Linux kernel的run time 行為</li>
</ol>


<p>今天只有辦到1, 2和4而已，剩下的請參考之後的文章。</p>

<h2>目錄</h2>

<ul>
<li><a href="#lk0_env">測試環境</a></li>
<li><a href="#lk0_ins">安裝Buildroot</a>

<ul>
<li><a href="#lk0_ins_dl">下載Buildroot</a></li>
<li><a href="#lk0_ins_set">設定ARM 環境</a></li>
<li><a href="#lk0_ins_build">編譯及輸出</a></li>
</ul>
</li>
<li><a href="#lk0_test">測試</a></li>
<li><a href="#lk0_ref">參考資料</a>

<ul>
<li><a href="#lk0_ref_data">下次準備看的資料</a></li>
</ul>
</li>
</ul>


<p><a name="lk0_env"></a></p>

<h2>測試環境</h2>

<p>因為我已經裝過開發相關的套件，因此如果您是新手可能要自行摸索也許有需要另外安裝的套件如<code>git</code>。嘛，練習解讀錯誤訊息也是一種學習。</p>

<pre>
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</pre>


<p><a name="lk0_ins"></a></p>

<h2>安裝Buildroot</h2>

<p>主要分成下面三個步驟</p>

<ul>
<li><a href="#lk0_ins_dl">下載Buildroot</a></li>
<li><a href="#lk0_ins_set">設定ARM 環境</a></li>
<li><a href="#lk0_ins_build">編譯及輸出</a></li>
</ul>


<p><a name="lk0_ins_dl"></a></p>

<h3>下載Buildroot</h3>

<p>直接看例子，剪下貼上就好</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir buildroot
</span><span class='line'><span class="nb">cd </span>buildroot
</span><span class='line'>git clone git://git.buildroot.net/buildroot
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_ins_set"></a></p>

<h3>設定ARM 環境</h3>

<p>網路上查到大部分都是從<code>make menuconfig</code>開始。不過我是很<strong>明確地</strong>要用<code>Qemu</code>跑ARM的系統。所以使用下面指令查詢。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>make list-defconfigs
</span></code></pre></td></tr></table></div></figure>


<p>Scott 大大指出可以使用<code>qemu_arm_vexpress</code> ，原因是這個平台模擬的CPU是 <code>Cortex-A9</code>(ARMv7-A)的平台。<a href="http://wen00072.github.io/blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu/">之前</a>我是用的模擬平台使用的CPU是<code>ARM926EJ-S</code>(ARMv5TE)，它的instruction 架構和現在差距太多，所以就轉換到這邊了。</p>

<p>接下來就用<code>make menuconfig</code>做細項調整，因為是拿來做分析系統行為，所以調整的重點是增加系統的可觀察度、除錯工具、開發軟體套件等。</p>

<p>開啟或新增下面設定如下：</p>

<ul>
<li>Build options

<ul>
<li>build packages with debugging symbol</li>
<li>gcc debug level

<ul>
<li>debug level 3</li>
</ul>
</li>
<li>strip command for binaries on target

<ul>
<li>none</li>
</ul>
</li>
<li>gcc optimization level

<ul>
<li>optimize for debugging</li>
</ul>
</li>
</ul>
</li>
<li>Toolchain

<ul>
<li>C library

<ul>
<li>glibc</li>
</ul>
</li>
<li>glibc version

<ul>
<li>2.24</li>
</ul>
</li>
<li>GCC compiler Version

<ul>
<li>4.8.x</li>
</ul>
</li>
<li>Build cross gdb for the host

<ul>
<li>TUI support</li>
<li>Python support</li>
<li>Simulator support</li>
</ul>
</li>
</ul>
</li>
<li>Target packages

<ul>
<li>Debugging, profiling and benchmark

<ul>
<li>gdb

<ul>
<li>gdbserver</li>
<li>full debugger</li>
<li>TUI support</li>
</ul>
</li>
<li>ltrace</li>
<li>strace</li>
<li>valgrind 和所有相關的東西</li>
</ul>
</li>
<li>Development tools

<ul>
<li>binutils</li>
<li>git</li>
<li>gperf</li>
<li>libtool</li>
<li>make</li>
<li>pkgconf</li>
<li>subversion</li>
<li>tree</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>自行編譯 Kernel 部份下一篇會再說明。</p>

<p><a name="lk0_ins_build"></a></p>

<h3>編譯及輸出</h3>

<p>編譯只要下<code>make</code>就會幫你下載和編譯開機需要的</p>

<ol>
<li>套件和一些常用工具，並封裝到<code>output/image/roofs.ext2</code></li>
<li>Kernel(預設4.7)，編譯成<code>zImage</code>，放在<code>output/image/zImage</code></li>
</ol>


<p><a name="lk0_test"></a></p>

<h2>測試</h2>

<p>接下來也不難，可以參考<code>board/qemu/arm-vexpress/readme.txt</code>
簡單來說就是執行下面指令，開機完使用<code>root</code>登入不用密碼，使用<code>poweroff</code>後再手動離開qemu。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>qemu-system-arm -M vexpress-a9 -smp <span class="m">1</span> -m <span class="m">256</span> -kernel output/images/zImage -dtb output/images/vexpress-v2p-ca9.dtb -drive <span class="nv">file</span><span class="o">=</span>output/images/rootfs.ext2,if<span class="o">=</span>sd,format<span class="o">=</span>raw -append <span class="s2">&quot;console=ttyAMA0,115200 root=/dev/mmcblk0&quot;</span> -serial stdio -net nic,model<span class="o">=</span>lan9118 -net user
</span></code></pre></td></tr></table></div></figure>


<p>執行畫面如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ qemu-system-arm -M vexpress-a9 -smp 1 -m 256 -kernel output/images/zImage -dtb output/images/vexpress-v2p-ca9.dtb -drive file=output/images/rootfs.ext2,if=sd,format=raw -append &quot;console=ttyAMA0,115200 root=/dev/mmcblk0&quot; -serial stdio -net nic,model=lan9118 -net user
</span><span class='line'>Booting Linux on physical CPU 0x0
</span><span class='line'>Initializing cgroup subsys cpuset
</span><span class='line'>Linux version 4.4.2 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #1 SMP Sat Oct 29 12:37:50 CST 2016
</span><span class='line'>CPU: ARMv7 Processor [410fc090] revision 0 (ARMv7), cr=10c5387d
</span><span class='line'>...
</span><span class='line'>Initializing random number generator... done.
</span><span class='line'>Starting network: smsc911x 4e000000.ethernet eth0: SMSC911x/921x identified at 0x912a0000, IRQ: 31
</span><span class='line'>udhcpc: started, v1.25.0
</span><span class='line'>udhcpc: sending discover
</span><span class='line'>udhcpc: sending discover
</span><span class='line'>udhcpc: sending select for 10.0.2.15
</span><span class='line'>udhcpc: lease of 10.0.2.15 obtained, lease time 86400
</span><span class='line'>deleting routers
</span><span class='line'>adding dns 10.0.2.3
</span><span class='line'>OK
</span><span class='line'>Starting sshd: OK
</span><span class='line'>
</span><span class='line'>Welcome to Buildroot
</span><span class='line'>buildroot login:
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://buildroot.org/downloads/manual/manual.html">The Buildroot user manual</a>

<ul>
<li>只有看部份，不過官方文件本來就是應該放在第一位</li>
</ul>
</li>
<li><a href="http://pressreset.net/2013/09/buildroot-and-qemu-the-quickest-receipe-for-your-own-linux/">Buildroot and QEMU – the quickest receipe for your own Linux</a>

<ul>
<li>東西弄完才看到的文章，入門好文</li>
</ul>
</li>
</ul>


<p><a name="lk0_ref_data"></a></p>

<h3>下次準備看的資料</h3>

<ul>
<li><a href="http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel">Qemu and the Kernel</a>

<ul>
<li>使用Qemu debug kernel的資料</li>
</ul>
</li>
<li><a href="http://unix.stackexchange.com/questions/90423/can-virtfs-9p-be-used-as-root-file-system">Stackoverflow: Can virtfs/9p be used as root file system?</a>

<ul>
<li>Qemu和Host主機共享資料，甚至直接把rootfs放host讓qemu去讀取的方式</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(過期) Linux Kernel Pratice 0.5: 使用gdb 加 Qemu Trace Linux Kernel Runtime 行為]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/11/trace-linux-kernel-via-qemu-and-gdb/"/>
    <updated>2016-10-11T09:46:25+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/11/trace-linux-kernel-via-qemu-and-gdb</id>
    <content type="html"><![CDATA[<h3><font color="red">感謝Scott 大大糾正，選錯平台，這篇使用了ARMv4指令集的測試平台。請大家忽略，正確的版本將會之後更新!</font></h3>

<h2>前言</h2>

<p>還是感謝<a href="http://scottt.tw/">Scott</a>大大和其他網友的幫忙。這次最重要的心得就是不要在睡眠不足的時候做實驗，浪費的時間拿去睡覺反而比較實在。</p>

<h2>目錄</h2>

<ul>
<li><a href="#de_lk0_5_env">測試環境</a></li>
<li><a href="#de_lk0_5_kr">Linux kernel環境設定</a></li>
<li><a href="#de_lk0_5_test">測試</a>

<ul>
<li><a href="#de_lk0_5_test_qemu">Qemu</a></li>
<li><a href="#de_lk0_5_test_gdb">gdb</a></li>
</ul>
</li>
<li><a href="#de_lk0_5_ref">參考資料</a></li>
<li><a href="#de_lk0_5_add">補充</a></li>
</ul>


<p><a name="de_lk0_5_env"></a></p>

<h2>測試環境</h2>

<h3>Host</h3>

<ul>
<li>Host OS</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 14.04.5 LTS
</span><span class='line'>Release:  14.04
</span><span class='line'>Codename: trusty
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Qemu</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>qemu-system-arm --version
</span><span class='line'>QEMU emulator version 2.0.0 <span class="o">(</span>Debian 2.0.0+dfsg-2ubuntu1.27<span class="o">)</span>, Copyright <span class="o">(</span>c<span class="o">)</span> 2003-2008 Fabrice Bellard
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>gdb</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ arm-none-eabi-gdb --version
</span><span class='line'>GNU gdb (GNU Tools for ARM Embedded Processors) 7.10.1.20160923-cvs
</span><span class='line'>Copyright (C) 2015 Free Software Foundation, Inc.
</span><span class='line'>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>buildroot 版本

<ul>
<li>commit hash: <code>14b24726a81b719b35fee70c8ba8be2d682a7313</code></li>
</ul>
</li>
</ul>


<h3>Target</h3>

<ul>
<li>Linux kernerl 版本

<ul>
<li>4.4.2</li>
</ul>
</li>
<li>模擬平台

<ul>
<li>Versatile</li>
</ul>
</li>
</ul>


<p><a name="de_lk0_5_kr"></a></p>

<h2>Linux kernel環境設定</h2>

<p>我目前只打開加入debug資訊的選項。接下來重編，編譯的方式請參考<a href="http://wen00072.github.io/blog/2016/10/01/linux-kernel-pratice-0-buildroot-2-customized-kernel/">這邊</a></p>

<ul>
<li>Kernel hacking -> Compile-time checks and compiler options ->

<ul>
<li>Compile the kernel with debug info</li>
</ul>
</li>
</ul>


<p><a name="de_lk0_5_test"></a></p>

<h2>測試</h2>

<p>依照下面兩個步驟執行</p>

<ol>
<li>執行qemu，並且加入支援gdb以及開始馬上freeze CPU的參數</li>
<li>執行gdb，載入symbol並聯到qemu除錯</li>
</ol>


<p><a name="de_lk0_5_test_qemu"></a></p>

<h3>Qemu</h3>

<p>基本上就是原本的指令加入兩個選項</p>

<ul>
<li><code>-S</code>

<ul>
<li>qemu一開始立即Freeze CPU</li>
</ul>
</li>
<li><code>-s</code>

<ul>
<li><code>-gdb tcp::1234</code>的縮寫，也就是說gdb可以透過port 1234和連到Qemu除錯</li>
</ul>
</li>
</ul>


<p>假設你在buildroot最上層，就可以使用下面指令執行qemu 並使用gdb 除錯</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>qemu-system-arm -M versatilepb \
</span><span class='line'>                -kernel /tmp/kernel/arch/arm/boot/zImage \
</span><span class='line'>                -drive file=output/images/rootfs.ext2,if=scsi,format=raw \
</span><span class='line'>                -append &quot;root=/dev/sda console=ttyAMA0,115200&quot; \
</span><span class='line'>                -serial stdio -net nic,model=rtl8139 -net user -s -S
</span></code></pre></td></tr></table></div></figure>


<p><a name="de_lk0_5_test_gdb"></a></p>

<h3>gdb</h3>

<p>這邊有點瑣碎，先講一下步驟</p>

<ol>
<li>載入Linux kernel symbol

<ul>
<li>假設你在kernel最上層目錄有三種方式載入

<ul>
<li>直接<code>arm-none-eabi-gdb ./vmlinux</code></li>
<li><code>arm-none-eabi-gdb -ex "file ./vmlinux"</code></li>
<li>進入gdb後打<code>file ./vmlinux</code>指令</li>
</ul>
</li>
</ul>
</li>
<li>連上qemu

<ul>
<li>一樣兩種方式

<ul>
<li><code>arm-none-eabi-gdb -ex "target remote :1234"</code></li>
<li>進入gdb後打<code>target remote :1234</code>指令</li>
</ul>
</li>
</ul>
</li>
<li>設定breakpoint等你要觀察的資訊

<ul>
<li>如<code>b printk</code></li>
</ul>
</li>
<li>告訴qemu開始執行

<ul>
<li><code>continue</code></li>
</ul>
</li>
</ol>


<p>1和2可以一起使用如下</p>

<figure class='code'><figcaption><span>懶人包</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>arm-none-eabi-gdb -ex &quot;file ./vmlinux&quot;  -ex &quot;target remote :1234&quot;
</span></code></pre></td></tr></table></div></figure>


<p>現在看一下操作範例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ arm-none-eabi-gdb ./vmlinux  -ex &quot;target remote :1234&quot;
</span><span class='line'>GNU gdb (GNU Tools for ARM Embedded Processors) 7.10.1.20160923-cvs
</span><span class='line'>...
</span><span class='line'>Reading symbols from ./vmlinux...done.
</span><span class='line'>Remote debugging using :1234
</span><span class='line'>__vectors_start () at arch/arm/kernel/entry-armv.S:1210
</span><span class='line'>1210      W(b)    vector_rst
</span><span class='line'>(gdb) b printk
</span><span class='line'>Breakpoint 1 at 0xc0069df4: file kernel/printk/printk.c, line 1900.
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, printk (fmt=0x0 &lt;__vectors_start&gt;) at kernel/printk/printk.c:1900
</span><span class='line'>1900  {
</span><span class='line'>(gdb) bt
</span><span class='line'>#0  printk (fmt=0x0 &lt;__vectors_start&gt;) at kernel/printk/printk.c:1900
</span><span class='line'>#1  0xc039d8c4 in start_kernel () at init/main.c:508
</span><span class='line'>#2  0x00008048 in ?? ()
</span><span class='line'>Backtrace stopped: previous frame identical to this frame (corrupt stack?)
</span></code></pre></td></tr></table></div></figure>


<p>另外如果有興趣使用Linux kernel提供的指令，可以使用下面的方式在啟動gdb時載入
，只要把下面的描述加到你的<code>~/.gdbinit</code>即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>add-auto-load-safe-path /tmp/kernel/scripts/gdb/vmlinux-gdb.py
</span></code></pre></td></tr></table></div></figure>


<p>那麼你就可以使用Linux kernel提供的gdb script，詳細的設定和指令說明在<a href="https://www.kernel.org/doc/Documentation/gdb-kernel-debugging.txt">這邊</a>。</p>

<p><a name="de_lk0_5_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel">Linux Magazine: Qemu and the Kernel</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/gdb-kernel-debugging.txt">Linux kernel document: Debugging kernel and modules via gdb</a></li>
<li><a href="http://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu">stackoverflow: How to debug the Linux kernel with GDB and QEMU?</a></li>
</ul>


<p><a name="de_lk0_5_add"></a></p>

<h2>補充</h2>

<p>當初犯了蠢事載入不正確的kernel image導致一堆不必要的除錯。不過多學到一個gdb Python script除錯指令，當Python script發生exception時可以用下面的指令印出Python錯誤call stack</p>

<ul>
<li>gdb內：<code>set python print-stack full</code></li>
<li>啟動gdb時加入參數： <code>-ex "set python print-stack full"</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用gdb 靜態分析C 語言名稱和參數相同函數的原始檔位置]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/03/locate-function-source-code-via-gdb/"/>
    <updated>2016-10-03T14:36:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/03/locate-function-source-code-via-gdb</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>感謝<a href="http://scottt.tw/">Scott</a>大大的資訊。</p>

<p>忘記那邊看過的名言：「手上有了新玩具，就會想要馬上拿來用。」</p>

<h2>動機</h2>

<p>組裝軟體的時候，有一件事很讓我困擾。那就是當整包SDK有兩個以上名稱和參數相同的函數的時候。當這種情況發生時，trace code就很麻煩，你必須要花時間釐清到底最後會使用到那一個函數。而這些config可能用下面兩種方式切換這些名稱和參數相同的函數：</p>

<ol>
<li>巨集

<ul>
<li><code>#if</code></li>
<li><code>#ifdef</code></li>
</ul>
</li>
<li>Makefile

<ul>
<li>在檔案中根據不同變數編譯不同的檔案</li>
</ul>
</li>
</ol>


<p>我以前會視情況用下面兩種方法找到該函數編譯實際使用的原始檔位置</p>

<ol>
<li>下毒藥，只要相同名字的函數都塞入<code>#error 可以辨別的字串</code>。編譯時根據錯誤訊息判斷使用哪個函數</li>
<li>gdb設斷點，runtime透過中斷函數的方式取得函數的檔案和行號</li>
</ol>


<p>不過<a href="http://scottt.tw/">Scott</a>大大的今天給的資訊讓我可以更省力的處理這個問題了。</p>

<p>如果只想要知道用法，看完下面指令就可以收工回家了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gdb -ex <span class="s1">&#39;file 你的執行檔或是shared library檔&#39;</span> -ex <span class="s1">&#39;info line 要查的函數&#39;</span> -ex <span class="s1">&#39;quit&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>當然用<code>gdb</code>編譯時不要忘記加debug option。</p>

<h2>目錄</h2>

<ul>
<li><a href="#gds_env">測試環境</a></li>
<li><a href="#gds_files">測試檔案</a>

<ul>
<li><a href="#gds_files_1">test_same_func.c</a></li>
<li><a href="#gds_files_2">same_func1.c</a></li>
<li><a href="#gds_files_3">same_func2.c</a></li>
<li><a href="#gds_files_mk">Makefile</a></li>
</ul>
</li>
<li><a href="#gds_test">測試結果</a></li>
<li><a href="#gds_ref">延伸資料</a></li>
</ul>


<p><a name="gds_env"></a></p>

<h2>測試環境</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 14.04.5 LTS
</span><span class='line'>Release:  14.04
</span><span class='line'>Codename: trusty
</span></code></pre></td></tr></table></div></figure>


<p><a name="gds_files"></a></p>

<h2>測試檔案</h2>

<p>簡單來說，就是實作切換兩種方式同樣名稱和參數的函數：</p>

<ol>
<li>巨集</li>
<li>Makefile</li>
</ol>


<p>所以我們會有</p>

<ol>
<li><a href="#gds_files_1">測試檔案進入點</a></li>
<li><a href="#gds_files_2">測試檔一</a>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和測試檔二完全一模一樣</li>
</ul>
</li>
<li><a href="#gds_files_3">測試檔二</a>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和測試檔一完全一模一樣</li>
</ul>
</li>
<li><a href="#gds_files_mk">Makefile</a>

<ul>
<li>除了編譯以外，還提供兩個變數，由command line傳入

<ul>
<li>USE_FILE=1

<ul>
<li>沒傳入時預設編譯<font color="red"><strong>測試檔二</strong></font>，當該參數傳入<code>USE_FILE=1</code>時會變成編譯<font color="red"><strong>測試檔一</strong></font></li>
</ul>
</li>
<li>EN_OP1=1

<ul>
<li>當該參數傳入時才會開啟<code>OP1</code>巨集</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>


<p><a name="gds_files_1"></a></p>

<h3>test_same_func.c</h3>

<ul>
<li>測試檔案進入點，呼叫func1()。func1()在compile time才被決定</li>
</ul>


<figure class='code'><figcaption><span>test_same_func.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">func1</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="gds_files_2"></a></p>

<h3>same_func1.c</h3>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和<a href="#gds_files_2">same_func2</a>完全一模一樣</li>
</ul>


<figure class='code'><figcaption><span>same_func1.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if OP1</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: %s_OP1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__FILE__</span><span class="p">,</span> <span class="n">__PRETTY_FUNCTION__</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: %s_NOT_OP1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__FILE__</span><span class="p">,</span> <span class="n">__PRETTY_FUNCTION__</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="gds_files_3"></a></p>

<h3>same_func2.c</h3>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和<a href="#gds_files_1">same_func1</a>完全一模一樣</li>
</ul>


<figure class='code'><figcaption><span>same_func2.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if OP1</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: %s_OP1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__FILE__</span><span class="p">,</span> <span class="n">__PRETTY_FUNCTION__</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func1</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: %s_NOT_OP1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__FILE__</span><span class="p">,</span> <span class="n">__PRETTY_FUNCTION__</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="gds_files_mk"></a></p>

<h3>Makefile</h3>

<p>提供兩個變數，由command line傳入</p>

<ul>
<li>USE_FILE=1

<ul>
<li>沒傳入時預設編譯<font color="red"><strong>測試檔二</strong></font>，當該參數傳入<code>USE_FILE=1</code>時會變成編譯<font color="red"><strong>測試檔一</strong></font></li>
</ul>
</li>
<li>EN_OP1=1

<ul>
<li>當該參數傳入時才會開啟<code>OP1</code>巨集</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CFLAGS</span><span class="o">+=</span>-Wall -Werror -g3
</span><span class='line'><span class="nv">TARGET</span><span class="o">=</span>test_same_func
</span><span class='line'><span class="nv">SRCS</span><span class="o">=</span>test_same_func.c
</span><span class='line'>
</span><span class='line'><span class="cp">ifeq ($(USE_FILE), 1)</span>
</span><span class='line'>    SRCS +<span class="o">=</span> same_func1.c
</span><span class='line'><span class="cp">else</span>
</span><span class='line'>    SRCS +<span class="o">=</span> same_func2.c
</span><span class='line'><span class="cp">endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">ifeq ($(EN_OP1), 1)</span>
</span><span class='line'>    CFLAGS +<span class="o">=</span> -DOP1<span class="o">=</span>1
</span><span class='line'><span class="cp">endif</span>
</span><span class='line'>
</span><span class='line'><span class="nv">OBJS</span><span class="o">=</span><span class="k">$(</span>patsubst %.c, %.o, <span class="k">$(</span>SRCS<span class="k">))</span>
</span><span class='line'>
</span><span class='line'><span class="nf">$(TARGET)</span><span class="o">:</span> <span class="k">$(</span><span class="nv">OBJS</span><span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>CC<span class="k">)</span> -o <span class="nv">$@</span> <span class="nv">$^</span>
</span><span class='line'>  gdb -ex <span class="s1">&#39;file $@&#39;</span> -ex <span class="s1">&#39;info line func1&#39;</span> -ex <span class="s1">&#39;quit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">%.o</span><span class="o">:</span> %.<span class="n">c</span>
</span><span class='line'>  <span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> -c <span class="nv">$^</span>
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  rm *.o *~ <span class="k">$(</span>TARGET<span class="k">)</span> -f
</span></code></pre></td></tr></table></div></figure>


<p><a name="gds_test"></a></p>

<h2>測試結果</h2>

<p>前面提過，<code>func1()</code>的實作受兩個變數影響，分別為</p>

<ol>
<li>巨集<code>OP1</code>是否有設定

<ul>
<li>只有<code>OP1</code> 被設定<strong>並且</strong>非零時才會進入<code>OP1</code>的<code>func1()</code></li>
</ul>
</li>
<li>Makefile變數<code>USE_FILE</code>是否有設定

<ul>
<li>只有<code>USE_FILE</code>為1的時候才會使用<code>same_func1.c</code>，其他情形都編譯<code>same_func2.c</code></li>
</ul>
</li>
</ol>


<p>所以我們make 指令有下面四種變化</p>

<ol>
<li><a href="">巨集<code>OP1</code>和<code>USE_FILE</code>都沒設定</a></li>
<li><a href="">設定巨集<code>OP1</code>，<code>USE_FILE</code>沒設定</a></li>
<li><a href="">巨集<code>OP1</code>沒設定，但是設定<code>USE_FILE</code></a></li>
<li><a href="">全部設定巨集<code>OP1</code>和<code>USE_FILE</code></a></li>
</ol>


<p><a name=""></a></p>

<h3>巨集<code>OP1</code>和<code>USE_FILE</code>都沒設定</h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func2.c</code></li>
<li>使用非<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>make clean
</span><span class='line'>default settings: OP1 disable and use same_func1.c
</span><span class='line'>rm *.o *~ test_same_func -f
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'>cc -Wall -Werror -g3 -c test_same_func.c
</span><span class='line'>cc -Wall -Werror -g3 -c same_func2.c
</span><span class='line'>cc -o test_same_func test_same_func.o same_func2.o
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gdb -ex <span class="s1">&#39;file test_same_func&#39;</span> -ex <span class="s1">&#39;info line func1&#39;</span> -ex <span class="s1">&#39;quit&#39;</span>
</span><span class='line'>...
</span><span class='line'>Line <span class="m">11</span> of <span class="s2">&quot;same_func2.c&quot;</span> starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
</span><span class='line'>Hello World
</span><span class='line'>same_func2.c: func1_NOT_OP1
</span></code></pre></td></tr></table></div></figure>


<p><a name=""></a></p>

<h3>設定巨集<code>OP1</code>，<code>USE_FILE</code>沒設定</h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func2.c</code></li>
<li>使用<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>make clean
</span><span class='line'>rm *.o *~ test_same_func -f
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>make <span class="nv">EN_OP1</span><span class="o">=</span>1
</span><span class='line'>cc -Wall -Werror -g3 -DOP1<span class="o">=</span><span class="m">1</span> -c test_same_func.c
</span><span class='line'>cc -Wall -Werror -g3 -DOP1<span class="o">=</span><span class="m">1</span> -c same_func2.c
</span><span class='line'>cc -o test_same_func test_same_func.o same_func2.o
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gdb -ex <span class="s1">&#39;file test_same_func&#39;</span> -ex <span class="s1">&#39;info line func1&#39;</span> -ex <span class="s1">&#39;quit&#39;</span>
</span><span class='line'>...
</span><span class='line'>Line <span class="m">5</span> of <span class="s2">&quot;same_func2.c&quot;</span> starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
</span><span class='line'>Hello World
</span><span class='line'>same_func2.c: func1_OP1
</span></code></pre></td></tr></table></div></figure>


<p><a name=""></a></p>

<h3>巨集<code>OP1</code>沒設定，但是設定<code>USE_FILE</code></h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func1.c</code></li>
<li>使用非<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>make clean
</span><span class='line'>rm *.o *~ test_same_func -f
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>make <span class="nv">USE_FILE</span><span class="o">=</span>1
</span><span class='line'>cc -Wall -Werror -g3 -c test_same_func.c
</span><span class='line'>cc -Wall -Werror -g3 -c same_func1.c
</span><span class='line'>cc -o test_same_func test_same_func.o same_func1.o
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gdb -ex <span class="s1">&#39;file test_same_func&#39;</span> -ex <span class="s1">&#39;info line func1&#39;</span> -ex <span class="s1">&#39;quit&#39;</span>
</span><span class='line'>...
</span><span class='line'>Line <span class="m">11</span> of <span class="s2">&quot;same_func1.c&quot;</span> starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
</span><span class='line'>Hello World
</span><span class='line'>same_func1.c: func1_NOT_OP1
</span></code></pre></td></tr></table></div></figure>


<p><a name=""></a></p>

<h3>全部設定巨集<code>OP1</code>和<code>USE_FILE</code></h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func1.c</code></li>
<li>使用<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>make clean
</span><span class='line'>rm *.o *~ test_same_func -f
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>make <span class="nv">EN_OP1</span><span class="o">=</span><span class="m">1</span> <span class="nv">USE_FILE</span><span class="o">=</span>1
</span><span class='line'>cc -Wall -Werror -g3 -DOP1<span class="o">=</span><span class="m">1</span> -c test_same_func.c
</span><span class='line'>cc -Wall -Werror -g3 -DOP1<span class="o">=</span><span class="m">1</span> -c same_func1.c
</span><span class='line'>cc -o test_same_func test_same_func.o same_func1.o
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>gdb -ex <span class="s1">&#39;file test_same_func&#39;</span> -ex <span class="s1">&#39;info line func1&#39;</span> -ex <span class="s1">&#39;quit&#39;</span>
</span><span class='line'>...
</span><span class='line'>Line <span class="m">5</span> of <span class="s2">&quot;same_func1.c&quot;</span> starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
</span><span class='line'>Hello World
</span><span class='line'>same_func1.c: func1_OP1
</span></code></pre></td></tr></table></div></figure>


<p><a name="gds_ref"></a></p>

<h2>延伸資料</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1w1nPmCLpeRN3kEYglzHwozhWXY0ddT9oe6JCZocsPNE/edit">Using GDB to Help You Read Linux Kernel Code without Running It</a>

<ul>
<li><a href="http://scottt.tw/">Scott</a>大大的文件，描述使用gdb 靜態分析Linux kernel的技巧</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(過期) Linux Kernel Pratice 0: Buildroot (2/2) - 自行編譯kernel]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/01/linux-kernel-pratice-0-buildroot-2-customized-kernel/"/>
    <updated>2016-10-01T09:40:54+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/01/linux-kernel-pratice-0-buildroot-2-customized-kernel</id>
    <content type="html"><![CDATA[<h3><font color="red">感謝Scott 大大糾正，選錯平台，這篇使用了ARMv4指令集的測試平台。請大家忽略，正確的版本將會之後更新!</font></h3>

<h2>前情提要</h2>

<p><a href="blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu/">上一篇</a>提到，設定實習環境的目標有：</p>

<ol>
<li>可以使用ARM 平台。一方面追求流行，一方面我不想再開x86這個副本</li>
<li>可以方便地建立ARM平台的Linux Rootfs和kernel版本</li>
<li>可以方便地更改指定要編譯的Kernel版本</li>
<li>透過Qemu ，使用2的Rootfs和kernel開機</li>
<li>透過Qemu和搭配的工具可以分析Linux kernel的run time 行為</li>
</ol>


<p>今天就是來解決3 的項目。更細分的話，這次目標是</p>

<ol>
<li>使用官方Linux kernel 編譯Versatile</li>
<li>編譯出來的kernel binary可以在Qemu上順利載入</li>
<li>編譯出來的kernel binary可以順利的載入buildroot產生的rootfs，以及網路介面和相關設備</li>
</ol>


<h2>目錄</h2>

<ul>
<li><a href="#lk0_1_del_env">測試環境</a></li>
<li><a href="#lk0_1_del_dl">下載Linux Kernel Source</a></li>
<li><a href="#lk0_1_del_conf">設定和編譯</a>

<ul>
<li><a href="#lk0_1_del_conf_sw">切換版本</a></li>
<li><a href="#lk0_1_del_conf_arm_def">設定ARM Versatile預設config</a></li>
<li><a href="#lk0_1_del_conf_qemu">設定Qemu VM支援的硬體</a></li>
<li><a href="#lk0_1_del_conf_build">編譯</a>

<ul>
<li><a href="#lk0_1_del_conf_build_broot">Buildroot</a></li>
<li><a href="#lk0_1_del_conf_build_lk">Linux kernel</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#lk0_1_del_test">測試</a></li>
<li><a href="#lk0_1_del_ref">參考資料</a></li>
<li><a href="#lk0_1_del_app">附錄</a>

<ul>
<li><a href="#lk0_1_del_app_brot">使用Buildroot 內建套件指定編譯Linux kernel 4.2.2</a></li>
</ul>
</li>
</ul>


<p><a name="lk0_1_del_env"></a></p>

<h2>測試環境</h2>

<p>做組裝的最重要的原則之一就是要能夠reproduce，所以交代測試環境是一定要的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 14.04.5 LTS
</span><span class='line'>Release:  14.04
</span><span class='line'>Codename: trusty
</span><span class='line'>
</span><span class='line'>$ git --version
</span><span class='line'>git version 2.10.0
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>buildroot 版本

<ul>
<li>commit hash: <code>14b24726a81b719b35fee70c8ba8be2d682a7313</code></li>
</ul>
</li>
</ul>


<p><a name="lk0_1_del_dl"></a></p>

<h2>下載Linux Kernel Source</h2>

<p>沒啥好講的，就剪貼指令吧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_1_del_conf"></a></p>

<h2>設定和編譯</h2>

<p>東西下載完不是就閉著眼睛開幹，因為我們在開始編譯前需要</p>

<ol>
<li>切換到你想要研究的版本</li>
<li>如果不是x86，你需要指定平台</li>
<li>細項Kernel config設定</li>
</ol>


<p>那麼就來見招拆招吧</p>

<p><a name="lk0_1_del_conf_sw"></a></p>

<h3>切換版本</h3>

<p>非常簡單，先<code>git tag</code>，切過去就好。我要切到4.4.2就是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git tag                 <span class="c"># 找你要的版本</span>
</span><span class='line'>git checkout v4.4.2     <span class="c"># 切到tag</span>
</span><span class='line'>git checkout -b v4.4.2  <span class="c"># 理論上會這邊改東改西，就先開branch吧</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_1_del_conf_arm_def"></a></p>

<h3>設定ARM Versatile預設config</h3>

<p>先講結論</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>make <span class="nv">ARCH</span><span class="o">=</span>arm versatile_defconfig
</span></code></pre></td></tr></table></div></figure>


<p>開始<del>沒人要看</del>的解釋吧。基本上也亂看找出來的，簡單講一下當初的「脈絡」</p>

<ol>
<li>我知道我們平台是versatile，所以就<code>find | grep versatile</code>。從一堆檔案中我看到有趣的檔案<code>./arch/arm/configs/versatile_defconfig</code>。</li>
<li>接下來就是要找make 的時候怎麼和這個檔案勾起來。網路上找一下會發現一個變數<code>ARCH</code>，剩下就試看看<code>make ARCH=arm versatile_defconfig</code>，能不能動，可以動所以打完收工。</li>
</ol>


<p>然後你就知道</p>

<ol>
<li>Linux kernel source中有些平台會提供default config</li>
<li>透過<code>ARCH</code>可以讓make時自動參考這些檔案產生config</li>
</ol>


<p><a name="lk0_1_del_conf_qemu"></a></p>

<h3>設定Qemu VM支援的硬體</h3>

<p><font color="red"><strong>建議不要把buildroot compile cache打開。我花了很多時間在kernel 編譯後Qemu還是沒有使用編譯後的kernel的問題，最後發現關閉buildroot compile cache問題就消失了。</strong></font></p>

<p>如果閉著眼睛開始<a href="#lk0_1_del_conf_build">編譯</a>，你會很高興地發現可以開機了，但是接下來就會很失望的發現kernel panic，原因是認不出開機的disk。</p>

<p>之所以會發生這樣的原因是因為Linux kernel 提供的default config選項和buildroot 給Qemu的kernel 選項不同(<a href="#lk0_1_del_app_brot">參考</a>)，比對buildroot 開機畫面，會發現他們有偵測到兩個硬體，分別是</p>

<ol>
<li>SCSI 控制器，用來辨認rootfs</li>
<li>Realtek 8139 網路卡，不用我解釋吧</li>
</ol>


<p>那麼我們這邊直接把這兩個加上去就收工沒錯吧？答案是對也不對，因為這兩個東西會和其他的部份有關。</p>

<p>以下是我用笨方式一個一個試出來需要開啟的東西，不一定最簡潔甚至正確，但是他可以開機就是了。要注意不要編成module，編譯的細節我假設讀者都知道，如果完全不懂可能要找一下新手入門資訊了。另外我列出的選項是Kernel <code>4.4.2</code>下的選項，請自行斟酌。</p>

<p>記得<strong>請用<code>make ARCH=arm menuconfig</code>更改設定</strong></p>

<ol>
<li>PCI bus，原因是SCSI控制器和網路卡是PCI bus介面，不開就沒有不會看到這些選項。</li>
<li>SCSI 包括

<ul>
<li>SSCI device</li>
<li>Disk</li>
<li>我有開Generic，懶得關掉看會不會出問題了</li>
<li>SCSI low-level drivers -> SYM53C8XX Version 2 SCSI support</li>
</ul>
</li>
<li>Network device support

<ul>
<li>Ethernet driver suppor -> Realtek devices

<ul>
<li>RealTek RTL-8139 C+ PCI Fast Ethernet Adapter support</li>
</ul>
</li>
</ul>
</li>
<li>要支援buildroot預設的device node管理方式。有興趣的可以看<a href="https://buildroot.org/downloads/manual/manual.html#_dev_management">這邊</a>

<ul>
<li>Device Drivers -> Generic Driver Options ->

<ul>
<li>Maintain a devtmpfs filesystem to mount at /dev</li>
<li>Automount devtmpfs at /dev, after the kernel mounted the rootfs</li>
</ul>
</li>
</ul>
</li>
<li>File system 要支援ext2，原因是buildroot產生的是ext2檔案格式</li>
<li>tmpfs要開啟

<ul>
<li>File systems -> Pseudo filesystems

<ul>
<li>Tmpfs virtual memory file system support (former shm fs)</li>
</ul>
</li>
</ul>
</li>
</ol>


<p>建議順便巡一下其他kernel選項，用不到的可以關一下。比如說<code>MTD</code>，一堆有的沒的網卡，音效支援之類的。</p>

<p><a name="lk0_1_del_conf_build"></a></p>

<h3>編譯</h3>

<p><a name="lk0_1_del_conf_build_broot"></a></p>

<h4>Buildroot</h4>

<ol>
<li><code>make menuconfig</code>

<ul>
<li>Toolchain -> Custom kernel headers series

<ul>
<li>改成你現在Linux 版本</li>
</ul>
</li>
</ul>
</li>
<li><code>make</code></li>
</ol>


<p><a name="lk0_1_del_conf_build_lk"></a></p>

<h4>Linux kernel</h4>

<p>指令如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>make <span class="nv">CROSS_COMPILE</span><span class="o">=</span>/tmp/buildroot/output/host/usr/bin/arm-buildroot-linux-gnueabi- <span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">V</span><span class="o">=</span><span class="m">1</span> bzImage
</span></code></pre></td></tr></table></div></figure>


<p>這其實就是<code>make bzImage</code>的囉唆版，多了</p>

<ul>
<li><code>ARCH=arm</code>

<ul>
<li>指定ARM平台</li>
</ul>
</li>
<li><code>CROSS_COMPILE=..</code>

<ul>
<li>Cross compile prefix，既然我們使用buildroot內建toolchain，就用他們來編譯kernel</li>
</ul>
</li>
<li><code>V=1</code>

<ul>
<li>身為組裝工，沒看到編譯指令訊息跳出來就會沒安全感</li>
</ul>
</li>
</ul>


<p><a name="lk0_1_del_test"></a></p>

<h2>測試</h2>

<p>這邊卡關的原因是預設的buildroot (Linux kernel 4.7)使用qemu載入的時候需要指定device tree檔案。但是在Linux 4.4.2下面指定device tree檔案反而無法順利開機。我怎麼知道到的？撈git commit log去看的。</p>

<p>剩下就剪貼了</p>

<p><strong>我在buildroot top目錄執行的</strong>，你要嘛就切到buildroot目錄下，要嘛就指定<code>-drive file</code>到你自己rootfs的路徑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>qemu-system-arm -M versatilepb -kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage -drive <span class="nv">file</span><span class="o">=</span>output/images/rootfs.ext2,if<span class="o">=</span>scsi,format<span class="o">=</span>raw -append <span class="s2">&quot;root=/dev/sda console=ttyAMA0,115200&quot;</span> -serial stdio -net nic,model<span class="o">=</span>rtl8139 -net use
</span></code></pre></td></tr></table></div></figure>


<p>單純提出來一個參數表示這是我編譯出來的kernel而不是buildroot的</p>

<ul>
<li><code>-kernel /tmp/kernel/linux-stable/arch/arm/boot/zImage</code></li>
</ul>


<p>開機節錄畫面如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Uncompressing Linux... done, booting the kernel.
</span><span class='line'>Booting Linux on physical CPU 0x0
</span><span class='line'>Linux version 4.4.2 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #2 Fri Sep 30 22:46:53 CST 2016
</span><span class='line'>CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00093177
</span><span class='line'>CPU: VIVT data cache, VIVT instruction cache
</span><span class='line'>Machine: ARM-Versatile PB
</span><span class='line'>Memory policy: Data cache writeback
</span><span class='line'>sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 89478484971ns
</span><span class='line'>Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 32512
</span><span class='line'>Kernel command line: root=/dev/sda console=ttyAMA0,115200
</span><span class='line'>PID hash table entries: 512 (order: -1, 2048 bytes)
</span><span class='line'>Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)
</span><span class='line'>Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)
</span><span class='line'>Memory: 125956K/131072K available (2780K kernel code, 148K rwdata, 776K rodata, 128K init, 79K bss, 5116K reserved, 0K cma-reserved)
</span><span class='line'>Virtual kernel memory layout:
</span><span class='line'>    vector  : 0xffff0000 - 0xffff1000   (   4 kB)
</span><span class='line'>    fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)
</span><span class='line'>    vmalloc : 0xc8800000 - 0xff800000   ( 880 MB)
</span><span class='line'>    lowmem  : 0xc0000000 - 0xc8000000   ( 128 MB)
</span><span class='line'>    modules : 0xbf000000 - 0xc0000000   (  16 MB)
</span><span class='line'>      .text : 0xc0008000 - 0xc038158c   (3558 kB)
</span><span class='line'>      .init : 0xc0382000 - 0xc03a2000   ( 128 kB)
</span><span class='line'>      .data : 0xc03a2000 - 0xc03c7300   ( 149 kB)
</span><span class='line'>       .bss : 0xc03c7300 - 0xc03daf2c   (  80 kB)
</span><span class='line'>NR_IRQS:224
</span><span class='line'>VIC @f1140000: id 0x00041190, vendor 0x41
</span><span class='line'>FPGA IRQ chip 0 &quot;SIC&quot; @ f1003000, 13 irqs, parent IRQ: 63
</span><span class='line'>clocksource: timer3: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275 ns
</span><span class='line'>Console: colour dummy device 80x30
</span><span class='line'>Calibrating delay loop... 641.43 BogoMIPS (lpj=3207168)
</span><span class='line'>pid_max: default: 32768 minimum: 301
</span><span class='line'>Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>CPU: Testing write buffer coherency: ok
</span><span class='line'>Setting up static identity map for 0x8400 - 0x8458
</span><span class='line'>devtmpfs: initialized
</span><span class='line'>VFP support v0.3: implementor 41 architecture 1 part 10 variant 9 rev 0
</span><span class='line'>clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
</span><span class='line'>NET: Registered protocol family 16
</span><span class='line'>DMA: preallocated 256 KiB pool for atomic coherent allocations
</span><span class='line'>Serial: AMBA PL011 UART driver
</span><span class='line'>dev:f1: ttyAMA0 at MMIO 0x101f1000 (irq = 44, base_baud = 0) is a PL011 rev1
</span><span class='line'>console [ttyAMA0] enabled
</span><span class='line'>dev:f2: ttyAMA1 at MMIO 0x101f2000 (irq = 45, base_baud = 0) is a PL011 rev1
</span><span class='line'>dev:f3: ttyAMA2 at MMIO 0x101f3000 (irq = 46, base_baud = 0) is a PL011 rev1
</span><span class='line'>fpga:09: ttyAMA3 at MMIO 0x10009000 (irq = 70, base_baud = 0) is a PL011 rev1
</span><span class='line'>PCI core found (slot 11)
</span><span class='line'>PCI host bridge to bus 0000:00
</span><span class='line'>pci_bus 0000:00: root bus resource [mem 0x50000000-0x5fffffff]
</span><span class='line'>pci_bus 0000:00: root bus resource [mem 0x60000000-0x6fffffff pref]
</span><span class='line'>pci_bus 0000:00: root bus resource [io  0x1000-0xffff]
</span><span class='line'>pci_bus 0000:00: No busn resource found for root bus, will use [bus 00-ff]
</span><span class='line'>PCI: bus0: Fast back to back transfers disabled
</span><span class='line'>pci 0000:00:0c.0: BAR 6: assigned [mem 0x60000000-0x6003ffff pref]
</span><span class='line'>pci 0000:00:0d.0: BAR 2: assigned [mem 0x50000000-0x50001fff]
</span><span class='line'>pci 0000:00:0d.0: BAR 1: assigned [mem 0x50002000-0x500023ff]
</span><span class='line'>pci 0000:00:0c.0: BAR 0: assigned [io  0x1000-0x10ff]
</span><span class='line'>pci 0000:00:0c.0: BAR 1: assigned [mem 0x50002400-0x500024ff]
</span><span class='line'>pci 0000:00:0d.0: BAR 0: assigned [io  0x1400-0x14ff]
</span><span class='line'>vgaarb: loaded
</span><span class='line'>SCSI subsystem initialized
</span><span class='line'>clocksource: Switched to clocksource timer3
</span><span class='line'>NET: Registered protocol family 2
</span><span class='line'>TCP established hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>TCP: Hash tables configured (established 1024 bind 1024)
</span><span class='line'>UDP hash table entries: 256 (order: 0, 4096 bytes)
</span><span class='line'>UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
</span><span class='line'>NET: Registered protocol family 1
</span><span class='line'>NetWinder Floating Point Emulator V0.97 (double precision)
</span><span class='line'>futex hash table entries: 256 (order: -1, 3072 bytes)
</span><span class='line'>Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)
</span><span class='line'>io scheduler noop registered
</span><span class='line'>io scheduler deadline registered
</span><span class='line'>io scheduler cfq registered (default)
</span><span class='line'>pl061_gpio dev:e4: PL061 GPIO chip @0x101e4000 registered
</span><span class='line'>pl061_gpio dev:e5: PL061 GPIO chip @0x101e5000 registered
</span><span class='line'>pl061_gpio dev:e6: PL061 GPIO chip @0x101e6000 registered
</span><span class='line'>pl061_gpio dev:e7: PL061 GPIO chip @0x101e7000 registered
</span><span class='line'>clcd-pl11x dev:20: PL110 rev0 at 0x10120000
</span><span class='line'>clcd-pl11x dev:20: Versatile hardware, VGA display
</span><span class='line'>Console: switching to colour frame buffer device 80x60
</span><span class='line'>sym53c8xx 0000:00:0d.0: enabling device (0100 -&gt; 0103)
</span><span class='line'>sym0: &lt;895a&gt; rev 0x0 at pci 0000:00:0d.0 irq 94
</span><span class='line'>sym0: No NVRAM, ID 7, Fast-40, LVD, parity checking
</span><span class='line'>sym0: SCSI BUS has been reset.
</span><span class='line'>scsi host0: sym-2.2.3
</span><span class='line'>sym0: unknown interrupt(s) ignored, ISTAT=0x5 DSTAT=0x80 SIST=0x0
</span><span class='line'>scsi 0:0:0:0: Direct-Access     QEMU     QEMU HARDDISK    2.0. PQ: 0 ANSI: 5
</span><span class='line'>scsi target0:0:0: tagged command queuing enabled, command queue depth 16.
</span><span class='line'>scsi target0:0:0: Beginning Domain Validation
</span><span class='line'>scsi target0:0:0: Domain Validation skipping write tests
</span><span class='line'>scsi target0:0:0: Ending Domain Validation
</span><span class='line'>scsi 0:0:2:0: CD-ROM            QEMU     QEMU CD-ROM      2.0. PQ: 0 ANSI: 5
</span><span class='line'>scsi target0:0:2: tagged command queuing enabled, command queue depth 16.
</span><span class='line'>scsi target0:0:2: Beginning Domain Validation
</span><span class='line'>scsi target0:0:2: Domain Validation skipping write tests
</span><span class='line'>scsi target0:0:2: Ending Domain Validation
</span><span class='line'>sd 0:0:0:0: Attached scsi generic sg0 type 0
</span><span class='line'>scsi 0:0:2:0: Attached scsi generic sg1 type 5
</span><span class='line'>8139cp: 8139cp: 10/100 PCI Ethernet driver v1.3 (Mar 22, 2004)
</span><span class='line'>8139cp 0000:00:0c.0: enabling device (0100 -&gt; 0103)
</span><span class='line'>8139cp 0000:00:0c.0 eth0: RTL-8139C+ at 0xc8974400, 52:54:00:12:34:56, IRQ 93
</span><span class='line'>sd 0:0:0:0: [sda] 12666 512-byte logical blocks: (6.48 MB/6.18 MiB)
</span><span class='line'>sd 0:0:0:0: [sda] Write Protect is off
</span><span class='line'>sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn&#39;t support DPO or FUA
</span><span class='line'>sd 0:0:0:0: [sda] Attached SCSI disk
</span><span class='line'>mousedev: PS/2 mouse device common for all mice
</span><span class='line'>NET: Registered protocol family 17
</span><span class='line'>input: AT Raw Set 2 keyboard as /devices/fpga:06/serio0/input/input0
</span><span class='line'>input: ImExPS/2 Generic Explorer Mouse as /devices/fpga:07/serio1/input/input2
</span><span class='line'>VFS: Mounted root (ext2 filesystem) readonly on device 8:0.
</span><span class='line'>devtmpfs: mounted
</span><span class='line'>Freeing unused kernel memory: 128K (c0382000 - c03a2000)
</span><span class='line'>EXT2-fs (sda): warning: mounting unchecked fs, running e2fsck is recommended
</span><span class='line'>Starting logging: OK
</span><span class='line'>Initializing random number generator... random: dd urandom read with 48 bits of entropy available
</span><span class='line'>done.
</span><span class='line'>Starting network: 8139cp 0000:00:0c.0 eth0: link up, 100Mbps, full-duplex, lpa 0x05E1
</span><span class='line'>udhcpc: started, v1.25.0
</span><span class='line'>udhcpc: sending discover
</span><span class='line'>udhcpc: sending select for 10.0.2.15
</span><span class='line'>udhcpc: lease of 10.0.2.15 obtained, lease time 86400
</span><span class='line'>deleting routers
</span><span class='line'>adding dns 10.0.2.3
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Welcome to Buildroot
</span><span class='line'>buildroot login: root
</span><span class='line'>#
</span><span class='line'>random: nonblocking pool is initialized
</span></code></pre></td></tr></table></div></figure>


<p><a name="lk0_1_del_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://buildroot.org/downloads/manual/manual.html">Buildroot 官方手冊</a></li>
</ul>


<p><a name="lk0_1_del_app"></a></p>

<h2>附錄</h2>

<p><a name="lk0_1_del_app_brot"></a></p>

<h3>使用Buildroot 內建套件指定編譯Linux kernel 4.2.2</h3>

<p>當初會去做這個主要是因為開始編譯獨立的Linux kernel前要先驗證buildroot自己編的Linux 4.4.2是否可以用qemu開機。另外的好處的就是buildroot編譯出來的kernel config (在output/build/linux-4.4.2/.config) 可以和你自己的kernel config比對。</p>

<p>步驟如下</p>

<ol>
<li><a href="#lk0_1_del_app_brot_step1">找出buildroot 4.4.x的kernel config</a></li>
<li><a href="#lk0_1_del_app_brot_step2">更改buildroot config指定使用Linux 4.4.2</a></li>
<li><a href="#lk0_1_del_app_brot_step3">測試驗證</a></li>
</ol>


<p><a name="lk0_1_del_app_brot_step1"></a></p>

<h3>找出buildroot 4.4.x的kernel config</h3>

<p>前篇有<a href="blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu/#lk0_ins_set">提到</a><code>make qemu_arm_versatile_defconfig</code>這個指令和<code>buildroot/board/qemu/arm-versatile</code>這個目錄。我們進一步去看一下這個目錄</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls -gG board/qemu/arm-versatile
</span><span class='line'>total 8
</span><span class='line'>-rw-rw-r-- <span class="m">1</span> <span class="m">890</span> Sep <span class="m">30</span> 21:32 linux-4.7.config
</span><span class='line'>-rw-rw-r-- <span class="m">1</span> <span class="m">404</span> Sep <span class="m">30</span> 21:32 readme.txt
</span></code></pre></td></tr></table></div></figure>


<p>直接破梗</p>

<ul>
<li>readme.txt 告訴你怎麼用qemu 開機</li>
<li>linux-4.7.config 是Linux kernel config</li>
</ul>


<p>所以我會去<code>git log .</code>，撈看看有沒有Linux kernel 4.4.x的資料。果然給我看到一個commit</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>commit 93c640f00537d40fd25280c4c2c60f3b30808256
</span><span class='line'>Author: Gustavo Zacarias &lt;gustavo@zacarias.com.ar&gt;
</span><span class='line'>Date:   Sun Feb 7 18:19:13 2016 -0300
</span><span class='line'>
</span><span class='line'>    configs/qemu: bump to the latest linux versions
</span><span class='line'>...
</span><span class='line'>    arm_versatile           4.4.1           2.3.0   YES     OK
</span></code></pre></td></tr></table></div></figure>


<p>剩下就是使用git切到該commit，撈出資料，另存新檔。我把他存在
<code>/tmp/linux-4.4.config</code></p>

<p><a name="lk0_1_del_app_brot_step2"></a></p>

<h3>更改buildroot config指定使用Linux 4.4.2</h3>

<ul>
<li>make menuconfig

<ul>
<li>Kernel -> Kernel version -> Custom version</li>
<li>Kernel -> Kernel version: 填 4.4.2</li>
<li>Kernel -> Kernel configuration -> Using a custom (def)config file</li>
<li>Kernel -> Configuration file path: 填<code>/tmp/linux-4.4.config</code></li>
</ul>
</li>
<li>make</li>
</ul>


<p><a name="lk0_1_del_app_brot_step3"></a></p>

<h3>測試驗證</h3>

<p>根據buildroot/board/qemu/arm-versatile中4.4.2版時的readme.txt，qemu指令執行如下，基本上就是不去載入device tree檔案。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>qemu-system-arm -M versatilepb -kernel output/images/zImage -drive <span class="nv">file</span><span class="o">=</span>output/images/rootfs.ext2,if<span class="o">=</span>scsi,format<span class="o">=</span>raw -append <span class="s2">&quot;root=/dev/sda console=ttyAMA0,115200&quot;</span> -serial stdio -net nic,model<span class="o">=</span>rtl8139 -net user
</span></code></pre></td></tr></table></div></figure>


<p>以下是開機畫面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Uncompressing Linux... done, booting the kernel.
</span><span class='line'>Booting Linux on physical CPU 0x0
</span><span class='line'>Linux version 4.4.2 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #1 Fri Sep 30 22:36:58 CST 2016
</span><span class='line'>CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00093177
</span><span class='line'>CPU: VIVT data cache, VIVT instruction cache
</span><span class='line'>Machine: ARM-Versatile PB
</span><span class='line'>Memory policy: Data cache writeback
</span><span class='line'>sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 89478484971ns
</span><span class='line'>Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 32512
</span><span class='line'>Kernel command line: root=/dev/sda console=ttyAMA0,115200
</span><span class='line'>PID hash table entries: 512 (order: -1, 2048 bytes)
</span><span class='line'>Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)
</span><span class='line'>Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)
</span><span class='line'>Memory: 125264K/131072K available (3246K kernel code, 158K rwdata, 880K rodata, 120K init, 198K bss, 5808K reserved, 0K cma-reserved)
</span><span class='line'>Virtual kernel memory layout:
</span><span class='line'>    vector  : 0xffff0000 - 0xffff1000   (   4 kB)
</span><span class='line'>    fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)
</span><span class='line'>    vmalloc : 0xc8800000 - 0xff800000   ( 880 MB)
</span><span class='line'>    lowmem  : 0xc0000000 - 0xc8000000   ( 128 MB)
</span><span class='line'>    modules : 0xbf000000 - 0xc0000000   (  16 MB)
</span><span class='line'>      .text : 0xc0008000 - 0xc040fdcc   (4128 kB)
</span><span class='line'>      .init : 0xc0410000 - 0xc042e000   ( 120 kB)
</span><span class='line'>      .data : 0xc042e000 - 0xc04559e0   ( 159 kB)
</span><span class='line'>       .bss : 0xc04559e0 - 0xc04873a8   ( 199 kB)
</span><span class='line'>SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
</span><span class='line'>NR_IRQS:224
</span><span class='line'>VIC @f1140000: id 0x00041190, vendor 0x41
</span><span class='line'>FPGA IRQ chip 0 &quot;SIC&quot; @ f1003000, 13 irqs, parent IRQ: 63
</span><span class='line'>clocksource: timer3: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275 ns
</span><span class='line'>Console: colour dummy device 80x30
</span><span class='line'>Calibrating delay loop... 637.74 BogoMIPS (lpj=3188736)
</span><span class='line'>pid_max: default: 32768 minimum: 301
</span><span class='line'>Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>CPU: Testing write buffer coherency: ok
</span><span class='line'>Setting up static identity map for 0x8400 - 0x8458
</span><span class='line'>devtmpfs: initialized
</span><span class='line'>clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
</span><span class='line'>NET: Registered protocol family 16
</span><span class='line'>DMA: preallocated 256 KiB pool for atomic coherent allocations
</span><span class='line'>Serial: AMBA PL011 UART driver
</span><span class='line'>dev:f1: ttyAMA0 at MMIO 0x101f1000 (irq = 44, base_baud = 0) is a PL011 rev1
</span><span class='line'>console [ttyAMA0] enabled
</span><span class='line'>dev:f2: ttyAMA1 at MMIO 0x101f2000 (irq = 45, base_baud = 0) is a PL011 rev1
</span><span class='line'>dev:f3: ttyAMA2 at MMIO 0x101f3000 (irq = 46, base_baud = 0) is a PL011 rev1
</span><span class='line'>fpga:09: ttyAMA3 at MMIO 0x10009000 (irq = 70, base_baud = 0) is a PL011 rev1
</span><span class='line'>PCI core found (slot 11)
</span><span class='line'>PCI host bridge to bus 0000:00
</span><span class='line'>pci_bus 0000:00: root bus resource [mem 0x50000000-0x5fffffff]
</span><span class='line'>pci_bus 0000:00: root bus resource [mem 0x60000000-0x6fffffff pref]
</span><span class='line'>pci_bus 0000:00: root bus resource [io  0x1000-0xffff]
</span><span class='line'>pci_bus 0000:00: No busn resource found for root bus, will use [bus 00-ff]
</span><span class='line'>PCI: bus0: Fast back to back transfers disabled
</span><span class='line'>pci 0000:00:0c.0: BAR 6: assigned [mem 0x60000000-0x6003ffff pref]
</span><span class='line'>pci 0000:00:0d.0: BAR 2: assigned [mem 0x50000000-0x50001fff]
</span><span class='line'>pci 0000:00:0d.0: BAR 1: assigned [mem 0x50002000-0x500023ff]
</span><span class='line'>pci 0000:00:0c.0: BAR 0: assigned [io  0x1000-0x10ff]
</span><span class='line'>pci 0000:00:0c.0: BAR 1: assigned [mem 0x50002400-0x500024ff]
</span><span class='line'>pci 0000:00:0d.0: BAR 0: assigned [io  0x1400-0x14ff]
</span><span class='line'>vgaarb: loaded
</span><span class='line'>SCSI subsystem initialized
</span><span class='line'>clocksource: Switched to clocksource timer3
</span><span class='line'>NET: Registered protocol family 2
</span><span class='line'>TCP established hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
</span><span class='line'>TCP: Hash tables configured (established 1024 bind 1024)
</span><span class='line'>UDP hash table entries: 256 (order: 0, 4096 bytes)
</span><span class='line'>UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
</span><span class='line'>NET: Registered protocol family 1
</span><span class='line'>futex hash table entries: 256 (order: -1, 3072 bytes)
</span><span class='line'>Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)
</span><span class='line'>io scheduler noop registered
</span><span class='line'>io scheduler deadline registered
</span><span class='line'>io scheduler cfq registered (default)
</span><span class='line'>clcd-pl11x dev:20: PL110 rev0 at 0x10120000
</span><span class='line'>clcd-pl11x dev:20: Versatile hardware, VGA display
</span><span class='line'>Console: switching to colour frame buffer device 80x30
</span><span class='line'>sym53c8xx 0000:00:0d.0: enabling device (0100 -&gt; 0103)
</span><span class='line'>sym0: &lt;895a&gt; rev 0x0 at pci 0000:00:0d.0 irq 94
</span><span class='line'>sym0: No NVRAM, ID 7, Fast-40, LVD, parity checking
</span><span class='line'>sym0: SCSI BUS has been reset.
</span><span class='line'>scsi host0: sym-2.2.3
</span><span class='line'>sym0: unknown interrupt(s) ignored, ISTAT=0x5 DSTAT=0x80 SIST=0x0
</span><span class='line'>scsi 0:0:0:0: Direct-Access     QEMU     QEMU HARDDISK    2.0. PQ: 0 ANSI: 5
</span><span class='line'>scsi target0:0:0: tagged command queuing enabled, command queue depth 16.
</span><span class='line'>scsi target0:0:0: Beginning Domain Validation
</span><span class='line'>scsi target0:0:0: Domain Validation skipping write tests
</span><span class='line'>scsi target0:0:0: Ending Domain Validation
</span><span class='line'>scsi 0:0:2:0: CD-ROM            QEMU     QEMU CD-ROM      2.0. PQ: 0 ANSI: 5
</span><span class='line'>scsi target0:0:2: tagged command queuing enabled, command queue depth 16.
</span><span class='line'>scsi target0:0:2: Beginning Domain Validation
</span><span class='line'>scsi target0:0:2: Domain Validation skipping write tests
</span><span class='line'>scsi target0:0:2: Ending Domain Validation
</span><span class='line'>8139cp: 8139cp: 10/100 PCI Ethernet driver v1.3 (Mar 22, 2004)
</span><span class='line'>8139cp 0000:00:0c.0: enabling device (0100 -&gt; 0103)
</span><span class='line'>8139cp 0000:00:0c.0 eth0: RTL-8139C+ at 0xc8978400, 52:54:00:12:34:56, IRQ 93
</span><span class='line'>sd 0:0:0:0: [sda] 12666 512-byte logical blocks: (6.48 MB/6.18 MiB)
</span><span class='line'>sd 0:0:0:0: [sda] Write Protect is off
</span><span class='line'>sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn&#39;t support DPO or FUA
</span><span class='line'>mousedev: PS/2 mouse device common for all mice
</span><span class='line'>sd 0:0:0:0: [sda] Attached SCSI disk
</span><span class='line'>NET: Registered protocol family 10
</span><span class='line'>sit: IPv6 over IPv4 tunneling driver
</span><span class='line'>NET: Registered protocol family 17
</span><span class='line'>input: AT Raw Set 2 keyboard as /devices/fpga:06/serio0/input/input0
</span><span class='line'>input: ImExPS/2 Generic Explorer Mouse as /devices/fpga:07/serio1/input/input2
</span><span class='line'>EXT4-fs (sda): couldn&#39;t mount as ext3 due to feature incompatibilities
</span><span class='line'>EXT4-fs (sda): mounting ext2 file system using the ext4 subsystem
</span><span class='line'>EXT4-fs (sda): mounted filesystem without journal. Opts: (null)
</span><span class='line'>VFS: Mounted root (ext2 filesystem) readonly on device 8:0.
</span><span class='line'>devtmpfs: mounted
</span><span class='line'>Freeing unused kernel memory: 120K (c0410000 - c042e000)
</span><span class='line'>EXT4-fs (sda): warning: mounting unchecked fs, running e2fsck is recommended
</span><span class='line'>EXT4-fs warning (device sda): ext4_update_dynamic_rev:717: updating to rev 1 because of new feature flag, running e2fsck is recommended
</span><span class='line'>EXT4-fs (sda): re-mounted. Opts: block_validity,barrier,user_xattr,errors=remount-ro
</span><span class='line'>Starting logging: OK
</span><span class='line'>Initializing random number generator... random: dd urandom read with 43 bits of entropy available
</span><span class='line'>done.
</span><span class='line'>Starting network: 8139cp 0000:00:0c.0 eth0: link up, 100Mbps, full-duplex, lpa 0x05E1
</span><span class='line'>udhcpc: started, v1.25.0
</span><span class='line'>udhcpc: sending discover
</span><span class='line'>udhcpc: sending select for 10.0.2.15
</span><span class='line'>udhcpc: lease of 10.0.2.15 obtained, lease time 86400
</span><span class='line'>deleting routers
</span><span class='line'>adding dns 10.0.2.3
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Welcome to Buildroot
</span><span class='line'>buildroot login: root
</span><span class='line'>#
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(過期) Linux Kernel Pratice 0: Buildroot (1/2)]]></title>
    <link href="http://wen00072.github.io/blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu/"/>
    <updated>2016-09-27T09:43:20+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/09/27/linux-kernel-pratice-0-buildroot-setup-with-qemu</id>
    <content type="html"><![CDATA[<h3><font color="red">感謝Scott 大大糾正，選錯平台，這篇使用了ARMv4指令集的測試平台。請大家忽略，正確的版本將會之後更新!</font></h3>

<p>理論上不應該要邊移動邊開火，延長戰線。不過計劃趕不上變化，既來之則安之。</p>

<p>最近因為特別因素開始學習Linux kernel，看能不能Linux kernel和STM32兩邊都不要漏掉。不管怎樣，學習和實習絕對分不開，所以還是從環境架設開始吧。這次的實習環境架設的目標是：</p>

<ol>
<li>可以使用ARM 平台。一方面追求流行，一方面我不想再開x86這個副本</li>
<li>可以方便地建立ARM平台的Linux Rootfs和kernel版本</li>
<li>可以方便地更改指定要編譯的Kernel版本</li>
<li>透過Qemu ，使用2的Rootfs和kernel開機</li>
<li>透過Qemu和搭配的工具可以分析Linux kernel的run time 行為</li>
</ol>


<p>今天只有辦到1, 2和4而已，剩下的還要繼續努力。</p>

<h2>目錄</h2>

<ul>
<li><a href="#de_lk0_env">測試環境</a></li>
<li><a href="#de_lk0_ins">安裝Buildroot</a>

<ul>
<li><a href="#de_lk0_ins_dl">下載Buildroot</a></li>
<li><a href="#de_lk0_ins_set">設定ARM 環境</a></li>
<li><a href="#de_lk0_ins_build">編譯及輸出</a></li>
</ul>
</li>
<li><a href="#de_lk0_test">測試</a></li>
<li><a href="#de_lk0_ref">參考資料</a>

<ul>
<li><a href="#de_lk0_ref_data">下次準備看的資料</a></li>
</ul>
</li>
</ul>


<p><a name="de_lk0_env"></a></p>

<h2>測試環境</h2>

<p>因為我已經裝過開發相關的套件，因此如果您是新手可能要自行摸索也許有需要另外安裝的套件如<code>git</code>。嘛，練習解讀錯誤訊息也是一種學習。</p>

<pre>
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</pre>


<p><a name="de_lk0_ins"></a></p>

<h2>安裝Buildroot</h2>

<p>主要分成下面三個步驟</p>

<ul>
<li><a href="#de_lk0_ins_dl">下載Buildroot</a></li>
<li><a href="#de_lk0_ins_set">設定ARM 環境</a></li>
<li><a href="#de_lk0_ins_build">編譯及輸出</a></li>
</ul>


<p><a name="de_lk0_ins_dl"></a></p>

<h3>下載Buildroot</h3>

<p>直接看例子，剪下貼上就好</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir buildroot
</span><span class='line'><span class="nb">cd </span>buildroot
</span><span class='line'>git clone git://git.buildroot.net/buildroot
</span></code></pre></td></tr></table></div></figure>


<p><a name="de_lk0_ins_set"></a></p>

<h3>設定ARM 環境</h3>

<p>網路上查到大部分都是從<code>make menuconfig</code>開始。不過我是很<strong>明確地</strong>要用<code>Qemu</code>跑ARM的系統。所以就找了一下發現有下面的指令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>make qemu_x86_defconfig
</span></code></pre></td></tr></table></div></figure>


<p>想說既然有<code>x86_defconfig</code>，那應該有<code>arm_defconfig</code>吧? 錯！那我就去<code>buildroot/board/qemu</code>目錄下找，有看到<code>arm-versatile</code>。印象中<a href="blog/2015/02/07/by-qemu-arm-installation-of-debian-systems/">以前</a>有用過Qemu跑的Debian系統也是<code>versatile</code>。所以就很高興地下了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>make qemu_arm-versatile_defconfig
</span></code></pre></td></tr></table></div></figure>


<p>結果一樣GG，估狗查才知道正確的用法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>make qemu_arm_versatile_defconfig
</span></code></pre></td></tr></table></div></figure>


<p><strong>更新:</strong> 後來看手冊才知道有<code>make list-defconfigs</code>可以查詢有哪些default config，果然前輩說要RTFM是對的，唉。</p>

<p>接下來就用<code>make menuconfig</code>做細項調整，我主要是改成</p>

<ol>
<li>使用glibc</li>
<li>使用gcc 4.8

<ul>
<li>預設5.x，因為我想要編Linux kernel 4.4.2。以前PC經驗使用gcc 5.x極端痛苦，後來還是換回gcc 4.8</li>
</ul>
</li>
<li>一些除錯設定</li>
</ol>


<p>另外本來想要嘗試設定更動Kernel版本，但是發現需要更進一步的了解buildroot才能夠達成。當作下次目標吧。</p>

<p><a name="de_lk0_ins_build"></a></p>

<h3>編譯及輸出</h3>

<p>編譯只要下<code>make</code>就會幫你下載和編譯開機需要的</p>

<ol>
<li>套件和一些常用工具，並封裝到<code>output/image/roofs.ext2</code></li>
<li>Kernel(預設4.7)，編譯成<code>zImage</code>，放在<code>output/image/zImage</code></li>
</ol>


<p><a name="de_lk0_test"></a></p>

<h2>測試</h2>

<p>接下來也不難，可以參考<code>board/qemu/arm-versatile/readme.txt</code>
簡單來說就是執行下面指令，開機完使用<code>root</code>登入不用密碼，使用<code>poweroff</code>後再手動離開qemu。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>qemu-system-arm -M versatilepb -kernel output/images/zImage -dtb output/images/versatile-pb.dtb -drive <span class="nv">file</span><span class="o">=</span>output/images/rootfs.ext2,if<span class="o">=</span>scsi,format<span class="o">=</span>raw -append <span class="s2">&quot;root=/dev/sda console=ttyAMA0,115200&quot;</span> -serial stdio -net nic,model<span class="o">=</span>rtl8139 -net user
</span></code></pre></td></tr></table></div></figure>


<p>執行畫面如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ qemu-system-arm -M versatilepb -kernel output/images/zImage -dtb output/images/versatile-pb.dtb -drive file=output/images/rootfs.ext2,if=scsi,format=raw -append &quot;root=/dev/sda console=ttyAMA0,115200&quot; -serial stdio -net nic,model=rtl8139 -net user
</span><span class='line'>...
</span><span class='line'>Booting Linux on physical CPU 0x0
</span><span class='line'>Linux version 4.7.0 (user@host) (gcc version 4.8.5 (Buildroot 2016.11-git-00439-g14b2472) ) #1 Mon Sep 26 22:36:42 CST 2016
</span><span class='line'>CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00093177
</span><span class='line'>CPU: VIVT data cache, VIVT instruction cache
</span><span class='line'>Machine model: ARM Versatile PB
</span><span class='line'>....
</span><span class='line'>EXT4-fs (sda): re-mounted. Opts: block_validity,barrier,user_xattr,errors=remount-ro
</span><span class='line'>Starting logging: OK
</span><span class='line'>Initializing random number generator... random: dd urandom read with 46 bits of entropy available
</span><span class='line'>done.
</span><span class='line'>Starting network: 8139cp 0000:00:0c.0 eth0: link up, 100Mbps, full-duplex, lpa 0x05E1
</span><span class='line'>...
</span><span class='line'>adding dns 10.0.2.3
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'>Welcome to Buildroot
</span><span class='line'>buildroot login: root
</span><span class='line'>#
</span></code></pre></td></tr></table></div></figure>


<p><a name="de_lk0_ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="https://buildroot.org/downloads/manual/manual.html">The Buildroot user manual</a>

<ul>
<li>只有看部份，不過官方文件本來就是應該放在第一位</li>
</ul>
</li>
<li><a href="http://pressreset.net/2013/09/buildroot-and-qemu-the-quickest-receipe-for-your-own-linux/">Buildroot and QEMU – the quickest receipe for your own Linux</a>

<ul>
<li>東西弄完才看到的文章，入門好文</li>
</ul>
</li>
</ul>


<p><a name="de_lk0_ref_data"></a></p>

<h3>下次準備看的資料</h3>

<ul>
<li><a href="http://www.linux-magazine.com/Online/Features/Qemu-and-the-Kernel">Qemu and the Kernel</a>

<ul>
<li>使用Qemu debug kernel的資料</li>
</ul>
</li>
<li><a href="http://unix.stackexchange.com/questions/90423/can-virtfs-9p-be-used-as-root-file-system">Stackoverflow: Can virtfs/9p be used as root file system?</a>

<ul>
<li>Qemu和Host主機共享資料，甚至直接把rootfs放host讓qemu去讀取的方式</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARM CM4 Pratice (4): Semihosting]]></title>
    <link href="http://wen00072.github.io/blog/2016/08/10/arm-cm4-pratice-4-semihosting/"/>
    <updated>2016-08-10T12:51:46+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/08/10/arm-cm4-pratice-4-semihosting</id>
    <content type="html"><![CDATA[<p>Semihosting 是一種讓開發版透過除錯介面執行主機上的服務。透過semihosting，使用者可以快速驗證功能。舉例來說，在USART還沒搞定前先把訊息透過semihosting印到主機上觀看程式的行為。</p>

<p>本次練習使用<code>openocd</code>提供主機上的服務。以下是這次的練習</p>

<h2>目錄</h2>

<ul>
<li><a href="#stm-4-env">測試環境</a></li>
<li><a href="#stm-4-semi">使用Semihosting</a>

<ul>
<li><a href="#stm-4-semi-target">開發版</a></li>
<li><a href="#stm-4-semi-host">主機 (openocd)</a></li>
</ul>
</li>
<li><a href="#stm-4-test">實驗：Echo</a>

<ul>
<li><a href="#stm-4-test-code">程式</a>

<ul>
<li><a href="#stm-4-test-code-main">主程式</a></li>
<li><a href="#stm-4-test-code-semi">Semihosting 程式</a></li>
</ul>
</li>
<li><a href="#stm-4-test-makefile">Makefile</a></li>
<li><a href="#stm-4-test-result">執行結果</a></li>
</ul>
</li>
<li><a href="#stm-4-ref">參考資料</a></li>
</ul>


<p><a name="stm-4-env"></a></p>

<h2>測試環境</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 14.04.4 LTS
</span><span class='line'>Release:  14.04
</span><span class='line'>Codename: trusty
</span><span class='line'>
</span><span class='line'>$ arm-none-eabi-gcc --version
</span><span class='line'>arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-branch revision 237715]
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>$ openocd --version
</span><span class='line'>Open On-Chip Debugger 0.10.0-dev-00250-g9c37747 (2016-04-07-22:20)
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>SPL版本： STM32F4xx_DSP_StdPeriph_Lib_V1.6.1</li>
<li>開發板： STM32F4 Dicovery, <a href="http://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-discovery-kits/32f429idiscovery.html">STM32F429-Disco</a></li>
</ul>


<p><a name="stm-4-semi"></a></p>

<h2>使用Semihosting</h2>

<p><a name="stm-4-semi-target"></a></p>

<h3>開發版</h3>

<p>ARM官方網站有說，在ARMv6-M 和 ARMv7-M (Cortex M4是ARMv7E-M)架構中，使用break point指令並帶入參數<code>0xab</code>即可。詳細的使用範例會在<a href="#stm-4-test">後面</a>說明。</p>

<p>以下是ARM規範的Semihosting服務</p>

<ul>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/BEIDFAEH.html">angel_SWIreason_EnterSVC (0x17)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/BEIGEDFE.html">angel_SWIreason_ReportException (0x18)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccdcef.html">SYS_CLOSE (0x02)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdcfje.html">SYS_CLOCK (0x10)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdgdcc.html">SYS_ELAPSED (0x30)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdhfgc.html">SYS_ERRNO (0x13)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdgdic.html">SYS_FLEN (0x0C)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccbcbe.html">SYS_GET_CMDLINE (0x15)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbefaa.html">SYS_HEAPINFO (0x16)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccjafh.html">SYS_ISERROR (0x08)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbhcee.html">SYS_ISTTY (0x09)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdagge.html">SYS_OPEN (0x01)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baceahbd.html">SYS_READ (0x06)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccbaba.html">SYS_READC (0x07)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbffjf.html">SYS_REMOVE (0x0E)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdjebc.html">SYS_RENAME (0x0F)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdfgcg.html">SYS_SEEK (0x0A)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdijcb.html">SYS_SYSTEM (0x12)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacchdbe.html">SYS_TICKFREQ (0x31)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacebdhg.html">SYS_TIME (0x11)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Baccafja.html">SYS_TMPNAM (0x0D)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbedji.html">SYS_WRITE (0x05)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacbejbe.html">SYS_WRITEC (0x03)</a></li>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/Bacdhdcd.html">SYS_WRITE0 (0x04)</a></li>
</ul>


<p><a name="stm-4-semi-host"></a></p>

<h3>主機 (openocd)</h3>

<p>其實非常簡單，就是啟動openocd的時候要把semihosting打開。單獨指令如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>arm semihosting enable
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-4-test"></a></p>

<h2>實驗：Echo</h2>

<p>完整可以編譯的程式碼在<a href="https://github.com/zzz0072/STM32F429-Discovery-Disco-Pratice/tree/master/labs/2_semihosting">這邊</a></p>

<p>這個實驗行為和<a href="http://wen00072.github.io/blog/2016/08/05/arm-cm4-pratice-3-lab-usart/">前一個實驗</a>很類似，就是透過semihosting的read服務主機端輸入資料，然後再透過semihosting的write服務印到螢幕上。</p>

<p><a name="stm-4-test-code"></a></p>

<h3>程式</h3>

<p><a name="stm-4-test-code-main"></a></p>

<h4>主程式</h4>

<p>非常簡單，唯一要說明的是在微處理器中，所有的東西都要自己來，也就是說下面的<code>memset</code>、<code>strlen</code>都是自己寫的。</p>

<figure class='code'><figcaption><span>semihosting.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;my_utils.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define GREETING_STR  &quot;Hello World\n\r&quot;</span>
</span><span class='line'><span class="cp">#define PROMPT_STR    &quot;\r&gt; &quot;</span>
</span><span class='line'><span class="cp">#define LINE_MAX_CHAR (64)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="n">LINE_MAX_CHAR</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Greeting */</span>
</span><span class='line'>    <span class="n">host_write</span><span class="p">(</span><span class="n">STDOUT</span><span class="p">,</span> <span class="n">GREETING_STR</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">GREETING_STR</span><span class="p">));</span>
</span><span class='line'>    <span class="n">host_write</span><span class="p">(</span><span class="n">STDOUT</span><span class="p">,</span> <span class="n">PROMPT_STR</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">PROMPT_STR</span><span class="p">));</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="n">LINE_MAX_CHAR</span><span class="p">);</span>
</span><span class='line'>        <span class="n">host_read</span><span class="p">(</span><span class="n">STDIN</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="n">LINE_MAX_CHAR</span><span class="p">);</span>
</span><span class='line'>        <span class="n">host_write</span><span class="p">(</span><span class="n">STDOUT</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">line</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Show prompt */</span>
</span><span class='line'>        <span class="n">host_write</span><span class="p">(</span><span class="n">STDOUT</span><span class="p">,</span> <span class="n">PROMPT_STR</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">PROMPT_STR</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-4-test-code-semi"></a></p>

<h4>semihosting 程式</h4>

<p>首先我們從手冊中知道read/write的semihosting對應代號，<font color="red">用hardcode是不道德的</font>，所以我們使用有意義的文字代替。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">enum</span> <span class="n">HOST_SYSCALL</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">HOSTCALL_WRITE</span>       <span class="o">=</span> <span class="mh">0x05</span><span class="p">,</span>
</span><span class='line'>    <span class="n">HOSTCALL_READ</span>        <span class="o">=</span> <span class="mh">0x06</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下來我們發現read/write參數的型態有整數(file descriptor)
和位址這兩種，而手冊中說明參數傳遞的方式是將參數全部放在一個連續的記憶體空間，再將該記憶體空間位址存放在<code>R1</code>暫存器中。也就是說我們需要</p>

<ol>
<li>連續的空間</li>
<li>空間中的參數可能有多個，而且它們的型態可能都不同</li>
</ol>


<p>要達到這樣的方式，以前上課看來的方式就是做一個<code>union</code>。每次使用時建立陣列、指令參數型態和值，接下來把該陣列的位址傳給semihosting就可以了。</p>

<p>以下是這次用的<code>union</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Semihost system call parameters */</span>
</span><span class='line'><span class="k">union</span> <span class="kt">param_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span>   <span class="n">pdInt</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">pdPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">union</span> <span class="kt">param_t</span> <span class="n">param</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下來是實際的呼叫semihosting服務。就是前面提到下break point指令。你可能會問這邊怎麼沒有參數傳遞？傻孩子，這就是ABI存在的目的了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">host_call</span><span class="p">(</span><span class="k">enum</span> <span class="n">HOST_SYSCALL</span> <span class="n">action</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="n">__attribute__</span> <span class="p">((</span><span class="kr">naked</span><span class="p">));</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">host_call</span><span class="p">(</span><span class="k">enum</span> <span class="n">HOST_SYSCALL</span> <span class="n">action</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__asm__</span><span class="p">(</span> \
</span><span class='line'>      <span class="s">&quot;bkpt 0xAB</span><span class="se">\n</span><span class="s">&quot;</span>\
</span><span class='line'>      <span class="s">&quot;nop</span><span class="se">\n</span><span class="s">&quot;</span> \
</span><span class='line'>      <span class="s">&quot;bx lr</span><span class="se">\n</span><span class="s">&quot;</span>\
</span><span class='line'>        <span class="o">:</span><span class="s">&quot;=r&quot;</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">::</span>\
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>剩下就簡單了，設定好參數呼叫semihosting的介面收工。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">size_t</span> <span class="nf">host_read</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">param</span> <span class="n">semi_param</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdInt</span> <span class="o">=</span> <span class="n">fd</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdPtr</span> <span class="o">=</span> <span class="n">buf</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdInt</span> <span class="o">=</span> <span class="n">count</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">host_call</span><span class="p">(</span><span class="n">HOSTCALL_READ</span><span class="p">,</span> <span class="n">semi_param</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">size_t</span> <span class="nf">host_write</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">param</span> <span class="n">semi_param</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdInt</span> <span class="o">=</span> <span class="n">fd</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdPtr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">buf</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="p">.</span><span class="n">pdInt</span> <span class="o">=</span> <span class="n">count</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">host_call</span><span class="p">(</span><span class="n">HOSTCALL_WRITE</span><span class="p">,</span> <span class="n">semi_param</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-4-test-makefile"></a></p>

<h3>Makefile</h3>

<p>最主要的是要透過openocd提供semihosting服務。如果想要在gdb測試時打開可以參考<a href="http://electronics.stackexchange.com/questions/149387/how-do-i-print-debug-messages-to-gdb-console-with-stm32-discovery-board-using-gd">這邊</a>的資料。</p>

<p>Makefile相關描述如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Makefile'><span class='line'><span class="nf">run</span><span class="o">:</span> <span class="k">$(</span><span class="nv">OUT_DIR</span><span class="k">)</span>/<span class="k">$(</span><span class="nv">TARGET</span><span class="k">)</span>.<span class="n">bin</span>
</span><span class='line'>  openocd -f interface/stlink-v2.cfg  <span class="se">\</span>
</span><span class='line'>            -f target/stm32f4x.cfg      <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;init&quot;</span>                   <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;reset init&quot;</span>             <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;arm semihosting enable&quot;</span> <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;reset run&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-4-test-result"></a></p>

<h3>執行結果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ make run
</span><span class='line'>openocd -f interface/stlink-v2.cfg  \
</span><span class='line'>            -f target/stm32f4x.cfg      \
</span><span class='line'>            -c &quot;init&quot;                   \
</span><span class='line'>            -c &quot;reset init&quot;             \
</span><span class='line'>            -c &quot;arm semihosting enable&quot; \
</span><span class='line'>            -c &quot;reset run&quot;
</span><span class='line'>Open On-Chip Debugger 0.10.0-dev-00250-g9c37747 (2016-04-07-22:20)
</span><span class='line'>Licensed under GNU GPL v2
</span><span class='line'>For bug reports, read
</span><span class='line'>  http://openocd.org/doc/doxygen/bugs.html
</span><span class='line'>Info : auto-selecting first available session transport &quot;hla_swd&quot;. To override use &#39;transport select &lt;transport&gt;&#39;.
</span><span class='line'>Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD
</span><span class='line'>adapter speed: 2000 kHz
</span><span class='line'>adapter_nsrst_delay: 100
</span><span class='line'>none separate
</span><span class='line'>Info : Unable to match requested speed 2000 kHz, using 1800 kHz
</span><span class='line'>Info : Unable to match requested speed 2000 kHz, using 1800 kHz
</span><span class='line'>Info : clock speed 1800 kHz
</span><span class='line'>Info : STLINK v2 JTAG v17 API v2 SWIM v0 VID 0x0483 PID 0x3748
</span><span class='line'>Info : using stlink api v2
</span><span class='line'>Info : Target voltage: 2.883392
</span><span class='line'>Info : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints
</span><span class='line'>adapter speed: 2000 kHz
</span><span class='line'>stm32f4x.cpu: target state: halted
</span><span class='line'>target halted due to debug-request, current mode: Thread
</span><span class='line'>xPSR: 0x01000000 pc: 0x080005c4 msp: 0x20030000
</span><span class='line'>adapter speed: 8000 kHz
</span><span class='line'>semihosting is enabled
</span><span class='line'>adapter speed: 2000 kHz
</span><span class='line'>Hello World
</span><span class='line'>&gt; My test
</span><span class='line'>My test
</span><span class='line'>&gt; !!!!
</span><span class='line'>!!!!
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-4-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0471g/CHDJHHDI.html">ARM Compiler toolchain Developing Software for ARM Processors: Semihosting</a></li>
<li><a href="http://openocd.org/doc/html/Architecture-and-Core-Commands.html">OpenOCD User&rsquo;s Guide: Architecture and Core Commands</a></li>
<li><a href="http://bgamari.github.io/posts/2014-10-31-semihosting.html">Semihosting on ARM with GCC and OpenOCD</a>

<ul>
<li>這個很有趣，可以用Semihosting直接使用glibc的stdio，不過做實驗就是要吃原味，要又痛又爽才是最高境界，所以這個我就沒去嘗試了</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARM CM4 Pratice (3): USART 初探]]></title>
    <link href="http://wen00072.github.io/blog/2016/08/05/arm-cm4-pratice-3-lab-usart/"/>
    <updated>2016-08-05T15:53:47+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/08/05/arm-cm4-pratice-3-lab-usart</id>
    <content type="html"><![CDATA[<h2>致謝</h2>

<p>感謝網友<a href="https://github.com/starnight">Zack</a>，<a href="http://vh21.github.io/">Villar</a>，學弟Joe Ho，還有其他大大的幫忙，不然這次應該是撞牆撞到死吧。</p>

<h2>前言</h2>

<p>這次實驗有卡關，不然其實不算難。卡關的點如下：</p>

<ul>
<li>一開始使用USART1，可是USART1接到STLink 接腳，最後用USART6代替。(<a href="http://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-discovery-kits/32f429idiscovery.html">STM32F4 Discovry Disco 開發版手冊</a>，p19, SB11那段)</li>
<li>SPL的HSE 設定和版子不合，造成Baud rate計算錯誤。</li>
</ul>


<p>這次的實驗是一個ECHO程式，透過版子上的USART6和電腦連線，電腦送出什麼字元，版子就傳回什麼字元。</p>

<h2>目錄</h2>

<ul>
<li><a href="#stm-3-prepare">事前準備</a></li>
<li><a href="#stm-3-env">測試環境</a></li>
<li><a href="#stm-3-usart">USART 控制</a></li>
<li><a href="#stm-3-code">程式碼</a>

<ul>
<li><a href="#stm-3-code-code">完整程式碼</a></li>
<li><a href="#stm-3-code-make">Makefile</a></li>
</ul>
</li>
<li><a href="#stm-3-test">功能驗證</a></li>
<li><a href="#stm-3-ref">參考資料</a></li>
</ul>


<p><a name="stm-3-prepare"></a></p>

<h2>事前準備</h2>

<ul>
<li><p>Saleae 邏輯分析儀 (一千新台幣有找）</p>

<ul>
<li>需要自行到Saleae官方網站下載安裝Linux版軟體
<img src="http://wen00072.github.io/files/stm32/STM_LG.jpg"/></li>
</ul>
</li>
<li><p>USB 轉 RS232 TTL 轉接線
<img src="http://wen00072.github.io/files/banana_pi/DSC_0026.jpg"/></p></li>
</ul>


<p><a name="stm-3-env"></a></p>

<h2>測試環境</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ lsb_release -a
</span><span class='line'>No LSB modules are available.
</span><span class='line'>Distributor ID:   Ubuntu
</span><span class='line'>Description:  Ubuntu 14.04.4 LTS
</span><span class='line'>Release:  14.04
</span><span class='line'>Codename: trusty
</span><span class='line'>
</span><span class='line'>$ arm-none-eabi-gcc --version
</span><span class='line'>arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-branch revision 237715]
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>SPL版本： STM32F4xx_DSP_StdPeriph_Lib_V1.6.1</li>
<li>開發板： STM32F4 Dicovery, <a href="http://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-discovery-kits/32f429idiscovery.html">STM32F429-Disco</a></li>
</ul>


<p><a name="stm-3-usart"></a></p>

<h2>USART 控制</h2>

<p>對於組裝工來說，我想要理解的不是電位差之這些電器信號。甚至在組裝時我也不在意暫存器設定等東西和背後的原理（好孩子不要學）。我關心的是</p>

<ol>
<li>我們要用哪些資源？</li>
<li>這些資源對應的實體腳位是？</li>
<li>軟體中怎麼樣設定和啟動設備？</li>
<li>軟體中怎麼樣傳輸資料？</li>
</ol>


<p>我們針對這四個問題一一處理</p>

<h3>我們要用哪些資源？</h3>

<p>從手冊可以看到有八個USART可以用。我原本是挑USART1來用，不過後來卡關經過網友提醒發現要避開USART1。後來發現APB2上面除了USART1外另外一個USART是USART6。懶得太多程式碼的情況下就挑了USART6。</p>

<h3>這些資源對應的實體腳位是？</h3>

<p>一樣要翻手冊。</p>

<ul>
<li>PC6: UASRT6 TX</li>
<li>PC7: USART6 RX</li>
</ul>


<h3>軟體中怎麼樣設定和啟動設備？</h3>

<p>要分兩個部份討論</p>

<h4>a. GPIOC 設定</h4>

<p>要設定</p>

<ul>
<li>開啟GPIOC的clock</li>
<li>設定Pin腳，設定PC6和PC7這兩個腳位。為什麼是這兩個腳位請查手冊

<ul>
<li>PC6: 設成Alternate function，也就是USART6 TX</li>
<li>PC7: 設成Alternate function，也就是USART6 RX</li>
<li>其他

<ul>
<li>設定為Pull UP，這和USART通訊協定有關，在IDLE時維持高電位</li>
<li>設定Push-Pull輸出模式，這個我完全不懂只是閉著眼睛抄的</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>來看大家最討厭看的程式碼片斷吧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GPIO_InitTypeDef</span> <span class="n">GPIO_InitStructure</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Enable GPIOC clock */</span>
</span><span class='line'><span class="n">RCC_AHB1PeriphClockCmd</span><span class="p">(</span><span class="n">RCC_AHB1Periph_GPIOC</span><span class="p">,</span> <span class="n">ENABLE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Connect USART6_Tx instead of PC6 */</span>
</span><span class='line'><span class="n">GPIO_PinAFConfig</span><span class="p">(</span><span class="n">GPIOC</span><span class="p">,</span> <span class="n">GPIO_PinSource6</span><span class="p">,</span> <span class="n">GPIO_AF_USART6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Connect USART6_Rx instead of PC7 */</span>
</span><span class='line'><span class="n">GPIO_PinAFConfig</span><span class="p">(</span><span class="n">GPIOC</span><span class="p">,</span> <span class="n">GPIO_PinSource7</span><span class="p">,</span> <span class="n">GPIO_AF_USART6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Configure USART Tx (PC6) and Rx (PC7) as alternate function  */</span>
</span><span class='line'><span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_Mode</span>  <span class="o">=</span> <span class="n">GPIO_Mode_AF</span><span class="p">;</span>
</span><span class='line'><span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_Pin</span>   <span class="o">=</span> <span class="n">GPIO_Pin_6</span> <span class="o">|</span> <span class="n">GPIO_Pin_7</span><span class="p">;</span>
</span><span class='line'><span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_Speed</span> <span class="o">=</span> <span class="n">GPIO_Speed_100MHz</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_OType</span> <span class="o">=</span> <span class="n">GPIO_OType_PP</span><span class="p">;</span>
</span><span class='line'><span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_PuPd</span>  <span class="o">=</span> <span class="n">GPIO_PuPd_UP</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">GPIO_Init</span><span class="p">(</span><span class="n">GPIOC</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">GPIO_InitStructure</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>b. USART6 設定</h4>

<p>依下列步驟</p>

<ol>
<li>開啟USART6的clock</li>
<li>設定USART6

<ul>
<li>115200 BPS</li>
<li>No parity bit</li>
<li>8-bit 資料</li>
<li>1 Stop bit</li>
<li>關閉硬體流量控制</li>
<li>TX/RX模式都打開</li>
</ul>
</li>
<li>啟動UASRT6</li>
</ol>


<p>一樣來看大家最討厭看的程式碼片斷吧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">USART_InitTypeDef</span> <span class="n">USART_InitStruct</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Enable USART6 clock */</span>
</span><span class='line'><span class="n">RCC_APB2PeriphClockCmd</span><span class="p">(</span><span class="n">RCC_APB2Periph_USART6</span><span class="p">,</span> <span class="n">ENABLE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 115200, N81  */</span>
</span><span class='line'><span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_BaudRate</span> <span class="o">=</span> <span class="mi">115200</span><span class="p">;</span>
</span><span class='line'><span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_WordLength</span> <span class="o">=</span> <span class="n">USART_WordLength_8b</span><span class="p">;</span>
</span><span class='line'><span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_StopBits</span> <span class="o">=</span> <span class="n">USART_StopBits_1</span><span class="p">;</span>
</span><span class='line'><span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_Parity</span> <span class="o">=</span> <span class="n">USART_Parity_No</span><span class="p">;</span>
</span><span class='line'><span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_HardwareFlowControl</span> <span class="o">=</span> <span class="n">USART_HardwareFlowControl_None</span><span class="p">;</span>
</span><span class='line'><span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_Mode</span> <span class="o">=</span> <span class="n">USART_Mode_Rx</span> <span class="o">|</span> <span class="n">USART_Mode_Tx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Apply USART settings */</span>
</span><span class='line'><span class="n">USART_Init</span><span class="p">(</span><span class="n">USART6</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">USART_InitStruct</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Enable USART */</span>
</span><span class='line'><span class="n">USART_Cmd</span><span class="p">(</span><span class="n">USART6</span><span class="p">,</span> <span class="n">ENABLE</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>軟體中怎麼樣傳輸資料？</h3>

<p>這部份還蠻直覺的，就是檢查狀態。可以送的時候就寫資料到暫存器去；有資料時從暫存器讀出資料。程式碼夠短應該不會那麼討厭吧？另外SPL也有提供USART傳輸接收的函數，請自行查詢。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="nf">getchar</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">USART_GetFlagStatus</span><span class="p">(</span><span class="n">USART6</span><span class="p">,</span> <span class="n">USART_FLAG_RXNE</span><span class="p">)</span> <span class="o">==</span> <span class="n">RESET</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">USART6</span><span class="o">-&gt;</span><span class="n">DR</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">putchar</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Wait until data was tranferred */</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">USART_GetFlagStatus</span><span class="p">(</span><span class="n">USART6</span><span class="p">,</span> <span class="n">USART_FLAG_TXE</span><span class="p">)</span> <span class="o">==</span> <span class="n">RESET</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">USART6</span><span class="o">-&gt;</span><span class="n">DR</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-3-code"></a></p>

<h2>程式碼</h2>

<p>最完整可編譯程式碼放在<a href="https://github.com/zzz0072/STM32F429-Discovery-Disco-Pratice/tree/master/labs/1_usart">這邊</a>。</p>

<p>前面有提到HSE設定需要更動為8MHz。我是在<code>stm32f4xx_conf.h</code>加入以下片斷。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#if defined  (HSE_VALUE)</span>
</span><span class='line'><span class="cm">/* Redefine the HSE value; it&#39;s equal to 8 MHz on the STM32F4-DISCOVERY Kit */</span>
</span><span class='line'> <span class="cp">#undef HSE_VALUE</span>
</span><span class='line'> <span class="cp">#define HSE_VALUE    ((uint32_t)8000000) </span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* HSE_VALUE */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-3-code-code"></a></p>

<h3>完整程式碼</h3>

<p>就是把前面的設定合體再加上一些helper就是了。這個程式也不難，就是印出你打的字。當你按enter後會自動塞入<code>\r</code>並且印出提示符號。</p>

<figure class='code'><figcaption><span>usart.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;stm32f4xx_conf.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stm32f4xx.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stm32f4xx_gpio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stm32f4xx_usart.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setupUSART</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* helper functions */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="nf">getchar</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">putchar</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Setup USART */</span>
</span><span class='line'>    <span class="n">setupUSART</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Greeting */</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello World</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\r</span><span class="s">&gt; &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Echo a character */</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>        <span class="n">putchar</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Show prompt with enter */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">print</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\r</span><span class="s">&gt; &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setupUSART</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">GPIO_InitTypeDef</span> <span class="n">GPIO_InitStructure</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Enable GPIOC clock */</span>
</span><span class='line'>    <span class="n">RCC_AHB1PeriphClockCmd</span><span class="p">(</span><span class="n">RCC_AHB1Periph_GPIOC</span><span class="p">,</span> <span class="n">ENABLE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Connect USART6_Tx instead of PC6 */</span>
</span><span class='line'>    <span class="n">GPIO_PinAFConfig</span><span class="p">(</span><span class="n">GPIOC</span><span class="p">,</span> <span class="n">GPIO_PinSource6</span><span class="p">,</span> <span class="n">GPIO_AF_USART6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Connect USART6_Rx instead of PC7 */</span>
</span><span class='line'>    <span class="n">GPIO_PinAFConfig</span><span class="p">(</span><span class="n">GPIOC</span><span class="p">,</span> <span class="n">GPIO_PinSource7</span><span class="p">,</span> <span class="n">GPIO_AF_USART6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Configure USART Tx (PC6) and Rx (PC7) as alternate function  */</span>
</span><span class='line'>    <span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_Mode</span>  <span class="o">=</span> <span class="n">GPIO_Mode_AF</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_Pin</span>   <span class="o">=</span> <span class="n">GPIO_Pin_6</span> <span class="o">|</span> <span class="n">GPIO_Pin_7</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_Speed</span> <span class="o">=</span> <span class="n">GPIO_Speed_100MHz</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_OType</span> <span class="o">=</span> <span class="n">GPIO_OType_PP</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GPIO_InitStructure</span><span class="p">.</span><span class="n">GPIO_PuPd</span>  <span class="o">=</span> <span class="n">GPIO_PuPd_UP</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GPIO_Init</span><span class="p">(</span><span class="n">GPIOC</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">GPIO_InitStructure</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/********************************************</span>
</span><span class='line'><span class="cm">     * USART set started here</span>
</span><span class='line'><span class="cm">     ********************************************/</span>
</span><span class='line'>    <span class="n">USART_InitTypeDef</span> <span class="n">USART_InitStruct</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Enable USART6 clock */</span>
</span><span class='line'>    <span class="n">RCC_APB2PeriphClockCmd</span><span class="p">(</span><span class="n">RCC_APB2Periph_USART6</span><span class="p">,</span> <span class="n">ENABLE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 115200, N81  */</span>
</span><span class='line'>    <span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_BaudRate</span> <span class="o">=</span> <span class="mi">115200</span><span class="p">;</span>
</span><span class='line'>    <span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_WordLength</span> <span class="o">=</span> <span class="n">USART_WordLength_8b</span><span class="p">;</span>
</span><span class='line'>    <span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_StopBits</span> <span class="o">=</span> <span class="n">USART_StopBits_1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_Parity</span> <span class="o">=</span> <span class="n">USART_Parity_No</span><span class="p">;</span>
</span><span class='line'>    <span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_HardwareFlowControl</span> <span class="o">=</span> <span class="n">USART_HardwareFlowControl_None</span><span class="p">;</span>
</span><span class='line'>    <span class="n">USART_InitStruct</span><span class="p">.</span><span class="n">USART_Mode</span> <span class="o">=</span> <span class="n">USART_Mode_Rx</span> <span class="o">|</span> <span class="n">USART_Mode_Tx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Apply USART settings */</span>
</span><span class='line'>    <span class="n">USART_Init</span><span class="p">(</span><span class="n">USART6</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">USART_InitStruct</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Enable USART */</span>
</span><span class='line'>    <span class="n">USART_Cmd</span><span class="p">(</span><span class="n">USART6</span><span class="p">,</span> <span class="n">ENABLE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="nf">getchar</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">USART_GetFlagStatus</span><span class="p">(</span><span class="n">USART6</span><span class="p">,</span> <span class="n">USART_FLAG_RXNE</span><span class="p">)</span> <span class="o">==</span> <span class="n">RESET</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">USART6</span><span class="o">-&gt;</span><span class="n">DR</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">putchar</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Wait until data was tranferred */</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">USART_GetFlagStatus</span><span class="p">(</span><span class="n">USART6</span><span class="p">,</span> <span class="n">USART_FLAG_TXE</span><span class="p">)</span> <span class="o">==</span> <span class="n">RESET</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">USART6</span><span class="o">-&gt;</span><span class="n">DR</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">assert_param</span><span class="p">(</span><span class="n">str</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">putchar</span><span class="p">(</span><span class="o">*</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>        <span class="n">str</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Trap here for gdb if asserted */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">assert_failed</span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span> <span class="n">file</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-3-code-make"></a></p>

<h3>Makefile</h3>

<p>有兩點要說明</p>

<ol>
<li>加入<code>stm32f4xx_usart.c</code></li>
<li>加入make flash自動燒錄

<ul>
<li>目前發現使用st-flash燒錄有時候顯示燒錄完成，但是實際上測試還是燒錄前的行為，換成openocd測試中</li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='Makefile'><span class='line'><span class="c">#----------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Commom settings</span>
</span><span class='line'><span class="c">#----------------------------------------------------------------------------------</span>
</span><span class='line'><span class="nv">TARGET</span><span class="o">=</span>usart
</span><span class='line'><span class="nv">PRJ_ROOT</span><span class="o">=</span><span class="k">$(</span>shell <span class="nb">cd</span> ../../ <span class="p">;</span> <span class="nb">pwd</span><span class="k">)</span>
</span><span class='line'><span class="cp">include $(PRJ_ROOT)/conf/build.def</span>
</span><span class='line'>
</span><span class='line'><span class="c">#----------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Files to build</span>
</span><span class='line'><span class="c">#----------------------------------------------------------------------------------</span>
</span><span class='line'><span class="nv">SRCS</span>  <span class="o">=</span> <span class="k">$(</span>CMSIS_STARTUP_SRC<span class="k">)</span> <span class="k">$(</span>CMSIS_SYSTEM_SRC<span class="k">)</span>
</span><span class='line'><span class="nv">SRCS</span> <span class="o">+=</span> <span class="k">$(</span>STM_DIR<span class="k">)</span>/src/stm32f4xx_gpio.c
</span><span class='line'><span class="nv">SRCS</span> <span class="o">+=</span> <span class="k">$(</span>STM_DIR<span class="k">)</span>/src/stm32f4xx_rcc.c
</span><span class='line'><span class="nv">SRCS</span> <span class="o">+=</span> <span class="k">$(</span>STM_DIR<span class="k">)</span>/src/stm32f4xx_usart.c
</span><span class='line'><span class="nv">SRCS</span> <span class="o">+=</span> usart.c
</span><span class='line'>
</span><span class='line'><span class="nv">C_OBJS</span> <span class="o">=</span> <span class="k">$(</span>patsubst %.c, %.o, <span class="k">$(</span>SRCS<span class="k">))</span>   <span class="c"># translate *.c to *.o</span>
</span><span class='line'><span class="nv">OBJS</span>   <span class="o">=</span> <span class="k">$(</span>patsubst %.s, %.o, <span class="k">$(</span>C_OBJS<span class="k">))</span> <span class="c"># also *.s to *.o files</span>
</span><span class='line'>
</span><span class='line'><span class="nv">OUT_OBJS</span> <span class="o">=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>OUT_DIR<span class="k">)</span>/, <span class="k">$(</span>OBJS<span class="k">))</span>
</span><span class='line'>
</span><span class='line'><span class="c">#----------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c"># Build here</span>
</span><span class='line'><span class="c">#----------------------------------------------------------------------------------</span>
</span><span class='line'><span class="nf">$(OUT_DIR)/$(TARGET).bin</span><span class="o">:</span> <span class="k">$(</span><span class="nv">OUT_OBJS</span><span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>TOOL_CHAIN_PREFIX<span class="k">)</span>-gcc -Wl,-Map<span class="o">=</span><span class="k">$(</span>OUT_DIR<span class="k">)</span>/<span class="k">$(</span>TARGET<span class="k">)</span>.map,-T<span class="k">$(</span>TARGET<span class="k">)</span>.ld -nostartfiles <span class="se">\</span>
</span><span class='line'>      <span class="k">$(</span>CFLAGS<span class="k">)</span> <span class="k">$(</span>OUT_OBJS<span class="k">)</span> -o <span class="k">$(</span>OUT_DIR<span class="k">)</span>/<span class="k">$(</span>TARGET<span class="k">)</span>.elf
</span><span class='line'>  <span class="k">$(</span>TOOL_CHAIN_PREFIX<span class="k">)</span>-objcopy -Obinary <span class="k">$(</span>OUT_DIR<span class="k">)</span>/<span class="k">$(</span>TARGET<span class="k">)</span>.elf <span class="nv">$@</span>
</span><span class='line'>  <span class="k">$(</span>TOOL_CHAIN_PREFIX<span class="k">)</span>-objdump -S <span class="k">$(</span>OUT_DIR<span class="k">)</span>/<span class="k">$(</span>TARGET<span class="k">)</span>.elf &gt; <span class="k">$(</span>OUT_DIR<span class="k">)</span>/<span class="k">$(</span>TARGET<span class="k">)</span>.list
</span><span class='line'>
</span><span class='line'><span class="nf">$(OUT_DIR)/%.o</span><span class="o">:</span> %.<span class="n">s</span>
</span><span class='line'>  mkdir -p <span class="k">$(</span>dir <span class="nv">$@</span><span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>TOOL_CHAIN_PREFIX<span class="k">)</span>-gcc -c <span class="k">$(</span>CFLAGS<span class="k">)</span> <span class="nv">$&lt;</span> -o <span class="nv">$@</span>
</span><span class='line'>
</span><span class='line'><span class="nf">$(OUT_DIR)/%.o</span><span class="o">:</span> %.<span class="n">c</span>
</span><span class='line'>  mkdir -p <span class="k">$(</span>dir <span class="nv">$@</span><span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>TOOL_CHAIN_PREFIX<span class="k">)</span>-gcc -c <span class="k">$(</span>CFLAGS<span class="k">)</span> <span class="nv">$&lt;</span> -o <span class="nv">$@</span>
</span><span class='line'>
</span><span class='line'><span class="nf">flash</span><span class="o">:</span> <span class="k">$(</span><span class="nv">OUT_DIR</span><span class="k">)</span>/<span class="k">$(</span><span class="nv">TARGET</span><span class="k">)</span>.<span class="n">bin</span>
</span><span class='line'>  openocd -f interface/stlink-v2.cfg  <span class="se">\</span>
</span><span class='line'>            -f target/stm32f4x.cfg      <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;init&quot;</span>                   <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;reset init&quot;</span>             <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;stm32f2x unlock 0&quot;</span>      <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;flash probe 0&quot;</span>          <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;flash info 0&quot;</span>           <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;flash write_image erase $&lt; 0x8000000&quot;</span> <span class="se">\</span>
</span><span class='line'>            -c <span class="s2">&quot;reset run&quot;</span> -c shutdown
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  rm -fr <span class="k">$(</span>OUT_DIR<span class="k">)</span> gdb.txt
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-3-test"></a></p>

<h2>功能驗證</h2>

<h3>邏輯分析儀驗證</h3>

<p>現在邏輯分析儀已經可以自動幫你抓波形分析了。當你下載並解壓縮檔案後，記得更新udev的Rule讓電腦可以認得邏輯分析儀。</p>

<p>接下來你要設定邏輯分析儀的分析通訊協定為Async Serial 如下圖
<img src="http://wen00072.github.io/files/stm32/LG_SP1.jpg"/></p>

<p>選了Async Serial會有選單出現，你需要設定用第幾個Channel以及USART通訊參數如下圖
<img src="http://wen00072.github.io/files/stm32/LG_SP2.jpg"/></p>

<p>如果需要的話，你可以進一步設定取樣速度、取樣時間如下圖
<img src="http://wen00072.github.io/files/stm32/LG_SP3.jpg"/></p>

<p>假設你的邏輯分析儀接腳都接好了就可以按開始分析訊號了
<img src="http://wen00072.github.io/files/stm32/LG_SP4.jpg"/></p>

<p>這是一個成功的Hello World波形分析，圖可能有點小，全圖在<a href="http://wen00072.github.io/files/stm32/usart2.jpg">這邊</a>。
<img src="http://wen00072.github.io/files/stm32/usart2.jpg"/></p>

<h3>實際驗證</h3>

<p>你需要先把USB 轉 RS232 TTL 轉接線接到版子上如下圖
<img src="http://wen00072.github.io/files/stm32/STM_USART_Pin.jpg"/></p>

<p>我是使用mintern，執行畫面如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ miniterm.py -b 115200 -p /dev/ttyUSB0
</span><span class='line'>--- Miniterm on /dev/ttyUSB0: 115200,8,N,1 ---
</span><span class='line'>--- Quit: Ctrl+]  |  Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---
</span><span class='line'>test
</span><span class='line'>&gt; test
</span><span class='line'>&gt; test
</span><span class='line'>&gt; test
</span><span class='line'>&gt; testast
</span><span class='line'>&gt; teadsatdsasd
</span></code></pre></td></tr></table></div></figure>


<p><a name="stm-3-ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://homes.soic.indiana.edu/geobrown/index.cgi/teaching">Geoffrey Brown: Teaching </a>

<ul>
<li>請找 Lab Manual 裏面的link, 書名是<code>Discovering the STM32 Microcontroller</code></li>
</ul>
</li>
<li><a href="http://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-discovery-kits/32f429idiscovery.html">STM32F4 Discovry Disco 開發版手冊</a></li>
<li><a href="http://www.st.com/content/st_com/en/products/embedded-software/mcus-embedded-software/stm32-embedded-software/stm32-standard-peripheral-libraries/stsw-stm32065.html">STM32F4 DSP and standard peripherals library</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
